// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"kUj2":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"FlpK":[function(require,module,exports) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"flex":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];

  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }

  return (hint === "string" ? String : Number)(input);
}

module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":"FlpK"}],"ZvLS":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];

var toPrimitive = require("./toPrimitive.js");

function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":"FlpK","./toPrimitive.js":"flex"}],"dMjH":[function(require,module,exports) {
var toPropertyKey = require("./toPropertyKey.js");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./toPropertyKey.js":"ZvLS"}],"VuXv":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"ZCrj":[function(require,module,exports) {
var define;
var global = arguments[3];
//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

},{}],"Heea":[function(require,module,exports) {
var define;
var global = arguments[3];
//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split(
            '_'
        ),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split(
            '_'
        ),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split(
            '_'
        ),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            w: 'één week',
            ww: '%d weken',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));

},{"../moment":"ZCrj"}],"gInK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileHelper = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var moment = _interopRequireWildcard(require("moment"));

require("moment/locale/nl");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

moment.locale('nl');

var FileHelper = /*#__PURE__*/function () {
  function FileHelper(file) {
    (0, _classCallCheck2.default)(this, FileHelper);
    this.fileName = '';
    this.allowedFileTypes = ['.csv', '.json']; // Disabled .csv as supported file format because it turns out nesting (compplex) objects in .csv is hard to read/maintain. .json is much easier to read for some quick excel editing.
    // private allowedFileTypes: string[] = ['.json'];

    this.fileErrorsList = [];
    this.fileType = '';
    var fileName;

    if (file instanceof File) {
      if (file.size === 0) {
        this.addFileErrorToList("File contents cannot be empty. New profiles must at least contain an empty array \"[]\"");
        return;
      }

      fileName = file.name;
    } else {
      fileName = file;
    }

    if (fileName.length === 0) {
      this.addFileErrorToList("Filename cannot be empty. Please update your filename");
      console.error("Filename cannot be empty. Please check the filename of the imported file.");
      return;
    }

    this.clearFileErrorList();
    this.setFileType(fileName);

    if (this.isValidFileType() && this.isValidFileName(fileName)) {
      console.log('uploaded file: ');
      console.dir(file);
      this.fileName = fileName;
    }
  }

  (0, _createClass2.default)(FileHelper, [{
    key: "setFileType",
    value: function setFileType(fileName) {
      var extension = fileName && fileName.split('.').length ? fileName.split('.').pop() : '';

      if (extension && extension.length > 0) {
        this.fileType = extension === null || extension === void 0 ? void 0 : extension.padStart(extension.length + 1, '.');
      } else {
        this.addFileErrorToList("Could not get extension from uploaded file. Please check the file name & file extension.");
        console.error("Could not get extension from uploaded file. Please check the file name & file extension.");
      }
    }
  }, {
    key: "getFileName",
    value: function getFileName() {
      return this.fileName;
    }
  }, {
    key: "isValidFileType",
    value: function isValidFileType() {
      var _this = this;

      if (this.fileType.length === 0) {
        return false;
      }

      var isValidExtension = this.allowedFileTypes.some(function (allowedFileType) {
        return allowedFileType === _this.fileType;
      });

      if (isValidExtension) {
        return true;
      }

      this.addFileErrorToList("Unrecognized or unallowed file type, try again with a different file. Allowed file types: ".concat(this.allowedFileTypes.toString()));
      return false;
    }
  }, {
    key: "isValidFileName",
    value: function isValidFileName(uploadedFileName) {
      if (!uploadedFileName.includes('_')) {
        this.addFileErrorToList("Invalid filename. Please make sure that the uploaded filename is of the following structure: \"Profile_profilename_datetime\" e.g: \"Profile_Jack_15-03-2022--23-59-59.json\"");
        return false;
      }

      var splitFileName = uploadedFileName.split('_');
      var hasProfilePrefix = false;
      var hasName = false;
      var datetime = false;

      if (splitFileName.length === 3) {
        var extensionDotPosition = splitFileName[2].lastIndexOf('.');
        splitFileName[2] = splitFileName[2].slice(0, extensionDotPosition);
        hasProfilePrefix = splitFileName[0] === 'Profile' ? true : false;
        hasName = splitFileName[1].length > 0 ? true : false;
        datetime = this.checkFileDateTimeIsValid(splitFileName[2]);
      }

      if (!hasProfilePrefix) {
        this.addFileErrorToList("Incorrect profile prefix. The profile prefix must be \"Profile\"");
      }

      if (!hasName) {
        this.addFileErrorToList("Incorrect profile name. Please provide a name");
      }

      if (!datetime) {
        this.addFileErrorToList("Incorrect profile datetime. Please provide the datetime in the following format: \"'DD-MM-YYY--HH-mm-ss'\", e.g: \"15-03-2022--23-59-59\" and ensure the datetime is valid");
      }

      return hasProfilePrefix && hasName && datetime;
    }
  }, {
    key: "checkFileDateTimeIsValid",
    value: function checkFileDateTimeIsValid(datetimeFromFileName) {
      var date = datetimeFromFileName.split('--');
      date[1] = date[1].replaceAll('-', ':');
      return moment.default(date.join(' '), 'DD-MM-YYYY HH:mm:ss', true).isValid();
    }
  }, {
    key: "getUpdateFileName",
    value: function getUpdateFileName() {
      var splitFileName = this.fileName.split('_');
      var datetimeWithExtension = splitFileName.pop();
      var currentDateTimeForFileName = moment.default().format('DD-MM-YYYY--HH-mm-ss');
      var extension;

      if (datetimeWithExtension) {
        var extensionDotPosition = datetimeWithExtension.lastIndexOf('.');
        extension = datetimeWithExtension.slice(extensionDotPosition);
        splitFileName.push(currentDateTimeForFileName);
        return splitFileName.join('_') + extension;
      } else {
        console.error("Filename is incorrect. Please update the filename. Returning a generic filename!");
        return "Profile_Testname_".concat(currentDateTimeForFileName, ".json");
      }
    }
  }, {
    key: "hasFileErrors",
    value: function hasFileErrors() {
      return this.fileErrorsList.length > 0 ? true : false;
    }
  }, {
    key: "getFileErrors",
    value: function getFileErrors() {
      return this.fileErrorsList;
    }
  }, {
    key: "addFileErrorToList",
    value: function addFileErrorToList(fileErrorMessage) {
      this.fileErrorsList.push(fileErrorMessage);
    }
  }, {
    key: "clearFileErrorList",
    value: function clearFileErrorList() {
      this.fileErrorsList.length = 0;
    }
  }]);
  return FileHelper;
}();

exports.FileHelper = FileHelper;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","moment":"ZCrj","moment/locale/nl":"Heea"}],"cDDx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDomain;

/**
 * Check if `vhost` is a valid suffix of `hostname` (top-domain)
 *
 * It means that `vhost` needs to be a suffix of `hostname` and we then need to
 * make sure that: either they are equal, or the character preceding `vhost` in
 * `hostname` is a '.' (it should not be a partial label).
 *
 * * hostname = 'not.evil.com' and vhost = 'vil.com'      => not ok
 * * hostname = 'not.evil.com' and vhost = 'evil.com'     => ok
 * * hostname = 'not.evil.com' and vhost = 'not.evil.com' => ok
 */
function shareSameDomainSuffix(hostname, vhost) {
  if (hostname.endsWith(vhost)) {
    return hostname.length === vhost.length || hostname[hostname.length - vhost.length - 1] === '.';
  }

  return false;
}
/**
 * Given a hostname and its public suffix, extract the general domain.
 */


function extractDomainWithSuffix(hostname, publicSuffix) {
  // Locate the index of the last '.' in the part of the `hostname` preceding
  // the public suffix.
  //
  // examples:
  //   1. not.evil.co.uk  => evil.co.uk
  //         ^    ^
  //         |    | start of public suffix
  //         | index of the last dot
  //
  //   2. example.co.uk   => example.co.uk
  //     ^       ^
  //     |       | start of public suffix
  //     |
  //     | (-1) no dot found before the public suffix
  const publicSuffixIndex = hostname.length - publicSuffix.length - 2;
  const lastDotBeforeSuffixIndex = hostname.lastIndexOf('.', publicSuffixIndex); // No '.' found, then `hostname` is the general domain (no sub-domain)

  if (lastDotBeforeSuffixIndex === -1) {
    return hostname;
  } // Extract the part between the last '.'


  return hostname.slice(lastDotBeforeSuffixIndex + 1);
}
/**
 * Detects the domain based on rules and upon and a host string
 */


function getDomain(suffix, hostname, options) {
  // Check if `hostname` ends with a member of `validHosts`.
  if (options.validHosts !== null) {
    const validHosts = options.validHosts;

    for (let i = 0; i < validHosts.length; i += 1) {
      const vhost = validHosts[i];

      if (
      /*@__INLINE__*/
      shareSameDomainSuffix(hostname, vhost) === true) {
        return vhost;
      }
    }
  } // If `hostname` is a valid public suffix, then there is no domain to return.
  // Since we already know that `getPublicSuffix` returns a suffix of `hostname`
  // there is no need to perform a string comparison and we only compare the
  // size.


  if (suffix.length === hostname.length) {
    return null;
  } // To extract the general domain, we start by identifying the public suffix
  // (if any), then consider the domain to be the public suffix with one added
  // level of depth. (e.g.: if hostname is `not.evil.co.uk` and public suffix:
  // `co.uk`, then we take one more level: `evil`, giving the final result:
  // `evil.co.uk`).


  return (
    /*@__INLINE__*/
    extractDomainWithSuffix(hostname, suffix)
  );
}
},{}],"gIjo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDomainWithoutSuffix;

/**
 * Return the part of domain without suffix.
 *
 * Example: for domain 'foo.com', the result would be 'foo'.
 */
function getDomainWithoutSuffix(domain, suffix) {
  // Note: here `domain` and `suffix` cannot have the same length because in
  // this case we set `domain` to `null` instead. It is thus safe to assume
  // that `suffix` is shorter than `domain`.
  return domain.slice(0, -suffix.length - 1);
}
},{}],"cUfk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractHostname;

/**
 * @param url - URL we want to extract a hostname from.
 * @param urlIsValidHostname - hint from caller; true if `url` is already a valid hostname.
 */
function extractHostname(url, urlIsValidHostname) {
  let start = 0;
  let end = url.length;
  let hasUpper = false; // If url is not already a valid hostname, then try to extract hostname.

  if (urlIsValidHostname === false) {
    // Special handling of data URLs
    if (url.startsWith('data:') === true) {
      return null;
    } // Trim leading spaces


    while (start < url.length && url.charCodeAt(start) <= 32) {
      start += 1;
    } // Trim trailing spaces


    while (end > start + 1 && url.charCodeAt(end - 1) <= 32) {
      end -= 1;
    } // Skip scheme.


    if (url.charCodeAt(start) === 47
    /* '/' */
    && url.charCodeAt(start + 1) === 47
    /* '/' */
    ) {
        start += 2;
      } else {
      const indexOfProtocol = url.indexOf(':/', start);

      if (indexOfProtocol !== -1) {
        // Implement fast-path for common protocols. We expect most protocols
        // should be one of these 4 and thus we will not need to perform the
        // more expansive validity check most of the time.
        const protocolSize = indexOfProtocol - start;
        const c0 = url.charCodeAt(start);
        const c1 = url.charCodeAt(start + 1);
        const c2 = url.charCodeAt(start + 2);
        const c3 = url.charCodeAt(start + 3);
        const c4 = url.charCodeAt(start + 4);

        if (protocolSize === 5 && c0 === 104
        /* 'h' */
        && c1 === 116
        /* 't' */
        && c2 === 116
        /* 't' */
        && c3 === 112
        /* 'p' */
        && c4 === 115
        /* 's' */
        ) {// https
          } else if (protocolSize === 4 && c0 === 104
        /* 'h' */
        && c1 === 116
        /* 't' */
        && c2 === 116
        /* 't' */
        && c3 === 112
        /* 'p' */
        ) {// http
          } else if (protocolSize === 3 && c0 === 119
        /* 'w' */
        && c1 === 115
        /* 's' */
        && c2 === 115
        /* 's' */
        ) {// wss
          } else if (protocolSize === 2 && c0 === 119
        /* 'w' */
        && c1 === 115
        /* 's' */
        ) {// ws
          } else {
          // Check that scheme is valid
          for (let i = start; i < indexOfProtocol; i += 1) {
            const lowerCaseCode = url.charCodeAt(i) | 32;

            if ((lowerCaseCode >= 97 && lowerCaseCode <= 122 || // [a, z]
            lowerCaseCode >= 48 && lowerCaseCode <= 57 || // [0, 9]
            lowerCaseCode === 46 || // '.'
            lowerCaseCode === 45 || // '-'
            lowerCaseCode === 43) === false // '+'
            ) {
                return null;
              }
          }
        } // Skip 0, 1 or more '/' after ':/'


        start = indexOfProtocol + 2;

        while (url.charCodeAt(start) === 47
        /* '/' */
        ) {
          start += 1;
        }
      }
    } // Detect first occurrence of '/', '?' or '#'. We also keep track of the
    // last occurrence of '@', ']' or ':' to speed-up subsequent parsing of
    // (respectively), identifier, ipv6 or port.


    let indexOfIdentifier = -1;
    let indexOfClosingBracket = -1;
    let indexOfPort = -1;

    for (let i = start; i < end; i += 1) {
      const code = url.charCodeAt(i);

      if (code === 35 || // '#'
      code === 47 || // '/'
      code === 63 // '?'
      ) {
          end = i;
          break;
        } else if (code === 64) {
        // '@'
        indexOfIdentifier = i;
      } else if (code === 93) {
        // ']'
        indexOfClosingBracket = i;
      } else if (code === 58) {
        // ':'
        indexOfPort = i;
      } else if (code >= 65 && code <= 90) {
        hasUpper = true;
      }
    } // Detect identifier: '@'


    if (indexOfIdentifier !== -1 && indexOfIdentifier > start && indexOfIdentifier < end) {
      start = indexOfIdentifier + 1;
    } // Handle ipv6 addresses


    if (url.charCodeAt(start) === 91
    /* '[' */
    ) {
        if (indexOfClosingBracket !== -1) {
          return url.slice(start + 1, indexOfClosingBracket).toLowerCase();
        }

        return null;
      } else if (indexOfPort !== -1 && indexOfPort > start && indexOfPort < end) {
      // Detect port: ':'
      end = indexOfPort;
    }
  } // Trim trailing dots


  while (end > start + 1 && url.charCodeAt(end - 1) === 46
  /* '.' */
  ) {
    end -= 1;
  }

  const hostname = start !== 0 || end !== url.length ? url.slice(start, end) : url;

  if (hasUpper) {
    return hostname.toLowerCase();
  }

  return hostname;
}
},{}],"NYfg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIp;

/**
 * Check if a hostname is an IP. You should be aware that this only works
 * because `hostname` is already garanteed to be a valid hostname!
 */
function isProbablyIpv4(hostname) {
  // Cannot be shorted than 1.1.1.1
  if (hostname.length < 7) {
    return false;
  } // Cannot be longer than: 255.255.255.255


  if (hostname.length > 15) {
    return false;
  }

  let numberOfDots = 0;

  for (let i = 0; i < hostname.length; i += 1) {
    const code = hostname.charCodeAt(i);

    if (code === 46
    /* '.' */
    ) {
        numberOfDots += 1;
      } else if (code < 48
    /* '0' */
    || code > 57
    /* '9' */
    ) {
        return false;
      }
  }

  return numberOfDots === 3 && hostname.charCodeAt(0) !== 46
  /* '.' */
  && hostname.charCodeAt(hostname.length - 1) !== 46
  /* '.' */
  ;
}
/**
 * Similar to isProbablyIpv4.
 */


function isProbablyIpv6(hostname) {
  if (hostname.length < 3) {
    return false;
  }

  let start = hostname[0] === '[' ? 1 : 0;
  let end = hostname.length;

  if (hostname[end - 1] === ']') {
    end -= 1;
  } // We only consider the maximum size of a normal IPV6. Note that this will
  // fail on so-called "IPv4 mapped IPv6 addresses" but this is a corner-case
  // and a proper validation library should be used for these.


  if (end - start > 39) {
    return false;
  }

  let hasColon = false;

  for (; start < end; start += 1) {
    const code = hostname.charCodeAt(start);

    if (code === 58
    /* ':' */
    ) {
        hasColon = true;
      } else if ((code >= 48 && code <= 57 || // 0-9
    code >= 97 && code <= 102 || // a-f
    code >= 65 && code <= 90) === // A-F
    false) {
      return false;
    }
  }

  return hasColon;
}
/**
 * Check if `hostname` is *probably* a valid ip addr (either ipv6 or ipv4).
 * This *will not* work on any string. We need `hostname` to be a valid
 * hostname.
 */


function isIp(hostname) {
  return isProbablyIpv6(hostname) || isProbablyIpv4(hostname);
}
},{}],"gjws":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Implements fast shallow verification of hostnames. This does not perform a
 * struct check on the content of labels (classes of Unicode characters, etc.)
 * but instead check that the structure is valid (number of labels, length of
 * labels, etc.).
 *
 * If you need stricter validation, consider using an external library.
 */
function isValidAscii(code) {
  return code >= 97 && code <= 122 || code >= 48 && code <= 57 || code > 127;
}
/**
 * Check if a hostname string is valid. It's usually a preliminary check before
 * trying to use getDomain or anything else.
 *
 * Beware: it does not check if the TLD exists.
 */


function _default(hostname) {
  if (hostname.length > 255) {
    return false;
  }

  if (hostname.length === 0) {
    return false;
  }

  if (
  /*@__INLINE__*/
  isValidAscii(hostname.charCodeAt(0)) === false) {
    return false;
  } // Validate hostname according to RFC


  let lastDotIndex = -1;
  let lastCharCode = -1;
  const len = hostname.length;

  for (let i = 0; i < len; i += 1) {
    const code = hostname.charCodeAt(i);

    if (code === 46
    /* '.' */
    ) {
        if ( // Check that previous label is < 63 bytes long (64 = 63 + '.')
        i - lastDotIndex > 64 || // Check that previous character was not already a '.'
        lastCharCode === 46 || // Check that the previous label does not end with a '-' (dash)
        lastCharCode === 45 || // Check that the previous label does not end with a '_' (underscore)
        lastCharCode === 95) {
          return false;
        }

        lastDotIndex = i;
      } else if ((
    /*@__INLINE__*/
    isValidAscii(code) || code === 45 || code === 95) === false) {
      // Check if there is a forbidden character in the label
      return false;
    }

    lastCharCode = code;
  }

  return (// Check that last label is shorter than 63 chars
    len - lastDotIndex - 1 <= 63 && // Check that the last character is an allowed trailing label character.
    // Since we already checked that the char is a valid hostname character,
    // we only need to check that it's different from '-'.
    lastCharCode !== 45
  );
}
},{}],"BRaa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDefaults = setDefaults;

function setDefaultsImpl({
  allowIcannDomains = true,
  allowPrivateDomains = false,
  detectIp = true,
  extractHostname = true,
  mixedInputs = true,
  validHosts = null,
  validateHostname = true
}) {
  return {
    allowIcannDomains,
    allowPrivateDomains,
    detectIp,
    extractHostname,
    mixedInputs,
    validHosts,
    validateHostname
  };
}

const DEFAULT_OPTIONS =
/*@__INLINE__*/
setDefaultsImpl({});

function setDefaults(options) {
  if (options === undefined) {
    return DEFAULT_OPTIONS;
  }

  return (
    /*@__INLINE__*/
    setDefaultsImpl(options)
  );
}
},{}],"g1tg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getSubdomain;

/**
 * Returns the subdomain of a hostname string
 */
function getSubdomain(hostname, domain) {
  // If `hostname` and `domain` are the same, then there is no sub-domain
  if (domain.length === hostname.length) {
    return '';
  }

  return hostname.slice(0, -domain.length - 1);
}
},{}],"znst":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEmptyResult = getEmptyResult;
exports.resetResult = resetResult;
exports.parseImpl = parseImpl;

var _domain = _interopRequireDefault(require("./domain"));

var _domainWithoutSuffix = _interopRequireDefault(require("./domain-without-suffix"));

var _extractHostname = _interopRequireDefault(require("./extract-hostname"));

var _isIp = _interopRequireDefault(require("./is-ip"));

var _isValid = _interopRequireDefault(require("./is-valid"));

var _options = require("./options");

var _subdomain = _interopRequireDefault(require("./subdomain"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implement a factory allowing to plug different implementations of suffix
 * lookup (e.g.: using a trie or the packed hashes datastructures). This is used
 * and exposed in `tldts.ts` and `tldts-experimental.ts` bundle entrypoints.
 */
function getEmptyResult() {
  return {
    domain: null,
    domainWithoutSuffix: null,
    hostname: null,
    isIcann: null,
    isIp: null,
    isPrivate: null,
    publicSuffix: null,
    subdomain: null
  };
}

function resetResult(result) {
  result.domain = null;
  result.domainWithoutSuffix = null;
  result.hostname = null;
  result.isIcann = null;
  result.isIp = null;
  result.isPrivate = null;
  result.publicSuffix = null;
  result.subdomain = null;
}

function parseImpl(url, step, suffixLookup, partialOptions, result) {
  const options = (0, _options.setDefaults)(partialOptions); // Very fast approximate check to make sure `url` is a string. This is needed
  // because the library will not necessarily be used in a typed setup and
  // values of arbitrary types might be given as argument.

  if (typeof url !== 'string') {
    return result;
  } // Extract hostname from `url` only if needed. This can be made optional
  // using `options.extractHostname`. This option will typically be used
  // whenever we are sure the inputs to `parse` are already hostnames and not
  // arbitrary URLs.
  //
  // `mixedInput` allows to specify if we expect a mix of URLs and hostnames
  // as input. If only hostnames are expected then `extractHostname` can be
  // set to `false` to speed-up parsing. If only URLs are expected then
  // `mixedInputs` can be set to `false`. The `mixedInputs` is only a hint
  // and will not change the behavior of the library.


  if (options.extractHostname === false) {
    result.hostname = url;
  } else if (options.mixedInputs === true) {
    result.hostname = (0, _extractHostname.default)(url, (0, _isValid.default)(url));
  } else {
    result.hostname = (0, _extractHostname.default)(url, false);
  }

  if (step === 0
  /* HOSTNAME */
  || result.hostname === null) {
    return result;
  } // Check if `hostname` is a valid ip address


  if (options.detectIp === true) {
    result.isIp = (0, _isIp.default)(result.hostname);

    if (result.isIp === true) {
      return result;
    }
  } // Perform optional hostname validation. If hostname is not valid, no need to
  // go further as there will be no valid domain or sub-domain.


  if (options.validateHostname === true && options.extractHostname === true && (0, _isValid.default)(result.hostname) === false) {
    result.hostname = null;
    return result;
  } // Extract public suffix


  suffixLookup(result.hostname, options, result);

  if (step === 2
  /* PUBLIC_SUFFIX */
  || result.publicSuffix === null) {
    return result;
  } // Extract domain


  result.domain = (0, _domain.default)(result.publicSuffix, result.hostname, options);

  if (step === 3
  /* DOMAIN */
  || result.domain === null) {
    return result;
  } // Extract subdomain


  result.subdomain = (0, _subdomain.default)(result.hostname, result.domain);

  if (step === 4
  /* SUB_DOMAIN */
  ) {
      return result;
    } // Extract domain without suffix


  result.domainWithoutSuffix = (0, _domainWithoutSuffix.default)(result.domain, result.publicSuffix);
  return result;
}
},{"./domain":"cDDx","./domain-without-suffix":"gIjo","./extract-hostname":"cUfk","./is-ip":"NYfg","./is-valid":"gjws","./options":"BRaa","./subdomain":"g1tg"}],"eNu1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(hostname, options, out) {
  // Fast path for very popular suffixes; this allows to by-pass lookup
  // completely as well as any extra allocation or string manipulation.
  if (options.allowPrivateDomains === false && hostname.length > 3) {
    const last = hostname.length - 1;
    const c3 = hostname.charCodeAt(last);
    const c2 = hostname.charCodeAt(last - 1);
    const c1 = hostname.charCodeAt(last - 2);
    const c0 = hostname.charCodeAt(last - 3);

    if (c3 === 109
    /* 'm' */
    && c2 === 111
    /* 'o' */
    && c1 === 99
    /* 'c' */
    && c0 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'com';
        return true;
      } else if (c3 === 103
    /* 'g' */
    && c2 === 114
    /* 'r' */
    && c1 === 111
    /* 'o' */
    && c0 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'org';
        return true;
      } else if (c3 === 117
    /* 'u' */
    && c2 === 100
    /* 'd' */
    && c1 === 101
    /* 'e' */
    && c0 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'edu';
        return true;
      } else if (c3 === 118
    /* 'v' */
    && c2 === 111
    /* 'o' */
    && c1 === 103
    /* 'g' */
    && c0 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'gov';
        return true;
      } else if (c3 === 116
    /* 't' */
    && c2 === 101
    /* 'e' */
    && c1 === 110
    /* 'n' */
    && c0 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'net';
        return true;
      } else if (c3 === 101
    /* 'e' */
    && c2 === 100
    /* 'd' */
    && c1 === 46
    /* '.' */
    ) {
        out.isIcann = true;
        out.isPrivate = false;
        out.publicSuffix = 'de';
        return true;
      }
  }

  return false;
}
},{}],"U6aO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "parseImpl", {
  enumerable: true,
  get: function () {
    return _factory.parseImpl;
  }
});
Object.defineProperty(exports, "getEmptyResult", {
  enumerable: true,
  get: function () {
    return _factory.getEmptyResult;
  }
});
Object.defineProperty(exports, "resetResult", {
  enumerable: true,
  get: function () {
    return _factory.resetResult;
  }
});
Object.defineProperty(exports, "fastPathLookup", {
  enumerable: true,
  get: function () {
    return _fastPath.default;
  }
});
Object.defineProperty(exports, "setDefaults", {
  enumerable: true,
  get: function () {
    return _options.setDefaults;
  }
});

var _factory = require("./src/factory");

var _fastPath = _interopRequireDefault(require("./src/lookup/fast-path"));

var _options = require("./src/options");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./src/factory":"znst","./src/lookup/fast-path":"eNu1","./src/options":"BRaa"}],"v2lr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rules = exports.exceptions = void 0;

const exceptions = function () {
  const _0 = {
    "$": 1,
    "succ": {}
  },
        _1 = {
    "$": 0,
    "succ": {
      "city": _0
    }
  };
  const exceptions = {
    "$": 0,
    "succ": {
      "ck": {
        "$": 0,
        "succ": {
          "www": _0
        }
      },
      "jp": {
        "$": 0,
        "succ": {
          "kawasaki": _1,
          "kitakyushu": _1,
          "kobe": _1,
          "nagoya": _1,
          "sapporo": _1,
          "sendai": _1,
          "yokohama": _1
        }
      }
    }
  };
  ;
  return exceptions;
}();

exports.exceptions = exceptions;

const rules = function () {
  const _2 = {
    "$": 1,
    "succ": {}
  },
        _3 = {
    "$": 2,
    "succ": {}
  },
        _4 = {
    "$": 1,
    "succ": {
      "gov": _2,
      "com": _2,
      "org": _2,
      "net": _2,
      "edu": _2
    }
  },
        _5 = {
    "$": 0,
    "succ": {
      "*": _3
    }
  },
        _6 = {
    "$": 1,
    "succ": {
      "blogspot": _3
    }
  },
        _7 = {
    "$": 1,
    "succ": {
      "gov": _2
    }
  },
        _8 = {
    "$": 0,
    "succ": {
      "*": _2
    }
  },
        _9 = {
    "$": 0,
    "succ": {
      "cloud": _3
    }
  },
        _10 = {
    "$": 1,
    "succ": {
      "co": _3
    }
  },
        _11 = {
    "$": 0,
    "succ": {
      "s3": _3
    }
  },
        _12 = {
    "$": 0,
    "succ": {
      "dualstack": _11
    }
  },
        _13 = {
    "$": 0,
    "succ": {
      "s3": _3,
      "dualstack": _11,
      "s3-website": _3
    }
  },
        _14 = {
    "$": 0,
    "succ": {
      "apps": _3
    }
  },
        _15 = {
    "$": 0,
    "succ": {
      "paas": _3
    }
  },
        _16 = {
    "$": 0,
    "succ": {
      "app": _3
    }
  },
        _17 = {
    "$": 2,
    "succ": {
      "eu": _3
    }
  },
        _18 = {
    "$": 0,
    "succ": {
      "pages": _3
    }
  },
        _19 = {
    "$": 0,
    "succ": {
      "j": _3
    }
  },
        _20 = {
    "$": 0,
    "succ": {
      "jelastic": _3
    }
  },
        _21 = {
    "$": 0,
    "succ": {
      "user": _3
    }
  },
        _22 = {
    "$": 1,
    "succ": {
      "ybo": _3
    }
  },
        _23 = {
    "$": 0,
    "succ": {
      "cust": _3,
      "reservd": _3
    }
  },
        _24 = {
    "$": 0,
    "succ": {
      "cust": _3
    }
  },
        _25 = {
    "$": 1,
    "succ": {
      "gov": _2,
      "edu": _2,
      "mil": _2,
      "com": _2,
      "org": _2,
      "net": _2
    }
  },
        _26 = {
    "$": 1,
    "succ": {
      "edu": _2,
      "biz": _2,
      "net": _2,
      "org": _2,
      "gov": _2,
      "info": _2,
      "com": _2
    }
  },
        _27 = {
    "$": 1,
    "succ": {
      "gov": _2,
      "blogspot": _3
    }
  },
        _28 = {
    "$": 1,
    "succ": {
      "barsy": _3
    }
  },
        _29 = {
    "$": 0,
    "succ": {
      "forgot": _3
    }
  },
        _30 = {
    "$": 1,
    "succ": {
      "gs": _2
    }
  },
        _31 = {
    "$": 0,
    "succ": {
      "nes": _2
    }
  },
        _32 = {
    "$": 1,
    "succ": {
      "k12": _2,
      "cc": _2,
      "lib": _2
    }
  },
        _33 = {
    "$": 1,
    "succ": {
      "cc": _2,
      "lib": _2
    }
  };
  const rules = {
    "$": 0,
    "succ": {
      "ac": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "net": _2,
          "mil": _2,
          "org": _2,
          "drr": _3
        }
      },
      "ad": {
        "$": 1,
        "succ": {
          "nom": _2
        }
      },
      "ae": {
        "$": 1,
        "succ": {
          "co": _2,
          "net": _2,
          "org": _2,
          "sch": _2,
          "ac": _2,
          "gov": _2,
          "mil": _2,
          "blogspot": _3
        }
      },
      "aero": {
        "$": 1,
        "succ": {
          "accident-investigation": _2,
          "accident-prevention": _2,
          "aerobatic": _2,
          "aeroclub": _2,
          "aerodrome": _2,
          "agents": _2,
          "aircraft": _2,
          "airline": _2,
          "airport": _2,
          "air-surveillance": _2,
          "airtraffic": _2,
          "air-traffic-control": _2,
          "ambulance": _2,
          "amusement": _2,
          "association": _2,
          "author": _2,
          "ballooning": _2,
          "broker": _2,
          "caa": _2,
          "cargo": _2,
          "catering": _2,
          "certification": _2,
          "championship": _2,
          "charter": _2,
          "civilaviation": _2,
          "club": _2,
          "conference": _2,
          "consultant": _2,
          "consulting": _2,
          "control": _2,
          "council": _2,
          "crew": _2,
          "design": _2,
          "dgca": _2,
          "educator": _2,
          "emergency": _2,
          "engine": _2,
          "engineer": _2,
          "entertainment": _2,
          "equipment": _2,
          "exchange": _2,
          "express": _2,
          "federation": _2,
          "flight": _2,
          "fuel": _2,
          "gliding": _2,
          "government": _2,
          "groundhandling": _2,
          "group": _2,
          "hanggliding": _2,
          "homebuilt": _2,
          "insurance": _2,
          "journal": _2,
          "journalist": _2,
          "leasing": _2,
          "logistics": _2,
          "magazine": _2,
          "maintenance": _2,
          "media": _2,
          "microlight": _2,
          "modelling": _2,
          "navigation": _2,
          "parachuting": _2,
          "paragliding": _2,
          "passenger-association": _2,
          "pilot": _2,
          "press": _2,
          "production": _2,
          "recreation": _2,
          "repbody": _2,
          "res": _2,
          "research": _2,
          "rotorcraft": _2,
          "safety": _2,
          "scientist": _2,
          "services": _2,
          "show": _2,
          "skydiving": _2,
          "software": _2,
          "student": _2,
          "trader": _2,
          "trading": _2,
          "trainer": _2,
          "union": _2,
          "workinggroup": _2,
          "works": _2
        }
      },
      "af": _4,
      "ag": {
        "$": 1,
        "succ": {
          "com": _2,
          "org": _2,
          "net": _2,
          "co": _2,
          "nom": _2
        }
      },
      "ai": {
        "$": 1,
        "succ": {
          "off": _2,
          "com": _2,
          "net": _2,
          "org": _2,
          "uwu": _3
        }
      },
      "al": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "blogspot": _3
        }
      },
      "am": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "commune": _2,
          "net": _2,
          "org": _2,
          "radio": _3,
          "blogspot": _3,
          "neko": _3,
          "nyaa": _3
        }
      },
      "ao": {
        "$": 1,
        "succ": {
          "ed": _2,
          "gv": _2,
          "og": _2,
          "co": _2,
          "pb": _2,
          "it": _2
        }
      },
      "aq": _2,
      "ar": {
        "$": 1,
        "succ": {
          "bet": _2,
          "com": _6,
          "coop": _2,
          "edu": _2,
          "gob": _2,
          "gov": _2,
          "int": _2,
          "mil": _2,
          "musica": _2,
          "mutual": _2,
          "net": _2,
          "org": _2,
          "senasa": _2,
          "tur": _2
        }
      },
      "arpa": {
        "$": 1,
        "succ": {
          "e164": _2,
          "in-addr": _2,
          "ip6": _2,
          "iris": _2,
          "uri": _2,
          "urn": _2
        }
      },
      "as": _7,
      "asia": {
        "$": 1,
        "succ": {
          "cloudns": _3
        }
      },
      "at": {
        "$": 1,
        "succ": {
          "ac": {
            "$": 1,
            "succ": {
              "sth": _2
            }
          },
          "co": _6,
          "gv": _2,
          "or": _2,
          "funkfeuer": {
            "$": 0,
            "succ": {
              "wien": _3
            }
          },
          "futurecms": {
            "$": 0,
            "succ": {
              "*": _3,
              "ex": _5,
              "in": _5
            }
          },
          "futurehosting": _3,
          "futuremailing": _3,
          "ortsinfo": {
            "$": 0,
            "succ": {
              "ex": _5,
              "kunden": _5
            }
          },
          "biz": _3,
          "info": _3,
          "priv": _3,
          "myspreadshop": _3,
          "12hp": _3,
          "2ix": _3,
          "4lima": _3,
          "lima-city": _3
        }
      },
      "au": {
        "$": 1,
        "succ": {
          "com": {
            "$": 1,
            "succ": {
              "blogspot": _3,
              "cloudlets": {
                "$": 0,
                "succ": {
                  "mel": _3
                }
              },
              "myspreadshop": _3
            }
          },
          "net": _2,
          "org": _2,
          "edu": {
            "$": 1,
            "succ": {
              "act": _2,
              "catholic": _2,
              "nsw": {
                "$": 1,
                "succ": {
                  "schools": _2
                }
              },
              "nt": _2,
              "qld": _2,
              "sa": _2,
              "tas": _2,
              "vic": _2,
              "wa": _2
            }
          },
          "gov": {
            "$": 1,
            "succ": {
              "qld": _2,
              "sa": _2,
              "tas": _2,
              "vic": _2,
              "wa": _2
            }
          },
          "asn": _2,
          "id": _2,
          "info": _2,
          "conf": _2,
          "oz": _2,
          "act": _2,
          "nsw": _2,
          "nt": _2,
          "qld": _2,
          "sa": _2,
          "tas": _2,
          "vic": _2,
          "wa": _2
        }
      },
      "aw": {
        "$": 1,
        "succ": {
          "com": _2
        }
      },
      "ax": {
        "$": 1,
        "succ": {
          "be": _3,
          "cat": _3,
          "es": _3,
          "eu": _3,
          "gg": _3,
          "mc": _3,
          "us": _3,
          "xy": _3
        }
      },
      "az": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "int": _2,
          "gov": _2,
          "org": _2,
          "edu": _2,
          "info": _2,
          "pp": _2,
          "mil": _2,
          "name": _2,
          "pro": _2,
          "biz": _2
        }
      },
      "ba": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "rs": _3,
          "blogspot": _3
        }
      },
      "bb": {
        "$": 1,
        "succ": {
          "biz": _2,
          "co": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "info": _2,
          "net": _2,
          "org": _2,
          "store": _2,
          "tv": _2
        }
      },
      "bd": _8,
      "be": {
        "$": 1,
        "succ": {
          "ac": _2,
          "webhosting": _3,
          "blogspot": _3,
          "interhostsolutions": _9,
          "kuleuven": {
            "$": 0,
            "succ": {
              "ezproxy": _3
            }
          },
          "myspreadshop": _3,
          "transurl": _5
        }
      },
      "bf": _7,
      "bg": {
        "$": 1,
        "succ": {
          "0": _2,
          "1": _2,
          "2": _2,
          "3": _2,
          "4": _2,
          "5": _2,
          "6": _2,
          "7": _2,
          "8": _2,
          "9": _2,
          "a": _2,
          "b": _2,
          "c": _2,
          "d": _2,
          "e": _2,
          "f": _2,
          "g": _2,
          "h": _2,
          "i": _2,
          "j": _2,
          "k": _2,
          "l": _2,
          "m": _2,
          "n": _2,
          "o": _2,
          "p": _2,
          "q": _2,
          "r": _2,
          "s": _2,
          "t": _2,
          "u": _2,
          "v": _2,
          "w": _2,
          "x": _2,
          "y": _2,
          "z": _2,
          "blogspot": _3,
          "barsy": _3
        }
      },
      "bh": _4,
      "bi": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "edu": _2,
          "or": _2,
          "org": _2
        }
      },
      "biz": {
        "$": 1,
        "succ": {
          "cloudns": _3,
          "jozi": _3,
          "dyndns": _3,
          "for-better": _3,
          "for-more": _3,
          "for-some": _3,
          "for-the": _3,
          "selfip": _3,
          "webhop": _3,
          "orx": _3,
          "mmafan": _3,
          "myftp": _3,
          "no-ip": _3,
          "dscloud": _3
        }
      },
      "bj": {
        "$": 1,
        "succ": {
          "asso": _2,
          "barreau": _2,
          "gouv": _2,
          "blogspot": _3
        }
      },
      "bm": _4,
      "bn": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "co": _3
        }
      },
      "bo": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gob": _2,
          "int": _2,
          "org": _2,
          "net": _2,
          "mil": _2,
          "tv": _2,
          "web": _2,
          "academia": _2,
          "agro": _2,
          "arte": _2,
          "blog": _2,
          "bolivia": _2,
          "ciencia": _2,
          "cooperativa": _2,
          "democracia": _2,
          "deporte": _2,
          "ecologia": _2,
          "economia": _2,
          "empresa": _2,
          "indigena": _2,
          "industria": _2,
          "info": _2,
          "medicina": _2,
          "movimiento": _2,
          "musica": _2,
          "natural": _2,
          "nombre": _2,
          "noticias": _2,
          "patria": _2,
          "politica": _2,
          "profesional": _2,
          "plurinacional": _2,
          "pueblo": _2,
          "revista": _2,
          "salud": _2,
          "tecnologia": _2,
          "tksat": _2,
          "transporte": _2,
          "wiki": _2
        }
      },
      "br": {
        "$": 1,
        "succ": {
          "9guacu": _2,
          "abc": _2,
          "adm": _2,
          "adv": _2,
          "agr": _2,
          "aju": _2,
          "am": _2,
          "anani": _2,
          "aparecida": _2,
          "app": _2,
          "arq": _2,
          "art": _2,
          "ato": _2,
          "b": _2,
          "barueri": _2,
          "belem": _2,
          "bhz": _2,
          "bib": _2,
          "bio": _2,
          "blog": _2,
          "bmd": _2,
          "boavista": _2,
          "bsb": _2,
          "campinagrande": _2,
          "campinas": _2,
          "caxias": _2,
          "cim": _2,
          "cng": _2,
          "cnt": _2,
          "com": {
            "$": 1,
            "succ": {
              "blogspot": _3,
              "virtualcloud": {
                "$": 0,
                "succ": {
                  "scale": {
                    "$": 0,
                    "succ": {
                      "users": _3
                    }
                  }
                }
              }
            }
          },
          "contagem": _2,
          "coop": _2,
          "coz": _2,
          "cri": _2,
          "cuiaba": _2,
          "curitiba": _2,
          "def": _2,
          "des": _2,
          "det": _2,
          "dev": _2,
          "ecn": _2,
          "eco": _2,
          "edu": _2,
          "emp": _2,
          "enf": _2,
          "eng": _2,
          "esp": _2,
          "etc": _2,
          "eti": _2,
          "far": _2,
          "feira": _2,
          "flog": _2,
          "floripa": _2,
          "fm": _2,
          "fnd": _2,
          "fortal": _2,
          "fot": _2,
          "foz": _2,
          "fst": _2,
          "g12": _2,
          "geo": _2,
          "ggf": _2,
          "goiania": _2,
          "gov": {
            "$": 1,
            "succ": {
              "ac": _2,
              "al": _2,
              "am": _2,
              "ap": _2,
              "ba": _2,
              "ce": _2,
              "df": _2,
              "es": _2,
              "go": _2,
              "ma": _2,
              "mg": _2,
              "ms": _2,
              "mt": _2,
              "pa": _2,
              "pb": _2,
              "pe": _2,
              "pi": _2,
              "pr": _2,
              "rj": _2,
              "rn": _2,
              "ro": _2,
              "rr": _2,
              "rs": _2,
              "sc": _2,
              "se": _2,
              "sp": _2,
              "to": _2
            }
          },
          "gru": _2,
          "imb": _2,
          "ind": _2,
          "inf": _2,
          "jab": _2,
          "jampa": _2,
          "jdf": _2,
          "joinville": _2,
          "jor": _2,
          "jus": _2,
          "leg": {
            "$": 1,
            "succ": {
              "ac": _3,
              "al": _3,
              "am": _3,
              "ap": _3,
              "ba": _3,
              "ce": _3,
              "df": _3,
              "es": _3,
              "go": _3,
              "ma": _3,
              "mg": _3,
              "ms": _3,
              "mt": _3,
              "pa": _3,
              "pb": _3,
              "pe": _3,
              "pi": _3,
              "pr": _3,
              "rj": _3,
              "rn": _3,
              "ro": _3,
              "rr": _3,
              "rs": _3,
              "sc": _3,
              "se": _3,
              "sp": _3,
              "to": _3
            }
          },
          "lel": _2,
          "log": _2,
          "londrina": _2,
          "macapa": _2,
          "maceio": _2,
          "manaus": _2,
          "maringa": _2,
          "mat": _2,
          "med": _2,
          "mil": _2,
          "morena": _2,
          "mp": _2,
          "mus": _2,
          "natal": _2,
          "net": _2,
          "niteroi": _2,
          "nom": _8,
          "not": _2,
          "ntr": _2,
          "odo": _2,
          "ong": _2,
          "org": _2,
          "osasco": _2,
          "palmas": _2,
          "poa": _2,
          "ppg": _2,
          "pro": _2,
          "psc": _2,
          "psi": _2,
          "pvh": _2,
          "qsl": _2,
          "radio": _2,
          "rec": _2,
          "recife": _2,
          "rep": _2,
          "ribeirao": _2,
          "rio": _2,
          "riobranco": _2,
          "riopreto": _2,
          "salvador": _2,
          "sampa": _2,
          "santamaria": _2,
          "santoandre": _2,
          "saobernardo": _2,
          "saogonca": _2,
          "seg": _2,
          "sjc": _2,
          "slg": _2,
          "slz": _2,
          "sorocaba": _2,
          "srv": _2,
          "taxi": _2,
          "tc": _2,
          "tec": _2,
          "teo": _2,
          "the": _2,
          "tmp": _2,
          "trd": _2,
          "tur": _2,
          "tv": _2,
          "udi": _2,
          "vet": _2,
          "vix": _2,
          "vlog": _2,
          "wiki": _2,
          "zlg": _2
        }
      },
      "bs": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "gov": _2,
          "we": _3
        }
      },
      "bt": _4,
      "bv": _2,
      "bw": {
        "$": 1,
        "succ": {
          "co": _2,
          "org": _2
        }
      },
      "by": {
        "$": 1,
        "succ": {
          "gov": _2,
          "mil": _2,
          "com": _6,
          "of": _2,
          "mycloud": _3,
          "mediatech": _3
        }
      },
      "bz": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "gov": _2,
          "za": _3,
          "gsj": _3
        }
      },
      "ca": {
        "$": 1,
        "succ": {
          "ab": _2,
          "bc": _2,
          "mb": _2,
          "nb": _2,
          "nf": _2,
          "nl": _2,
          "ns": _2,
          "nt": _2,
          "nu": _2,
          "on": _2,
          "pe": _2,
          "qc": _2,
          "sk": _2,
          "yk": _2,
          "gc": _2,
          "barsy": _3,
          "awdev": _5,
          "co": _3,
          "blogspot": _3,
          "no-ip": _3,
          "myspreadshop": _3
        }
      },
      "cat": _2,
      "cc": {
        "$": 1,
        "succ": {
          "cloudns": _3,
          "ftpaccess": _3,
          "game-server": _3,
          "myphotos": _3,
          "scrapping": _3,
          "twmail": _3,
          "csx": _3,
          "fantasyleague": _3,
          "spawn": {
            "$": 0,
            "succ": {
              "instances": _3
            }
          }
        }
      },
      "cd": _7,
      "cf": _6,
      "cg": _2,
      "ch": {
        "$": 1,
        "succ": {
          "square7": _3,
          "blogspot": _3,
          "flow": {
            "$": 0,
            "succ": {
              "ae": {
                "$": 0,
                "succ": {
                  "alp1": _3
                }
              },
              "appengine": _3
            }
          },
          "linkyard-cloud": _3,
          "dnsking": _3,
          "gotdns": _3,
          "myspreadshop": _3,
          "firenet": {
            "$": 0,
            "succ": {
              "*": _3,
              "svc": _5
            }
          },
          "12hp": _3,
          "2ix": _3,
          "4lima": _3,
          "lima-city": _3
        }
      },
      "ci": {
        "$": 1,
        "succ": {
          "org": _2,
          "or": _2,
          "com": _2,
          "co": _2,
          "edu": _2,
          "ed": _2,
          "ac": _2,
          "net": _2,
          "go": _2,
          "asso": _2,
          "xn--aroport-bya": _2,
          "aéroport": _2,
          "int": _2,
          "presse": _2,
          "md": _2,
          "gouv": _2,
          "fin": _3,
          "nl": _3
        }
      },
      "ck": _8,
      "cl": {
        "$": 1,
        "succ": {
          "co": _2,
          "gob": _2,
          "gov": _2,
          "mil": _2,
          "blogspot": _3
        }
      },
      "cm": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "gov": _2,
          "net": _2
        }
      },
      "cn": {
        "$": 1,
        "succ": {
          "ac": _2,
          "com": {
            "$": 1,
            "succ": {
              "amazonaws": {
                "$": 0,
                "succ": {
                  "compute": _5,
                  "eb": {
                    "$": 0,
                    "succ": {
                      "cn-north-1": _3,
                      "cn-northwest-1": _3
                    }
                  },
                  "elb": _5,
                  "cn-north-1": _11
                }
              }
            }
          },
          "edu": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "mil": _2,
          "xn--55qx5d": _2,
          "公司": _2,
          "xn--io0a7i": _2,
          "网络": _2,
          "xn--od0alg": _2,
          "網絡": _2,
          "ah": _2,
          "bj": _2,
          "cq": _2,
          "fj": _2,
          "gd": _2,
          "gs": _2,
          "gz": _2,
          "gx": _2,
          "ha": _2,
          "hb": _2,
          "he": _2,
          "hi": _2,
          "hl": _2,
          "hn": _2,
          "jl": _2,
          "js": _2,
          "jx": _2,
          "ln": _2,
          "nm": _2,
          "nx": _2,
          "qh": _2,
          "sc": _2,
          "sd": _2,
          "sh": _2,
          "sn": _2,
          "sx": _2,
          "tj": _2,
          "xj": _2,
          "xz": _2,
          "yn": _2,
          "zj": _2,
          "hk": _2,
          "mo": _2,
          "tw": _2,
          "instantcloud": _3
        }
      },
      "co": {
        "$": 1,
        "succ": {
          "arts": _2,
          "com": _6,
          "edu": _2,
          "firm": _2,
          "gov": _2,
          "info": _2,
          "int": _2,
          "mil": _2,
          "net": _2,
          "nom": _2,
          "org": _2,
          "rec": _2,
          "web": _2,
          "carrd": _3,
          "crd": _3,
          "otap": _5,
          "leadpages": _3,
          "lpages": _3,
          "mypi": _3,
          "n4t": _3,
          "nodum": _3,
          "repl": {
            "$": 2,
            "succ": {
              "id": _3
            }
          },
          "supabase": _3
        }
      },
      "com": {
        "$": 1,
        "succ": {
          "devcdnaccesso": _5,
          "adobeaemcloud": {
            "$": 2,
            "succ": {
              "dev": _5
            }
          },
          "kasserver": _3,
          "amazonaws": {
            "$": 0,
            "succ": {
              "compute": _5,
              "compute-1": _5,
              "us-east-1": {
                "$": 2,
                "succ": {
                  "dualstack": _11
                }
              },
              "elb": _5,
              "s3": _3,
              "s3-ap-northeast-1": _3,
              "s3-ap-northeast-2": _3,
              "s3-ap-south-1": _3,
              "s3-ap-southeast-1": _3,
              "s3-ap-southeast-2": _3,
              "s3-ca-central-1": _3,
              "s3-eu-central-1": _3,
              "s3-eu-west-1": _3,
              "s3-eu-west-2": _3,
              "s3-eu-west-3": _3,
              "s3-external-1": _3,
              "s3-fips-us-gov-west-1": _3,
              "s3-sa-east-1": _3,
              "s3-us-gov-west-1": _3,
              "s3-us-east-2": _3,
              "s3-us-west-1": _3,
              "s3-us-west-2": _3,
              "ap-northeast-2": _13,
              "ap-south-1": _13,
              "ca-central-1": _13,
              "eu-central-1": _13,
              "eu-west-2": _13,
              "eu-west-3": _13,
              "us-east-2": _13,
              "ap-northeast-1": _12,
              "ap-southeast-1": _12,
              "ap-southeast-2": _12,
              "eu-west-1": _12,
              "sa-east-1": _12,
              "s3-website-us-east-1": _3,
              "s3-website-us-west-1": _3,
              "s3-website-us-west-2": _3,
              "s3-website-ap-northeast-1": _3,
              "s3-website-ap-southeast-1": _3,
              "s3-website-ap-southeast-2": _3,
              "s3-website-eu-west-1": _3,
              "s3-website-sa-east-1": _3
            }
          },
          "elasticbeanstalk": {
            "$": 2,
            "succ": {
              "ap-northeast-1": _3,
              "ap-northeast-2": _3,
              "ap-northeast-3": _3,
              "ap-south-1": _3,
              "ap-southeast-1": _3,
              "ap-southeast-2": _3,
              "ca-central-1": _3,
              "eu-central-1": _3,
              "eu-west-1": _3,
              "eu-west-2": _3,
              "eu-west-3": _3,
              "sa-east-1": _3,
              "us-east-1": _3,
              "us-east-2": _3,
              "us-gov-west-1": _3,
              "us-west-1": _3,
              "us-west-2": _3
            }
          },
          "awsglobalaccelerator": _3,
          "siiites": _3,
          "appspacehosted": _3,
          "appspaceusercontent": _3,
          "on-aptible": _3,
          "myasustor": _3,
          "balena-devices": _3,
          "betainabox": _3,
          "boutir": _3,
          "bplaced": _3,
          "cafjs": _3,
          "br": _3,
          "cn": _3,
          "de": _3,
          "eu": _3,
          "jpn": _3,
          "mex": _3,
          "ru": _3,
          "sa": _3,
          "uk": _3,
          "us": _3,
          "za": _3,
          "ar": _3,
          "gb": _3,
          "hu": _3,
          "kr": _3,
          "no": _3,
          "qc": _3,
          "uy": _3,
          "africa": _3,
          "gr": _3,
          "co": _3,
          "jdevcloud": _3,
          "wpdevcloud": _3,
          "cloudcontrolled": _3,
          "cloudcontrolapp": _3,
          "trycloudflare": _3,
          "customer-oci": {
            "$": 0,
            "succ": {
              "*": _3,
              "oci": _5,
              "ocp": _5,
              "ocs": _5
            }
          },
          "dattolocal": _3,
          "dattorelay": _3,
          "dattoweb": _3,
          "mydatto": _3,
          "builtwithdark": _3,
          "datadetect": {
            "$": 0,
            "succ": {
              "demo": _3,
              "instance": _3
            }
          },
          "ddns5": _3,
          "drayddns": _3,
          "dreamhosters": _3,
          "mydrobo": _3,
          "dyndns-at-home": _3,
          "dyndns-at-work": _3,
          "dyndns-blog": _3,
          "dyndns-free": _3,
          "dyndns-home": _3,
          "dyndns-ip": _3,
          "dyndns-mail": _3,
          "dyndns-office": _3,
          "dyndns-pics": _3,
          "dyndns-remote": _3,
          "dyndns-server": _3,
          "dyndns-web": _3,
          "dyndns-wiki": _3,
          "dyndns-work": _3,
          "blogdns": _3,
          "cechire": _3,
          "dnsalias": _3,
          "dnsdojo": _3,
          "doesntexist": _3,
          "dontexist": _3,
          "doomdns": _3,
          "dyn-o-saur": _3,
          "dynalias": _3,
          "est-a-la-maison": _3,
          "est-a-la-masion": _3,
          "est-le-patron": _3,
          "est-mon-blogueur": _3,
          "from-ak": _3,
          "from-al": _3,
          "from-ar": _3,
          "from-ca": _3,
          "from-ct": _3,
          "from-dc": _3,
          "from-de": _3,
          "from-fl": _3,
          "from-ga": _3,
          "from-hi": _3,
          "from-ia": _3,
          "from-id": _3,
          "from-il": _3,
          "from-in": _3,
          "from-ks": _3,
          "from-ky": _3,
          "from-ma": _3,
          "from-md": _3,
          "from-mi": _3,
          "from-mn": _3,
          "from-mo": _3,
          "from-ms": _3,
          "from-mt": _3,
          "from-nc": _3,
          "from-nd": _3,
          "from-ne": _3,
          "from-nh": _3,
          "from-nj": _3,
          "from-nm": _3,
          "from-nv": _3,
          "from-oh": _3,
          "from-ok": _3,
          "from-or": _3,
          "from-pa": _3,
          "from-pr": _3,
          "from-ri": _3,
          "from-sc": _3,
          "from-sd": _3,
          "from-tn": _3,
          "from-tx": _3,
          "from-ut": _3,
          "from-va": _3,
          "from-vt": _3,
          "from-wa": _3,
          "from-wi": _3,
          "from-wv": _3,
          "from-wy": _3,
          "getmyip": _3,
          "gotdns": _3,
          "hobby-site": _3,
          "homelinux": _3,
          "homeunix": _3,
          "iamallama": _3,
          "is-a-anarchist": _3,
          "is-a-blogger": _3,
          "is-a-bookkeeper": _3,
          "is-a-bulls-fan": _3,
          "is-a-caterer": _3,
          "is-a-chef": _3,
          "is-a-conservative": _3,
          "is-a-cpa": _3,
          "is-a-cubicle-slave": _3,
          "is-a-democrat": _3,
          "is-a-designer": _3,
          "is-a-doctor": _3,
          "is-a-financialadvisor": _3,
          "is-a-geek": _3,
          "is-a-green": _3,
          "is-a-guru": _3,
          "is-a-hard-worker": _3,
          "is-a-hunter": _3,
          "is-a-landscaper": _3,
          "is-a-lawyer": _3,
          "is-a-liberal": _3,
          "is-a-libertarian": _3,
          "is-a-llama": _3,
          "is-a-musician": _3,
          "is-a-nascarfan": _3,
          "is-a-nurse": _3,
          "is-a-painter": _3,
          "is-a-personaltrainer": _3,
          "is-a-photographer": _3,
          "is-a-player": _3,
          "is-a-republican": _3,
          "is-a-rockstar": _3,
          "is-a-socialist": _3,
          "is-a-student": _3,
          "is-a-teacher": _3,
          "is-a-techie": _3,
          "is-a-therapist": _3,
          "is-an-accountant": _3,
          "is-an-actor": _3,
          "is-an-actress": _3,
          "is-an-anarchist": _3,
          "is-an-artist": _3,
          "is-an-engineer": _3,
          "is-an-entertainer": _3,
          "is-certified": _3,
          "is-gone": _3,
          "is-into-anime": _3,
          "is-into-cars": _3,
          "is-into-cartoons": _3,
          "is-into-games": _3,
          "is-leet": _3,
          "is-not-certified": _3,
          "is-slick": _3,
          "is-uberleet": _3,
          "is-with-theband": _3,
          "isa-geek": _3,
          "isa-hockeynut": _3,
          "issmarterthanyou": _3,
          "likes-pie": _3,
          "likescandy": _3,
          "neat-url": _3,
          "saves-the-whales": _3,
          "selfip": _3,
          "sells-for-less": _3,
          "sells-for-u": _3,
          "servebbs": _3,
          "simple-url": _3,
          "space-to-rent": _3,
          "teaches-yoga": _3,
          "writesthisblog": _3,
          "digitaloceanspaces": _5,
          "ddnsfree": _3,
          "ddnsgeek": _3,
          "giize": _3,
          "gleeze": _3,
          "kozow": _3,
          "loseyourip": _3,
          "ooguy": _3,
          "theworkpc": _3,
          "mytuleap": _3,
          "tuleap-partners": _3,
          "evennode": {
            "$": 0,
            "succ": {
              "eu-1": _3,
              "eu-2": _3,
              "eu-3": _3,
              "eu-4": _3,
              "us-1": _3,
              "us-2": _3,
              "us-3": _3,
              "us-4": _3
            }
          },
          "onfabrica": _3,
          "fbsbx": _14,
          "fastly-terrarium": _3,
          "fastvps-server": _3,
          "mydobiss": _3,
          "firebaseapp": _3,
          "forgeblocks": _3,
          "framercanvas": _3,
          "freebox-os": _3,
          "freeboxos": _3,
          "freemyip": _3,
          "gentapps": _3,
          "gentlentapis": _3,
          "githubusercontent": _3,
          "0emm": _5,
          "appspot": {
            "$": 2,
            "succ": {
              "r": _5
            }
          },
          "codespot": _3,
          "googleapis": _3,
          "googlecode": _3,
          "pagespeedmobilizer": _3,
          "publishproxy": _3,
          "withgoogle": _3,
          "withyoutube": _3,
          "blogspot": _3,
          "awsmppl": _3,
          "herokuapp": _3,
          "herokussl": _3,
          "myravendb": _3,
          "impertrixcdn": _3,
          "impertrix": _3,
          "smushcdn": _3,
          "wphostedmail": _3,
          "wpmucdn": _3,
          "pixolino": _3,
          "amscompute": _3,
          "clicketcloud": _3,
          "dopaas": _3,
          "hidora": _3,
          "hosted-by-previder": _15,
          "hosteur": {
            "$": 0,
            "succ": {
              "rag-cloud": _3,
              "rag-cloud-ch": _3
            }
          },
          "ik-server": {
            "$": 0,
            "succ": {
              "jcloud": _3,
              "jcloud-ver-jpc": _3
            }
          },
          "jelastic": {
            "$": 0,
            "succ": {
              "demo": _3
            }
          },
          "kilatiron": _3,
          "massivegrid": _15,
          "wafaicloud": {
            "$": 0,
            "succ": {
              "jed": _3,
              "lon": _3,
              "ryd": _3
            }
          },
          "joyent": {
            "$": 0,
            "succ": {
              "cns": _5
            }
          },
          "lpusercontent": _3,
          "lmpm": _16,
          "linode": {
            "$": 0,
            "succ": {
              "members": _3,
              "nodebalancer": _5
            }
          },
          "linodeobjects": _5,
          "linodeusercontent": {
            "$": 0,
            "succ": {
              "ip": _3
            }
          },
          "barsycenter": _3,
          "barsyonline": _3,
          "mazeplay": _3,
          "miniserver": _3,
          "meteorapp": _17,
          "hostedpi": _3,
          "mythic-beasts": {
            "$": 0,
            "succ": {
              "customer": _3,
              "caracal": _3,
              "fentiger": _3,
              "lynx": _3,
              "ocelot": _3,
              "oncilla": _3,
              "onza": _3,
              "sphinx": _3,
              "vs": _3,
              "x": _3,
              "yali": _3
            }
          },
          "4u": _3,
          "nfshost": _3,
          "001www": _3,
          "ddnslive": _3,
          "myiphost": _3,
          "blogsyte": _3,
          "ciscofreak": _3,
          "damnserver": _3,
          "ditchyourip": _3,
          "dnsiskinky": _3,
          "dynns": _3,
          "geekgalaxy": _3,
          "health-carereform": _3,
          "homesecuritymac": _3,
          "homesecuritypc": _3,
          "myactivedirectory": _3,
          "mysecuritycamera": _3,
          "net-freaks": _3,
          "onthewifi": _3,
          "point2this": _3,
          "quicksytes": _3,
          "securitytactics": _3,
          "serveexchange": _3,
          "servehumour": _3,
          "servep2p": _3,
          "servesarcasm": _3,
          "stufftoread": _3,
          "unusualperson": _3,
          "workisboring": _3,
          "3utilities": _3,
          "ddnsking": _3,
          "myvnc": _3,
          "servebeer": _3,
          "servecounterstrike": _3,
          "serveftp": _3,
          "servegame": _3,
          "servehalflife": _3,
          "servehttp": _3,
          "serveirc": _3,
          "servemp3": _3,
          "servepics": _3,
          "servequake": _3,
          "observableusercontent": {
            "$": 0,
            "succ": {
              "static": _3
            }
          },
          "orsites": _3,
          "operaunite": _3,
          "authgear-staging": _3,
          "authgearapps": _3,
          "skygearapp": _3,
          "outsystemscloud": _3,
          "ownprovider": _3,
          "pgfog": _3,
          "pagefrontapp": _3,
          "pagexl": _3,
          "paywhirl": _5,
          "gotpantheon": _3,
          "platter-app": _3,
          "pleskns": _3,
          "postman-echo": _3,
          "prgmr": {
            "$": 0,
            "succ": {
              "xen": _3
            }
          },
          "pythonanywhere": _17,
          "qualifioapp": _3,
          "qbuser": _3,
          "qa2": _3,
          "dev-myqnapcloud": _3,
          "alpha-myqnapcloud": _3,
          "myqnapcloud": _3,
          "quipelements": _5,
          "rackmaze": _3,
          "rhcloud": _3,
          "render": _16,
          "onrender": _3,
          "logoip": _3,
          "scrysec": _3,
          "firewall-gateway": _3,
          "myshopblocks": _3,
          "myshopify": _3,
          "shopitsite": _3,
          "1kapp": _3,
          "appchizi": _3,
          "applinzi": _3,
          "sinaapp": _3,
          "vipsinaapp": _3,
          "bounty-full": {
            "$": 2,
            "succ": {
              "alpha": _3,
              "beta": _3
            }
          },
          "try-snowplow": _3,
          "stackhero-network": _3,
          "playstation-cloud": _3,
          "myspreadshop": _3,
          "stdlib": {
            "$": 0,
            "succ": {
              "api": _3
            }
          },
          "temp-dns": _3,
          "dsmynas": _3,
          "familyds": _3,
          "reservd": _3,
          "thingdustdata": _3,
          "bloxcms": _3,
          "townnews-staging": _3,
          "hk": _3,
          "wafflecell": _3,
          "idnblogger": _3,
          "indowapblog": _3,
          "reserve-online": _3,
          "hotelwithflight": _3,
          "remotewd": _3,
          "wiardweb": _18,
          "woltlab-demo": _3,
          "wpenginepowered": {
            "$": 2,
            "succ": {
              "js": _3
            }
          },
          "wixsite": _3,
          "xnbay": {
            "$": 2,
            "succ": {
              "u2": _3,
              "u2-local": _3
            }
          },
          "yolasite": _3
        }
      },
      "coop": _2,
      "cr": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "ed": _2,
          "fi": _2,
          "go": _2,
          "or": _2,
          "sa": _2
        }
      },
      "cu": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "org": _2,
          "net": _2,
          "gov": _2,
          "inf": _2
        }
      },
      "cv": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "int": _2,
          "nome": _2,
          "org": _2,
          "blogspot": _3
        }
      },
      "cw": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "net": _2,
          "org": _2
        }
      },
      "cx": {
        "$": 1,
        "succ": {
          "gov": _2,
          "ath": _3,
          "info": _3
        }
      },
      "cy": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "com": {
            "$": 1,
            "succ": {
              "blogspot": _3,
              "scaleforce": _19
            }
          },
          "ekloges": _2,
          "gov": _2,
          "ltd": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "parliament": _2,
          "press": _2,
          "pro": _2,
          "tm": _2
        }
      },
      "cz": {
        "$": 1,
        "succ": {
          "co": _3,
          "realm": _3,
          "e4": _3,
          "blogspot": _3,
          "metacentrum": {
            "$": 0,
            "succ": {
              "cloud": _5,
              "custom": _3
            }
          },
          "muni": {
            "$": 0,
            "succ": {
              "cloud": {
                "$": 0,
                "succ": {
                  "flt": _3,
                  "usr": _3
                }
              }
            }
          }
        }
      },
      "de": {
        "$": 1,
        "succ": {
          "bplaced": _3,
          "square7": _3,
          "com": _3,
          "cosidns": {
            "$": 0,
            "succ": {
              "dyn": _3
            }
          },
          "dynamisches-dns": _3,
          "dnsupdater": _3,
          "internet-dns": _3,
          "l-o-g-i-n": _3,
          "dnshome": _3,
          "fuettertdasnetz": _3,
          "isteingeek": _3,
          "istmein": _3,
          "lebtimnetz": _3,
          "leitungsen": _3,
          "traeumtgerade": _3,
          "ddnss": {
            "$": 2,
            "succ": {
              "dyn": _3,
              "dyndns": _3
            }
          },
          "dyndns1": _3,
          "dyn-ip24": _3,
          "home-webserver": {
            "$": 2,
            "succ": {
              "dyn": _3
            }
          },
          "myhome-server": _3,
          "frusky": _5,
          "goip": _3,
          "blogspot": _3,
          "xn--gnstigbestellen-zvb": _3,
          "günstigbestellen": _3,
          "xn--gnstigliefern-wob": _3,
          "günstigliefern": _3,
          "hs-heilbronn": {
            "$": 0,
            "succ": {
              "it": _18
            }
          },
          "dyn-berlin": _3,
          "in-berlin": _3,
          "in-brb": _3,
          "in-butter": _3,
          "in-dsl": _3,
          "in-vpn": _3,
          "mein-iserv": _3,
          "schulserver": _3,
          "test-iserv": _3,
          "keymachine": _3,
          "git-repos": _3,
          "lcube-server": _3,
          "svn-repos": _3,
          "barsy": _3,
          "logoip": _3,
          "firewall-gateway": _3,
          "my-gateway": _3,
          "my-router": _3,
          "spdns": _3,
          "speedpartner": {
            "$": 0,
            "succ": {
              "customer": _3
            }
          },
          "myspreadshop": _3,
          "taifun-dns": _3,
          "12hp": _3,
          "2ix": _3,
          "4lima": _3,
          "lima-city": _3,
          "dd-dns": _3,
          "dray-dns": _3,
          "draydns": _3,
          "dyn-vpn": _3,
          "dynvpn": _3,
          "mein-vigor": _3,
          "my-vigor": _3,
          "my-wan": _3,
          "syno-ds": _3,
          "synology-diskstation": _3,
          "synology-ds": _3,
          "uberspace": _5,
          "virtualuser": _3,
          "virtual-user": _3,
          "community-pro": _3,
          "diskussionsbereich": _3
        }
      },
      "dj": _2,
      "dk": {
        "$": 1,
        "succ": {
          "biz": _3,
          "co": _3,
          "firm": _3,
          "reg": _3,
          "store": _3,
          "blogspot": _3,
          "myspreadshop": _3
        }
      },
      "dm": _4,
      "do": {
        "$": 1,
        "succ": {
          "art": _2,
          "com": _2,
          "edu": _2,
          "gob": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "sld": _2,
          "web": _2
        }
      },
      "dz": {
        "$": 1,
        "succ": {
          "art": _2,
          "asso": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "net": _2,
          "pol": _2,
          "soc": _2,
          "tm": _2
        }
      },
      "ec": {
        "$": 1,
        "succ": {
          "com": _2,
          "info": _2,
          "net": _2,
          "fin": _2,
          "k12": _2,
          "med": _2,
          "pro": _2,
          "org": _2,
          "edu": _2,
          "gov": _2,
          "gob": _2,
          "mil": _2
        }
      },
      "edu": {
        "$": 1,
        "succ": {
          "rit": {
            "$": 0,
            "succ": {
              "git-pages": _3
            }
          }
        }
      },
      "ee": {
        "$": 1,
        "succ": {
          "edu": _2,
          "gov": _2,
          "riik": _2,
          "lib": _2,
          "med": _2,
          "com": _6,
          "pri": _2,
          "aip": _2,
          "org": _2,
          "fie": _2
        }
      },
      "eg": {
        "$": 1,
        "succ": {
          "com": _6,
          "edu": _2,
          "eun": _2,
          "gov": _2,
          "mil": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "sci": _2
        }
      },
      "er": _8,
      "es": {
        "$": 1,
        "succ": {
          "com": _6,
          "nom": _2,
          "org": _2,
          "gob": _2,
          "edu": _2,
          "myspreadshop": _3
        }
      },
      "et": {
        "$": 1,
        "succ": {
          "com": _2,
          "gov": _2,
          "org": _2,
          "edu": _2,
          "biz": _2,
          "name": _2,
          "info": _2,
          "net": _2
        }
      },
      "eu": {
        "$": 1,
        "succ": {
          "mycd": _3,
          "cloudns": _3,
          "dogado": _20,
          "barsy": _3,
          "wellbeingzone": _3,
          "spdns": _3,
          "transurl": _5,
          "diskstation": _3
        }
      },
      "fi": {
        "$": 1,
        "succ": {
          "aland": _2,
          "dy": _3,
          "blogspot": _3,
          "xn--hkkinen-5wa": _3,
          "häkkinen": _3,
          "iki": _3,
          "cloudplatform": {
            "$": 0,
            "succ": {
              "fi": _3
            }
          },
          "datacenter": {
            "$": 0,
            "succ": {
              "demo": _3,
              "paas": _3
            }
          },
          "myspreadshop": _3
        }
      },
      "fj": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "com": _2,
          "gov": _2,
          "info": _2,
          "mil": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "pro": _2
        }
      },
      "fk": _8,
      "fm": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "net": _2,
          "org": _2,
          "radio": _3
        }
      },
      "fo": _2,
      "fr": {
        "$": 1,
        "succ": {
          "asso": _2,
          "com": _2,
          "gouv": _2,
          "nom": _2,
          "prd": _2,
          "tm": _2,
          "aeroport": _2,
          "avocat": _2,
          "avoues": _2,
          "cci": _2,
          "chambagri": _2,
          "chirurgiens-dentistes": _2,
          "experts-comptables": _2,
          "geometre-expert": _2,
          "greta": _2,
          "huissier-justice": _2,
          "medecin": _2,
          "notaires": _2,
          "pharmacien": _2,
          "port": _2,
          "veterinaire": _2,
          "en-root": _3,
          "fbx-os": _3,
          "fbxos": _3,
          "freebox-os": _3,
          "freeboxos": _3,
          "blogspot": _3,
          "goupile": _3,
          "on-web": _3,
          "chirurgiens-dentistes-en-france": _3,
          "myspreadshop": _3,
          "ynh": _3
        }
      },
      "ga": _2,
      "gb": _2,
      "gd": {
        "$": 1,
        "succ": {
          "edu": _2,
          "gov": _2
        }
      },
      "ge": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "mil": _2,
          "net": _2,
          "pvt": _2
        }
      },
      "gf": _2,
      "gg": {
        "$": 1,
        "succ": {
          "co": _2,
          "net": _2,
          "org": _2,
          "kaas": _3,
          "cya": _3,
          "panel": {
            "$": 2,
            "succ": {
              "daemon": _3
            }
          }
        }
      },
      "gh": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "mil": _2
        }
      },
      "gi": {
        "$": 1,
        "succ": {
          "com": _2,
          "ltd": _2,
          "gov": _2,
          "mod": _2,
          "edu": _2,
          "org": _2
        }
      },
      "gl": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "edu": _2,
          "net": _2,
          "org": _2,
          "biz": _3,
          "xx": _3
        }
      },
      "gm": _2,
      "gn": {
        "$": 1,
        "succ": {
          "ac": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "net": _2
        }
      },
      "gov": _2,
      "gp": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "mobi": _2,
          "edu": _2,
          "org": _2,
          "asso": _2,
          "app": _3
        }
      },
      "gq": _2,
      "gr": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "blogspot": _3
        }
      },
      "gs": _2,
      "gt": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gob": _2,
          "ind": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "blog": _3,
          "de": _3,
          "to": _3
        }
      },
      "gu": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "guam": _2,
          "info": _2,
          "net": _2,
          "org": _2,
          "web": _2
        }
      },
      "gw": _2,
      "gy": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "be": _3
        }
      },
      "hk": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "idv": _2,
          "net": _2,
          "org": _2,
          "xn--55qx5d": _2,
          "公司": _2,
          "xn--wcvs22d": _2,
          "教育": _2,
          "xn--lcvr32d": _2,
          "敎育": _2,
          "xn--mxtq1m": _2,
          "政府": _2,
          "xn--gmqw5a": _2,
          "個人": _2,
          "xn--ciqpn": _2,
          "个人": _2,
          "xn--gmq050i": _2,
          "箇人": _2,
          "xn--zf0avx": _2,
          "網络": _2,
          "xn--io0a7i": _2,
          "网络": _2,
          "xn--mk0axi": _2,
          "组織": _2,
          "xn--od0alg": _2,
          "網絡": _2,
          "xn--od0aq3b": _2,
          "网絡": _2,
          "xn--tn0ag": _2,
          "组织": _2,
          "xn--uc0atv": _2,
          "組織": _2,
          "xn--uc0ay4a": _2,
          "組织": _2,
          "blogspot": _3,
          "secaas": _3,
          "ltd": _3,
          "inc": _3
        }
      },
      "hm": _2,
      "hn": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "org": _2,
          "net": _2,
          "mil": _2,
          "gob": _2,
          "cc": _3
        }
      },
      "hr": {
        "$": 1,
        "succ": {
          "iz": _2,
          "from": _2,
          "name": _2,
          "com": _2,
          "blogspot": _3,
          "free": _3
        }
      },
      "ht": {
        "$": 1,
        "succ": {
          "com": _2,
          "shop": _2,
          "firm": _2,
          "info": _2,
          "adult": _2,
          "net": _2,
          "pro": _2,
          "org": _2,
          "med": _2,
          "art": _2,
          "coop": _2,
          "pol": _2,
          "asso": _2,
          "edu": _2,
          "rel": _2,
          "gouv": _2,
          "perso": _2
        }
      },
      "hu": {
        "$": 1,
        "succ": {
          "2000": _2,
          "co": _2,
          "info": _2,
          "org": _2,
          "priv": _2,
          "sport": _2,
          "tm": _2,
          "agrar": _2,
          "bolt": _2,
          "casino": _2,
          "city": _2,
          "erotica": _2,
          "erotika": _2,
          "film": _2,
          "forum": _2,
          "games": _2,
          "hotel": _2,
          "ingatlan": _2,
          "jogasz": _2,
          "konyvelo": _2,
          "lakas": _2,
          "media": _2,
          "news": _2,
          "reklam": _2,
          "sex": _2,
          "shop": _2,
          "suli": _2,
          "szex": _2,
          "tozsde": _2,
          "utazas": _2,
          "video": _2,
          "blogspot": _3
        }
      },
      "id": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _6,
          "desa": _2,
          "go": _2,
          "mil": _2,
          "my": {
            "$": 1,
            "succ": {
              "rss": _5
            }
          },
          "net": _2,
          "or": _2,
          "ponpes": _2,
          "sch": _2,
          "web": _2,
          "flap": _3,
          "forte": _3,
          "bloger": _3,
          "wblog": _3
        }
      },
      "ie": {
        "$": 1,
        "succ": {
          "gov": _2,
          "blogspot": _3,
          "myspreadshop": _3
        }
      },
      "il": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": {
            "$": 1,
            "succ": {
              "ravpage": _3,
              "blogspot": _3,
              "tabitorder": _3
            }
          },
          "gov": _2,
          "idf": _2,
          "k12": _2,
          "muni": _2,
          "net": _2,
          "org": _2
        }
      },
      "im": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": {
            "$": 1,
            "succ": {
              "ltd": _2,
              "plc": _2
            }
          },
          "com": _2,
          "net": _2,
          "org": _2,
          "tt": _2,
          "tv": _2,
          "ro": _3
        }
      },
      "in": {
        "$": 1,
        "succ": {
          "co": _2,
          "firm": _2,
          "net": _2,
          "org": _2,
          "gen": _2,
          "ind": _2,
          "nic": _2,
          "ac": _2,
          "edu": _2,
          "res": _2,
          "gov": _2,
          "mil": _2,
          "web": _3,
          "cloudns": _3,
          "blogspot": _3,
          "barsy": _3,
          "supabase": _3
        }
      },
      "info": {
        "$": 1,
        "succ": {
          "cloudns": _3,
          "dynamic-dns": _3,
          "dyndns": _3,
          "barrel-of-knowledge": _3,
          "barrell-of-knowledge": _3,
          "for-our": _3,
          "groks-the": _3,
          "groks-this": _3,
          "here-for-more": _3,
          "knowsitall": _3,
          "selfip": _3,
          "webhop": _3,
          "barsy": _3,
          "mayfirst": _3,
          "forumz": _3,
          "nsupdate": _3,
          "dvrcam": _3,
          "ilovecollege": _3,
          "no-ip": _3,
          "dnsupdate": _3,
          "v-info": _3
        }
      },
      "int": {
        "$": 1,
        "succ": {
          "eu": _2
        }
      },
      "io": {
        "$": 1,
        "succ": {
          "2038": _3,
          "com": _2,
          "apigee": _3,
          "b-data": _3,
          "backplaneapp": _3,
          "banzaicloud": {
            "$": 0,
            "succ": {
              "app": _3,
              "backyards": _5
            }
          },
          "bitbucket": _3,
          "bluebite": _3,
          "boxfuse": _3,
          "browsersafetymark": _3,
          "bigv": {
            "$": 0,
            "succ": {
              "uk0": _3
            }
          },
          "cleverapps": _3,
          "dappnode": {
            "$": 0,
            "succ": {
              "dyndns": _3
            }
          },
          "dedyn": _3,
          "drud": _3,
          "definima": _3,
          "fh-muenster": _3,
          "shw": _3,
          "forgerock": {
            "$": 0,
            "succ": {
              "id": _3
            }
          },
          "ghost": _3,
          "github": _3,
          "gitlab": _3,
          "lolipop": _3,
          "hasura-app": _3,
          "hostyhosting": _3,
          "moonscale": _5,
          "beebyte": _15,
          "beebyteapp": {
            "$": 0,
            "succ": {
              "sekd1": _3
            }
          },
          "jele": _3,
          "unispace": {
            "$": 0,
            "succ": {
              "cloud-fr1": _3
            }
          },
          "webthings": _3,
          "loginline": _3,
          "barsy": _3,
          "azurecontainer": _5,
          "ngrok": _3,
          "nodeart": {
            "$": 0,
            "succ": {
              "stage": _3
            }
          },
          "nodum": _3,
          "nid": _3,
          "pantheonsite": _3,
          "dyn53": _3,
          "pstmn": {
            "$": 2,
            "succ": {
              "mock": _3
            }
          },
          "protonet": _3,
          "qoto": _3,
          "qcx": {
            "$": 2,
            "succ": {
              "sys": _5
            }
          },
          "vaporcloud": _3,
          "vbrplsbx": {
            "$": 0,
            "succ": {
              "g": _3
            }
          },
          "on-k3s": _5,
          "on-rio": _5,
          "readthedocs": _3,
          "resindevice": _3,
          "resinstaging": {
            "$": 0,
            "succ": {
              "devices": _3
            }
          },
          "hzc": _3,
          "sandcats": _3,
          "shiftcrypto": _3,
          "shiftedit": _3,
          "mo-siemens": _3,
          "lair": _14,
          "stolos": _5,
          "spacekit": _3,
          "utwente": _3,
          "s5y": _5,
          "telebit": _3,
          "thingdust": {
            "$": 0,
            "succ": {
              "dev": _23,
              "disrec": _23,
              "prod": _24,
              "testing": _23
            }
          },
          "tickets": _3,
          "upli": _3,
          "wedeploy": _3,
          "editorx": _3,
          "basicserver": _3,
          "virtualserver": _3
        }
      },
      "iq": _25,
      "ir": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "gov": _2,
          "id": _2,
          "net": _2,
          "org": _2,
          "sch": _2,
          "xn--mgba3a4f16a": _2,
          "ایران": _2,
          "xn--mgba3a4fra": _2,
          "ايران": _2
        }
      },
      "is": {
        "$": 1,
        "succ": {
          "net": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "int": _2,
          "cupcake": _3,
          "blogspot": _3
        }
      },
      "it": {
        "$": 1,
        "succ": {
          "gov": _2,
          "edu": _2,
          "abr": _2,
          "abruzzo": _2,
          "aosta-valley": _2,
          "aostavalley": _2,
          "bas": _2,
          "basilicata": _2,
          "cal": _2,
          "calabria": _2,
          "cam": _2,
          "campania": _2,
          "emilia-romagna": _2,
          "emiliaromagna": _2,
          "emr": _2,
          "friuli-v-giulia": _2,
          "friuli-ve-giulia": _2,
          "friuli-vegiulia": _2,
          "friuli-venezia-giulia": _2,
          "friuli-veneziagiulia": _2,
          "friuli-vgiulia": _2,
          "friuliv-giulia": _2,
          "friulive-giulia": _2,
          "friulivegiulia": _2,
          "friulivenezia-giulia": _2,
          "friuliveneziagiulia": _2,
          "friulivgiulia": _2,
          "fvg": _2,
          "laz": _2,
          "lazio": _2,
          "lig": _2,
          "liguria": _2,
          "lom": _2,
          "lombardia": _2,
          "lombardy": _2,
          "lucania": _2,
          "mar": _2,
          "marche": _2,
          "mol": _2,
          "molise": _2,
          "piedmont": _2,
          "piemonte": _2,
          "pmn": _2,
          "pug": _2,
          "puglia": _2,
          "sar": _2,
          "sardegna": _2,
          "sardinia": _2,
          "sic": _2,
          "sicilia": _2,
          "sicily": _2,
          "taa": _2,
          "tos": _2,
          "toscana": _2,
          "trentin-sud-tirol": _2,
          "xn--trentin-sd-tirol-rzb": _2,
          "trentin-süd-tirol": _2,
          "trentin-sudtirol": _2,
          "xn--trentin-sdtirol-7vb": _2,
          "trentin-südtirol": _2,
          "trentin-sued-tirol": _2,
          "trentin-suedtirol": _2,
          "trentino-a-adige": _2,
          "trentino-aadige": _2,
          "trentino-alto-adige": _2,
          "trentino-altoadige": _2,
          "trentino-s-tirol": _2,
          "trentino-stirol": _2,
          "trentino-sud-tirol": _2,
          "xn--trentino-sd-tirol-c3b": _2,
          "trentino-süd-tirol": _2,
          "trentino-sudtirol": _2,
          "xn--trentino-sdtirol-szb": _2,
          "trentino-südtirol": _2,
          "trentino-sued-tirol": _2,
          "trentino-suedtirol": _2,
          "trentino": _2,
          "trentinoa-adige": _2,
          "trentinoaadige": _2,
          "trentinoalto-adige": _2,
          "trentinoaltoadige": _2,
          "trentinos-tirol": _2,
          "trentinostirol": _2,
          "trentinosud-tirol": _2,
          "xn--trentinosd-tirol-rzb": _2,
          "trentinosüd-tirol": _2,
          "trentinosudtirol": _2,
          "xn--trentinosdtirol-7vb": _2,
          "trentinosüdtirol": _2,
          "trentinosued-tirol": _2,
          "trentinosuedtirol": _2,
          "trentinsud-tirol": _2,
          "xn--trentinsd-tirol-6vb": _2,
          "trentinsüd-tirol": _2,
          "trentinsudtirol": _2,
          "xn--trentinsdtirol-nsb": _2,
          "trentinsüdtirol": _2,
          "trentinsued-tirol": _2,
          "trentinsuedtirol": _2,
          "tuscany": _2,
          "umb": _2,
          "umbria": _2,
          "val-d-aosta": _2,
          "val-daosta": _2,
          "vald-aosta": _2,
          "valdaosta": _2,
          "valle-aosta": _2,
          "valle-d-aosta": _2,
          "valle-daosta": _2,
          "valleaosta": _2,
          "valled-aosta": _2,
          "valledaosta": _2,
          "vallee-aoste": _2,
          "xn--valle-aoste-ebb": _2,
          "vallée-aoste": _2,
          "vallee-d-aoste": _2,
          "xn--valle-d-aoste-ehb": _2,
          "vallée-d-aoste": _2,
          "valleeaoste": _2,
          "xn--valleaoste-e7a": _2,
          "valléeaoste": _2,
          "valleedaoste": _2,
          "xn--valledaoste-ebb": _2,
          "valléedaoste": _2,
          "vao": _2,
          "vda": _2,
          "ven": _2,
          "veneto": _2,
          "ag": _2,
          "agrigento": _2,
          "al": _2,
          "alessandria": _2,
          "alto-adige": _2,
          "altoadige": _2,
          "an": _2,
          "ancona": _2,
          "andria-barletta-trani": _2,
          "andria-trani-barletta": _2,
          "andriabarlettatrani": _2,
          "andriatranibarletta": _2,
          "ao": _2,
          "aosta": _2,
          "aoste": _2,
          "ap": _2,
          "aq": _2,
          "aquila": _2,
          "ar": _2,
          "arezzo": _2,
          "ascoli-piceno": _2,
          "ascolipiceno": _2,
          "asti": _2,
          "at": _2,
          "av": _2,
          "avellino": _2,
          "ba": _2,
          "balsan-sudtirol": _2,
          "xn--balsan-sdtirol-nsb": _2,
          "balsan-südtirol": _2,
          "balsan-suedtirol": _2,
          "balsan": _2,
          "bari": _2,
          "barletta-trani-andria": _2,
          "barlettatraniandria": _2,
          "belluno": _2,
          "benevento": _2,
          "bergamo": _2,
          "bg": _2,
          "bi": _2,
          "biella": _2,
          "bl": _2,
          "bn": _2,
          "bo": _2,
          "bologna": _2,
          "bolzano-altoadige": _2,
          "bolzano": _2,
          "bozen-sudtirol": _2,
          "xn--bozen-sdtirol-2ob": _2,
          "bozen-südtirol": _2,
          "bozen-suedtirol": _2,
          "bozen": _2,
          "br": _2,
          "brescia": _2,
          "brindisi": _2,
          "bs": _2,
          "bt": _2,
          "bulsan-sudtirol": _2,
          "xn--bulsan-sdtirol-nsb": _2,
          "bulsan-südtirol": _2,
          "bulsan-suedtirol": _2,
          "bulsan": _2,
          "bz": _2,
          "ca": _2,
          "cagliari": _2,
          "caltanissetta": _2,
          "campidano-medio": _2,
          "campidanomedio": _2,
          "campobasso": _2,
          "carbonia-iglesias": _2,
          "carboniaiglesias": _2,
          "carrara-massa": _2,
          "carraramassa": _2,
          "caserta": _2,
          "catania": _2,
          "catanzaro": _2,
          "cb": _2,
          "ce": _2,
          "cesena-forli": _2,
          "xn--cesena-forl-mcb": _2,
          "cesena-forlì": _2,
          "cesenaforli": _2,
          "xn--cesenaforl-i8a": _2,
          "cesenaforlì": _2,
          "ch": _2,
          "chieti": _2,
          "ci": _2,
          "cl": _2,
          "cn": _2,
          "co": _2,
          "como": _2,
          "cosenza": _2,
          "cr": _2,
          "cremona": _2,
          "crotone": _2,
          "cs": _2,
          "ct": _2,
          "cuneo": _2,
          "cz": _2,
          "dell-ogliastra": _2,
          "dellogliastra": _2,
          "en": _2,
          "enna": _2,
          "fc": _2,
          "fe": _2,
          "fermo": _2,
          "ferrara": _2,
          "fg": _2,
          "fi": _2,
          "firenze": _2,
          "florence": _2,
          "fm": _2,
          "foggia": _2,
          "forli-cesena": _2,
          "xn--forl-cesena-fcb": _2,
          "forlì-cesena": _2,
          "forlicesena": _2,
          "xn--forlcesena-c8a": _2,
          "forlìcesena": _2,
          "fr": _2,
          "frosinone": _2,
          "ge": _2,
          "genoa": _2,
          "genova": _2,
          "go": _2,
          "gorizia": _2,
          "gr": _2,
          "grosseto": _2,
          "iglesias-carbonia": _2,
          "iglesiascarbonia": _2,
          "im": _2,
          "imperia": _2,
          "is": _2,
          "isernia": _2,
          "kr": _2,
          "la-spezia": _2,
          "laquila": _2,
          "laspezia": _2,
          "latina": _2,
          "lc": _2,
          "le": _2,
          "lecce": _2,
          "lecco": _2,
          "li": _2,
          "livorno": _2,
          "lo": _2,
          "lodi": _2,
          "lt": _2,
          "lu": _2,
          "lucca": _2,
          "macerata": _2,
          "mantova": _2,
          "massa-carrara": _2,
          "massacarrara": _2,
          "matera": _2,
          "mb": _2,
          "mc": _2,
          "me": _2,
          "medio-campidano": _2,
          "mediocampidano": _2,
          "messina": _2,
          "mi": _2,
          "milan": _2,
          "milano": _2,
          "mn": _2,
          "mo": _2,
          "modena": _2,
          "monza-brianza": _2,
          "monza-e-della-brianza": _2,
          "monza": _2,
          "monzabrianza": _2,
          "monzaebrianza": _2,
          "monzaedellabrianza": _2,
          "ms": _2,
          "mt": _2,
          "na": _2,
          "naples": _2,
          "napoli": _2,
          "no": _2,
          "novara": _2,
          "nu": _2,
          "nuoro": _2,
          "og": _2,
          "ogliastra": _2,
          "olbia-tempio": _2,
          "olbiatempio": _2,
          "or": _2,
          "oristano": _2,
          "ot": _2,
          "pa": _2,
          "padova": _2,
          "padua": _2,
          "palermo": _2,
          "parma": _2,
          "pavia": _2,
          "pc": _2,
          "pd": _2,
          "pe": _2,
          "perugia": _2,
          "pesaro-urbino": _2,
          "pesarourbino": _2,
          "pescara": _2,
          "pg": _2,
          "pi": _2,
          "piacenza": _2,
          "pisa": _2,
          "pistoia": _2,
          "pn": _2,
          "po": _2,
          "pordenone": _2,
          "potenza": _2,
          "pr": _2,
          "prato": _2,
          "pt": _2,
          "pu": _2,
          "pv": _2,
          "pz": _2,
          "ra": _2,
          "ragusa": _2,
          "ravenna": _2,
          "rc": _2,
          "re": _2,
          "reggio-calabria": _2,
          "reggio-emilia": _2,
          "reggiocalabria": _2,
          "reggioemilia": _2,
          "rg": _2,
          "ri": _2,
          "rieti": _2,
          "rimini": _2,
          "rm": _2,
          "rn": _2,
          "ro": _2,
          "roma": _2,
          "rome": _2,
          "rovigo": _2,
          "sa": _2,
          "salerno": _2,
          "sassari": _2,
          "savona": _2,
          "si": _2,
          "siena": _2,
          "siracusa": _2,
          "so": _2,
          "sondrio": _2,
          "sp": _2,
          "sr": _2,
          "ss": _2,
          "suedtirol": _2,
          "xn--sdtirol-n2a": _2,
          "südtirol": _2,
          "sv": _2,
          "ta": _2,
          "taranto": _2,
          "te": _2,
          "tempio-olbia": _2,
          "tempioolbia": _2,
          "teramo": _2,
          "terni": _2,
          "tn": _2,
          "to": _2,
          "torino": _2,
          "tp": _2,
          "tr": _2,
          "trani-andria-barletta": _2,
          "trani-barletta-andria": _2,
          "traniandriabarletta": _2,
          "tranibarlettaandria": _2,
          "trapani": _2,
          "trento": _2,
          "treviso": _2,
          "trieste": _2,
          "ts": _2,
          "turin": _2,
          "tv": _2,
          "ud": _2,
          "udine": _2,
          "urbino-pesaro": _2,
          "urbinopesaro": _2,
          "va": _2,
          "varese": _2,
          "vb": _2,
          "vc": _2,
          "ve": _2,
          "venezia": _2,
          "venice": _2,
          "verbania": _2,
          "vercelli": _2,
          "verona": _2,
          "vi": _2,
          "vibo-valentia": _2,
          "vibovalentia": _2,
          "vicenza": _2,
          "viterbo": _2,
          "vr": _2,
          "vs": _2,
          "vt": _2,
          "vv": _2,
          "blogspot": _3,
          "neen": {
            "$": 0,
            "succ": {
              "jc": _3
            }
          },
          "tim": {
            "$": 0,
            "succ": {
              "open": {
                "$": 0,
                "succ": {
                  "jelastic": _9
                }
              }
            }
          },
          "16-b": _3,
          "32-b": _3,
          "64-b": _3,
          "myspreadshop": _3,
          "syncloud": _3
        }
      },
      "je": {
        "$": 1,
        "succ": {
          "co": _2,
          "net": _2,
          "org": _2,
          "of": _3
        }
      },
      "jm": _8,
      "jo": {
        "$": 1,
        "succ": {
          "com": _2,
          "org": _2,
          "net": _2,
          "edu": _2,
          "sch": _2,
          "gov": _2,
          "mil": _2,
          "name": _2
        }
      },
      "jobs": _2,
      "jp": {
        "$": 1,
        "succ": {
          "ac": _2,
          "ad": _2,
          "co": _2,
          "ed": _2,
          "go": _2,
          "gr": _2,
          "lg": _2,
          "ne": {
            "$": 1,
            "succ": {
              "aseinet": _21,
              "gehirn": _3
            }
          },
          "or": _2,
          "aichi": {
            "$": 1,
            "succ": {
              "aisai": _2,
              "ama": _2,
              "anjo": _2,
              "asuke": _2,
              "chiryu": _2,
              "chita": _2,
              "fuso": _2,
              "gamagori": _2,
              "handa": _2,
              "hazu": _2,
              "hekinan": _2,
              "higashiura": _2,
              "ichinomiya": _2,
              "inazawa": _2,
              "inuyama": _2,
              "isshiki": _2,
              "iwakura": _2,
              "kanie": _2,
              "kariya": _2,
              "kasugai": _2,
              "kira": _2,
              "kiyosu": _2,
              "komaki": _2,
              "konan": _2,
              "kota": _2,
              "mihama": _2,
              "miyoshi": _2,
              "nishio": _2,
              "nisshin": _2,
              "obu": _2,
              "oguchi": _2,
              "oharu": _2,
              "okazaki": _2,
              "owariasahi": _2,
              "seto": _2,
              "shikatsu": _2,
              "shinshiro": _2,
              "shitara": _2,
              "tahara": _2,
              "takahama": _2,
              "tobishima": _2,
              "toei": _2,
              "togo": _2,
              "tokai": _2,
              "tokoname": _2,
              "toyoake": _2,
              "toyohashi": _2,
              "toyokawa": _2,
              "toyone": _2,
              "toyota": _2,
              "tsushima": _2,
              "yatomi": _2
            }
          },
          "akita": {
            "$": 1,
            "succ": {
              "akita": _2,
              "daisen": _2,
              "fujisato": _2,
              "gojome": _2,
              "hachirogata": _2,
              "happou": _2,
              "higashinaruse": _2,
              "honjo": _2,
              "honjyo": _2,
              "ikawa": _2,
              "kamikoani": _2,
              "kamioka": _2,
              "katagami": _2,
              "kazuno": _2,
              "kitaakita": _2,
              "kosaka": _2,
              "kyowa": _2,
              "misato": _2,
              "mitane": _2,
              "moriyoshi": _2,
              "nikaho": _2,
              "noshiro": _2,
              "odate": _2,
              "oga": _2,
              "ogata": _2,
              "semboku": _2,
              "yokote": _2,
              "yurihonjo": _2
            }
          },
          "aomori": {
            "$": 1,
            "succ": {
              "aomori": _2,
              "gonohe": _2,
              "hachinohe": _2,
              "hashikami": _2,
              "hiranai": _2,
              "hirosaki": _2,
              "itayanagi": _2,
              "kuroishi": _2,
              "misawa": _2,
              "mutsu": _2,
              "nakadomari": _2,
              "noheji": _2,
              "oirase": _2,
              "owani": _2,
              "rokunohe": _2,
              "sannohe": _2,
              "shichinohe": _2,
              "shingo": _2,
              "takko": _2,
              "towada": _2,
              "tsugaru": _2,
              "tsuruta": _2
            }
          },
          "chiba": {
            "$": 1,
            "succ": {
              "abiko": _2,
              "asahi": _2,
              "chonan": _2,
              "chosei": _2,
              "choshi": _2,
              "chuo": _2,
              "funabashi": _2,
              "futtsu": _2,
              "hanamigawa": _2,
              "ichihara": _2,
              "ichikawa": _2,
              "ichinomiya": _2,
              "inzai": _2,
              "isumi": _2,
              "kamagaya": _2,
              "kamogawa": _2,
              "kashiwa": _2,
              "katori": _2,
              "katsuura": _2,
              "kimitsu": _2,
              "kisarazu": _2,
              "kozaki": _2,
              "kujukuri": _2,
              "kyonan": _2,
              "matsudo": _2,
              "midori": _2,
              "mihama": _2,
              "minamiboso": _2,
              "mobara": _2,
              "mutsuzawa": _2,
              "nagara": _2,
              "nagareyama": _2,
              "narashino": _2,
              "narita": _2,
              "noda": _2,
              "oamishirasato": _2,
              "omigawa": _2,
              "onjuku": _2,
              "otaki": _2,
              "sakae": _2,
              "sakura": _2,
              "shimofusa": _2,
              "shirako": _2,
              "shiroi": _2,
              "shisui": _2,
              "sodegaura": _2,
              "sosa": _2,
              "tako": _2,
              "tateyama": _2,
              "togane": _2,
              "tohnosho": _2,
              "tomisato": _2,
              "urayasu": _2,
              "yachimata": _2,
              "yachiyo": _2,
              "yokaichiba": _2,
              "yokoshibahikari": _2,
              "yotsukaido": _2
            }
          },
          "ehime": {
            "$": 1,
            "succ": {
              "ainan": _2,
              "honai": _2,
              "ikata": _2,
              "imabari": _2,
              "iyo": _2,
              "kamijima": _2,
              "kihoku": _2,
              "kumakogen": _2,
              "masaki": _2,
              "matsuno": _2,
              "matsuyama": _2,
              "namikata": _2,
              "niihama": _2,
              "ozu": _2,
              "saijo": _2,
              "seiyo": _2,
              "shikokuchuo": _2,
              "tobe": _2,
              "toon": _2,
              "uchiko": _2,
              "uwajima": _2,
              "yawatahama": _2
            }
          },
          "fukui": {
            "$": 1,
            "succ": {
              "echizen": _2,
              "eiheiji": _2,
              "fukui": _2,
              "ikeda": _2,
              "katsuyama": _2,
              "mihama": _2,
              "minamiechizen": _2,
              "obama": _2,
              "ohi": _2,
              "ono": _2,
              "sabae": _2,
              "sakai": _2,
              "takahama": _2,
              "tsuruga": _2,
              "wakasa": _2
            }
          },
          "fukuoka": {
            "$": 1,
            "succ": {
              "ashiya": _2,
              "buzen": _2,
              "chikugo": _2,
              "chikuho": _2,
              "chikujo": _2,
              "chikushino": _2,
              "chikuzen": _2,
              "chuo": _2,
              "dazaifu": _2,
              "fukuchi": _2,
              "hakata": _2,
              "higashi": _2,
              "hirokawa": _2,
              "hisayama": _2,
              "iizuka": _2,
              "inatsuki": _2,
              "kaho": _2,
              "kasuga": _2,
              "kasuya": _2,
              "kawara": _2,
              "keisen": _2,
              "koga": _2,
              "kurate": _2,
              "kurogi": _2,
              "kurume": _2,
              "minami": _2,
              "miyako": _2,
              "miyama": _2,
              "miyawaka": _2,
              "mizumaki": _2,
              "munakata": _2,
              "nakagawa": _2,
              "nakama": _2,
              "nishi": _2,
              "nogata": _2,
              "ogori": _2,
              "okagaki": _2,
              "okawa": _2,
              "oki": _2,
              "omuta": _2,
              "onga": _2,
              "onojo": _2,
              "oto": _2,
              "saigawa": _2,
              "sasaguri": _2,
              "shingu": _2,
              "shinyoshitomi": _2,
              "shonai": _2,
              "soeda": _2,
              "sue": _2,
              "tachiarai": _2,
              "tagawa": _2,
              "takata": _2,
              "toho": _2,
              "toyotsu": _2,
              "tsuiki": _2,
              "ukiha": _2,
              "umi": _2,
              "usui": _2,
              "yamada": _2,
              "yame": _2,
              "yanagawa": _2,
              "yukuhashi": _2
            }
          },
          "fukushima": {
            "$": 1,
            "succ": {
              "aizubange": _2,
              "aizumisato": _2,
              "aizuwakamatsu": _2,
              "asakawa": _2,
              "bandai": _2,
              "date": _2,
              "fukushima": _2,
              "furudono": _2,
              "futaba": _2,
              "hanawa": _2,
              "higashi": _2,
              "hirata": _2,
              "hirono": _2,
              "iitate": _2,
              "inawashiro": _2,
              "ishikawa": _2,
              "iwaki": _2,
              "izumizaki": _2,
              "kagamiishi": _2,
              "kaneyama": _2,
              "kawamata": _2,
              "kitakata": _2,
              "kitashiobara": _2,
              "koori": _2,
              "koriyama": _2,
              "kunimi": _2,
              "miharu": _2,
              "mishima": _2,
              "namie": _2,
              "nango": _2,
              "nishiaizu": _2,
              "nishigo": _2,
              "okuma": _2,
              "omotego": _2,
              "ono": _2,
              "otama": _2,
              "samegawa": _2,
              "shimogo": _2,
              "shirakawa": _2,
              "showa": _2,
              "soma": _2,
              "sukagawa": _2,
              "taishin": _2,
              "tamakawa": _2,
              "tanagura": _2,
              "tenei": _2,
              "yabuki": _2,
              "yamato": _2,
              "yamatsuri": _2,
              "yanaizu": _2,
              "yugawa": _2
            }
          },
          "gifu": {
            "$": 1,
            "succ": {
              "anpachi": _2,
              "ena": _2,
              "gifu": _2,
              "ginan": _2,
              "godo": _2,
              "gujo": _2,
              "hashima": _2,
              "hichiso": _2,
              "hida": _2,
              "higashishirakawa": _2,
              "ibigawa": _2,
              "ikeda": _2,
              "kakamigahara": _2,
              "kani": _2,
              "kasahara": _2,
              "kasamatsu": _2,
              "kawaue": _2,
              "kitagata": _2,
              "mino": _2,
              "minokamo": _2,
              "mitake": _2,
              "mizunami": _2,
              "motosu": _2,
              "nakatsugawa": _2,
              "ogaki": _2,
              "sakahogi": _2,
              "seki": _2,
              "sekigahara": _2,
              "shirakawa": _2,
              "tajimi": _2,
              "takayama": _2,
              "tarui": _2,
              "toki": _2,
              "tomika": _2,
              "wanouchi": _2,
              "yamagata": _2,
              "yaotsu": _2,
              "yoro": _2
            }
          },
          "gunma": {
            "$": 1,
            "succ": {
              "annaka": _2,
              "chiyoda": _2,
              "fujioka": _2,
              "higashiagatsuma": _2,
              "isesaki": _2,
              "itakura": _2,
              "kanna": _2,
              "kanra": _2,
              "katashina": _2,
              "kawaba": _2,
              "kiryu": _2,
              "kusatsu": _2,
              "maebashi": _2,
              "meiwa": _2,
              "midori": _2,
              "minakami": _2,
              "naganohara": _2,
              "nakanojo": _2,
              "nanmoku": _2,
              "numata": _2,
              "oizumi": _2,
              "ora": _2,
              "ota": _2,
              "shibukawa": _2,
              "shimonita": _2,
              "shinto": _2,
              "showa": _2,
              "takasaki": _2,
              "takayama": _2,
              "tamamura": _2,
              "tatebayashi": _2,
              "tomioka": _2,
              "tsukiyono": _2,
              "tsumagoi": _2,
              "ueno": _2,
              "yoshioka": _2
            }
          },
          "hiroshima": {
            "$": 1,
            "succ": {
              "asaminami": _2,
              "daiwa": _2,
              "etajima": _2,
              "fuchu": _2,
              "fukuyama": _2,
              "hatsukaichi": _2,
              "higashihiroshima": _2,
              "hongo": _2,
              "jinsekikogen": _2,
              "kaita": _2,
              "kui": _2,
              "kumano": _2,
              "kure": _2,
              "mihara": _2,
              "miyoshi": _2,
              "naka": _2,
              "onomichi": _2,
              "osakikamijima": _2,
              "otake": _2,
              "saka": _2,
              "sera": _2,
              "seranishi": _2,
              "shinichi": _2,
              "shobara": _2,
              "takehara": _2
            }
          },
          "hokkaido": {
            "$": 1,
            "succ": {
              "abashiri": _2,
              "abira": _2,
              "aibetsu": _2,
              "akabira": _2,
              "akkeshi": _2,
              "asahikawa": _2,
              "ashibetsu": _2,
              "ashoro": _2,
              "assabu": _2,
              "atsuma": _2,
              "bibai": _2,
              "biei": _2,
              "bifuka": _2,
              "bihoro": _2,
              "biratori": _2,
              "chippubetsu": _2,
              "chitose": _2,
              "date": _2,
              "ebetsu": _2,
              "embetsu": _2,
              "eniwa": _2,
              "erimo": _2,
              "esan": _2,
              "esashi": _2,
              "fukagawa": _2,
              "fukushima": _2,
              "furano": _2,
              "furubira": _2,
              "haboro": _2,
              "hakodate": _2,
              "hamatonbetsu": _2,
              "hidaka": _2,
              "higashikagura": _2,
              "higashikawa": _2,
              "hiroo": _2,
              "hokuryu": _2,
              "hokuto": _2,
              "honbetsu": _2,
              "horokanai": _2,
              "horonobe": _2,
              "ikeda": _2,
              "imakane": _2,
              "ishikari": _2,
              "iwamizawa": _2,
              "iwanai": _2,
              "kamifurano": _2,
              "kamikawa": _2,
              "kamishihoro": _2,
              "kamisunagawa": _2,
              "kamoenai": _2,
              "kayabe": _2,
              "kembuchi": _2,
              "kikonai": _2,
              "kimobetsu": _2,
              "kitahiroshima": _2,
              "kitami": _2,
              "kiyosato": _2,
              "koshimizu": _2,
              "kunneppu": _2,
              "kuriyama": _2,
              "kuromatsunai": _2,
              "kushiro": _2,
              "kutchan": _2,
              "kyowa": _2,
              "mashike": _2,
              "matsumae": _2,
              "mikasa": _2,
              "minamifurano": _2,
              "mombetsu": _2,
              "moseushi": _2,
              "mukawa": _2,
              "muroran": _2,
              "naie": _2,
              "nakagawa": _2,
              "nakasatsunai": _2,
              "nakatombetsu": _2,
              "nanae": _2,
              "nanporo": _2,
              "nayoro": _2,
              "nemuro": _2,
              "niikappu": _2,
              "niki": _2,
              "nishiokoppe": _2,
              "noboribetsu": _2,
              "numata": _2,
              "obihiro": _2,
              "obira": _2,
              "oketo": _2,
              "okoppe": _2,
              "otaru": _2,
              "otobe": _2,
              "otofuke": _2,
              "otoineppu": _2,
              "oumu": _2,
              "ozora": _2,
              "pippu": _2,
              "rankoshi": _2,
              "rebun": _2,
              "rikubetsu": _2,
              "rishiri": _2,
              "rishirifuji": _2,
              "saroma": _2,
              "sarufutsu": _2,
              "shakotan": _2,
              "shari": _2,
              "shibecha": _2,
              "shibetsu": _2,
              "shikabe": _2,
              "shikaoi": _2,
              "shimamaki": _2,
              "shimizu": _2,
              "shimokawa": _2,
              "shinshinotsu": _2,
              "shintoku": _2,
              "shiranuka": _2,
              "shiraoi": _2,
              "shiriuchi": _2,
              "sobetsu": _2,
              "sunagawa": _2,
              "taiki": _2,
              "takasu": _2,
              "takikawa": _2,
              "takinoue": _2,
              "teshikaga": _2,
              "tobetsu": _2,
              "tohma": _2,
              "tomakomai": _2,
              "tomari": _2,
              "toya": _2,
              "toyako": _2,
              "toyotomi": _2,
              "toyoura": _2,
              "tsubetsu": _2,
              "tsukigata": _2,
              "urakawa": _2,
              "urausu": _2,
              "uryu": _2,
              "utashinai": _2,
              "wakkanai": _2,
              "wassamu": _2,
              "yakumo": _2,
              "yoichi": _2
            }
          },
          "hyogo": {
            "$": 1,
            "succ": {
              "aioi": _2,
              "akashi": _2,
              "ako": _2,
              "amagasaki": _2,
              "aogaki": _2,
              "asago": _2,
              "ashiya": _2,
              "awaji": _2,
              "fukusaki": _2,
              "goshiki": _2,
              "harima": _2,
              "himeji": _2,
              "ichikawa": _2,
              "inagawa": _2,
              "itami": _2,
              "kakogawa": _2,
              "kamigori": _2,
              "kamikawa": _2,
              "kasai": _2,
              "kasuga": _2,
              "kawanishi": _2,
              "miki": _2,
              "minamiawaji": _2,
              "nishinomiya": _2,
              "nishiwaki": _2,
              "ono": _2,
              "sanda": _2,
              "sannan": _2,
              "sasayama": _2,
              "sayo": _2,
              "shingu": _2,
              "shinonsen": _2,
              "shiso": _2,
              "sumoto": _2,
              "taishi": _2,
              "taka": _2,
              "takarazuka": _2,
              "takasago": _2,
              "takino": _2,
              "tamba": _2,
              "tatsuno": _2,
              "toyooka": _2,
              "yabu": _2,
              "yashiro": _2,
              "yoka": _2,
              "yokawa": _2
            }
          },
          "ibaraki": {
            "$": 1,
            "succ": {
              "ami": _2,
              "asahi": _2,
              "bando": _2,
              "chikusei": _2,
              "daigo": _2,
              "fujishiro": _2,
              "hitachi": _2,
              "hitachinaka": _2,
              "hitachiomiya": _2,
              "hitachiota": _2,
              "ibaraki": _2,
              "ina": _2,
              "inashiki": _2,
              "itako": _2,
              "iwama": _2,
              "joso": _2,
              "kamisu": _2,
              "kasama": _2,
              "kashima": _2,
              "kasumigaura": _2,
              "koga": _2,
              "miho": _2,
              "mito": _2,
              "moriya": _2,
              "naka": _2,
              "namegata": _2,
              "oarai": _2,
              "ogawa": _2,
              "omitama": _2,
              "ryugasaki": _2,
              "sakai": _2,
              "sakuragawa": _2,
              "shimodate": _2,
              "shimotsuma": _2,
              "shirosato": _2,
              "sowa": _2,
              "suifu": _2,
              "takahagi": _2,
              "tamatsukuri": _2,
              "tokai": _2,
              "tomobe": _2,
              "tone": _2,
              "toride": _2,
              "tsuchiura": _2,
              "tsukuba": _2,
              "uchihara": _2,
              "ushiku": _2,
              "yachiyo": _2,
              "yamagata": _2,
              "yawara": _2,
              "yuki": _2
            }
          },
          "ishikawa": {
            "$": 1,
            "succ": {
              "anamizu": _2,
              "hakui": _2,
              "hakusan": _2,
              "kaga": _2,
              "kahoku": _2,
              "kanazawa": _2,
              "kawakita": _2,
              "komatsu": _2,
              "nakanoto": _2,
              "nanao": _2,
              "nomi": _2,
              "nonoichi": _2,
              "noto": _2,
              "shika": _2,
              "suzu": _2,
              "tsubata": _2,
              "tsurugi": _2,
              "uchinada": _2,
              "wajima": _2
            }
          },
          "iwate": {
            "$": 1,
            "succ": {
              "fudai": _2,
              "fujisawa": _2,
              "hanamaki": _2,
              "hiraizumi": _2,
              "hirono": _2,
              "ichinohe": _2,
              "ichinoseki": _2,
              "iwaizumi": _2,
              "iwate": _2,
              "joboji": _2,
              "kamaishi": _2,
              "kanegasaki": _2,
              "karumai": _2,
              "kawai": _2,
              "kitakami": _2,
              "kuji": _2,
              "kunohe": _2,
              "kuzumaki": _2,
              "miyako": _2,
              "mizusawa": _2,
              "morioka": _2,
              "ninohe": _2,
              "noda": _2,
              "ofunato": _2,
              "oshu": _2,
              "otsuchi": _2,
              "rikuzentakata": _2,
              "shiwa": _2,
              "shizukuishi": _2,
              "sumita": _2,
              "tanohata": _2,
              "tono": _2,
              "yahaba": _2,
              "yamada": _2
            }
          },
          "kagawa": {
            "$": 1,
            "succ": {
              "ayagawa": _2,
              "higashikagawa": _2,
              "kanonji": _2,
              "kotohira": _2,
              "manno": _2,
              "marugame": _2,
              "mitoyo": _2,
              "naoshima": _2,
              "sanuki": _2,
              "tadotsu": _2,
              "takamatsu": _2,
              "tonosho": _2,
              "uchinomi": _2,
              "utazu": _2,
              "zentsuji": _2
            }
          },
          "kagoshima": {
            "$": 1,
            "succ": {
              "akune": _2,
              "amami": _2,
              "hioki": _2,
              "isa": _2,
              "isen": _2,
              "izumi": _2,
              "kagoshima": _2,
              "kanoya": _2,
              "kawanabe": _2,
              "kinko": _2,
              "kouyama": _2,
              "makurazaki": _2,
              "matsumoto": _2,
              "minamitane": _2,
              "nakatane": _2,
              "nishinoomote": _2,
              "satsumasendai": _2,
              "soo": _2,
              "tarumizu": _2,
              "yusui": _2
            }
          },
          "kanagawa": {
            "$": 1,
            "succ": {
              "aikawa": _2,
              "atsugi": _2,
              "ayase": _2,
              "chigasaki": _2,
              "ebina": _2,
              "fujisawa": _2,
              "hadano": _2,
              "hakone": _2,
              "hiratsuka": _2,
              "isehara": _2,
              "kaisei": _2,
              "kamakura": _2,
              "kiyokawa": _2,
              "matsuda": _2,
              "minamiashigara": _2,
              "miura": _2,
              "nakai": _2,
              "ninomiya": _2,
              "odawara": _2,
              "oi": _2,
              "oiso": _2,
              "sagamihara": _2,
              "samukawa": _2,
              "tsukui": _2,
              "yamakita": _2,
              "yamato": _2,
              "yokosuka": _2,
              "yugawara": _2,
              "zama": _2,
              "zushi": _2
            }
          },
          "kochi": {
            "$": 1,
            "succ": {
              "aki": _2,
              "geisei": _2,
              "hidaka": _2,
              "higashitsuno": _2,
              "ino": _2,
              "kagami": _2,
              "kami": _2,
              "kitagawa": _2,
              "kochi": _2,
              "mihara": _2,
              "motoyama": _2,
              "muroto": _2,
              "nahari": _2,
              "nakamura": _2,
              "nankoku": _2,
              "nishitosa": _2,
              "niyodogawa": _2,
              "ochi": _2,
              "okawa": _2,
              "otoyo": _2,
              "otsuki": _2,
              "sakawa": _2,
              "sukumo": _2,
              "susaki": _2,
              "tosa": _2,
              "tosashimizu": _2,
              "toyo": _2,
              "tsuno": _2,
              "umaji": _2,
              "yasuda": _2,
              "yusuhara": _2
            }
          },
          "kumamoto": {
            "$": 1,
            "succ": {
              "amakusa": _2,
              "arao": _2,
              "aso": _2,
              "choyo": _2,
              "gyokuto": _2,
              "kamiamakusa": _2,
              "kikuchi": _2,
              "kumamoto": _2,
              "mashiki": _2,
              "mifune": _2,
              "minamata": _2,
              "minamioguni": _2,
              "nagasu": _2,
              "nishihara": _2,
              "oguni": _2,
              "ozu": _2,
              "sumoto": _2,
              "takamori": _2,
              "uki": _2,
              "uto": _2,
              "yamaga": _2,
              "yamato": _2,
              "yatsushiro": _2
            }
          },
          "kyoto": {
            "$": 1,
            "succ": {
              "ayabe": _2,
              "fukuchiyama": _2,
              "higashiyama": _2,
              "ide": _2,
              "ine": _2,
              "joyo": _2,
              "kameoka": _2,
              "kamo": _2,
              "kita": _2,
              "kizu": _2,
              "kumiyama": _2,
              "kyotamba": _2,
              "kyotanabe": _2,
              "kyotango": _2,
              "maizuru": _2,
              "minami": _2,
              "minamiyamashiro": _2,
              "miyazu": _2,
              "muko": _2,
              "nagaokakyo": _2,
              "nakagyo": _2,
              "nantan": _2,
              "oyamazaki": _2,
              "sakyo": _2,
              "seika": _2,
              "tanabe": _2,
              "uji": _2,
              "ujitawara": _2,
              "wazuka": _2,
              "yamashina": _2,
              "yawata": _2
            }
          },
          "mie": {
            "$": 1,
            "succ": {
              "asahi": _2,
              "inabe": _2,
              "ise": _2,
              "kameyama": _2,
              "kawagoe": _2,
              "kiho": _2,
              "kisosaki": _2,
              "kiwa": _2,
              "komono": _2,
              "kumano": _2,
              "kuwana": _2,
              "matsusaka": _2,
              "meiwa": _2,
              "mihama": _2,
              "minamiise": _2,
              "misugi": _2,
              "miyama": _2,
              "nabari": _2,
              "shima": _2,
              "suzuka": _2,
              "tado": _2,
              "taiki": _2,
              "taki": _2,
              "tamaki": _2,
              "toba": _2,
              "tsu": _2,
              "udono": _2,
              "ureshino": _2,
              "watarai": _2,
              "yokkaichi": _2
            }
          },
          "miyagi": {
            "$": 1,
            "succ": {
              "furukawa": _2,
              "higashimatsushima": _2,
              "ishinomaki": _2,
              "iwanuma": _2,
              "kakuda": _2,
              "kami": _2,
              "kawasaki": _2,
              "marumori": _2,
              "matsushima": _2,
              "minamisanriku": _2,
              "misato": _2,
              "murata": _2,
              "natori": _2,
              "ogawara": _2,
              "ohira": _2,
              "onagawa": _2,
              "osaki": _2,
              "rifu": _2,
              "semine": _2,
              "shibata": _2,
              "shichikashuku": _2,
              "shikama": _2,
              "shiogama": _2,
              "shiroishi": _2,
              "tagajo": _2,
              "taiwa": _2,
              "tome": _2,
              "tomiya": _2,
              "wakuya": _2,
              "watari": _2,
              "yamamoto": _2,
              "zao": _2
            }
          },
          "miyazaki": {
            "$": 1,
            "succ": {
              "aya": _2,
              "ebino": _2,
              "gokase": _2,
              "hyuga": _2,
              "kadogawa": _2,
              "kawaminami": _2,
              "kijo": _2,
              "kitagawa": _2,
              "kitakata": _2,
              "kitaura": _2,
              "kobayashi": _2,
              "kunitomi": _2,
              "kushima": _2,
              "mimata": _2,
              "miyakonojo": _2,
              "miyazaki": _2,
              "morotsuka": _2,
              "nichinan": _2,
              "nishimera": _2,
              "nobeoka": _2,
              "saito": _2,
              "shiiba": _2,
              "shintomi": _2,
              "takaharu": _2,
              "takanabe": _2,
              "takazaki": _2,
              "tsuno": _2
            }
          },
          "nagano": {
            "$": 1,
            "succ": {
              "achi": _2,
              "agematsu": _2,
              "anan": _2,
              "aoki": _2,
              "asahi": _2,
              "azumino": _2,
              "chikuhoku": _2,
              "chikuma": _2,
              "chino": _2,
              "fujimi": _2,
              "hakuba": _2,
              "hara": _2,
              "hiraya": _2,
              "iida": _2,
              "iijima": _2,
              "iiyama": _2,
              "iizuna": _2,
              "ikeda": _2,
              "ikusaka": _2,
              "ina": _2,
              "karuizawa": _2,
              "kawakami": _2,
              "kiso": _2,
              "kisofukushima": _2,
              "kitaaiki": _2,
              "komagane": _2,
              "komoro": _2,
              "matsukawa": _2,
              "matsumoto": _2,
              "miasa": _2,
              "minamiaiki": _2,
              "minamimaki": _2,
              "minamiminowa": _2,
              "minowa": _2,
              "miyada": _2,
              "miyota": _2,
              "mochizuki": _2,
              "nagano": _2,
              "nagawa": _2,
              "nagiso": _2,
              "nakagawa": _2,
              "nakano": _2,
              "nozawaonsen": _2,
              "obuse": _2,
              "ogawa": _2,
              "okaya": _2,
              "omachi": _2,
              "omi": _2,
              "ookuwa": _2,
              "ooshika": _2,
              "otaki": _2,
              "otari": _2,
              "sakae": _2,
              "sakaki": _2,
              "saku": _2,
              "sakuho": _2,
              "shimosuwa": _2,
              "shinanomachi": _2,
              "shiojiri": _2,
              "suwa": _2,
              "suzaka": _2,
              "takagi": _2,
              "takamori": _2,
              "takayama": _2,
              "tateshina": _2,
              "tatsuno": _2,
              "togakushi": _2,
              "togura": _2,
              "tomi": _2,
              "ueda": _2,
              "wada": _2,
              "yamagata": _2,
              "yamanouchi": _2,
              "yasaka": _2,
              "yasuoka": _2
            }
          },
          "nagasaki": {
            "$": 1,
            "succ": {
              "chijiwa": _2,
              "futsu": _2,
              "goto": _2,
              "hasami": _2,
              "hirado": _2,
              "iki": _2,
              "isahaya": _2,
              "kawatana": _2,
              "kuchinotsu": _2,
              "matsuura": _2,
              "nagasaki": _2,
              "obama": _2,
              "omura": _2,
              "oseto": _2,
              "saikai": _2,
              "sasebo": _2,
              "seihi": _2,
              "shimabara": _2,
              "shinkamigoto": _2,
              "togitsu": _2,
              "tsushima": _2,
              "unzen": _2
            }
          },
          "nara": {
            "$": 1,
            "succ": {
              "ando": _2,
              "gose": _2,
              "heguri": _2,
              "higashiyoshino": _2,
              "ikaruga": _2,
              "ikoma": _2,
              "kamikitayama": _2,
              "kanmaki": _2,
              "kashiba": _2,
              "kashihara": _2,
              "katsuragi": _2,
              "kawai": _2,
              "kawakami": _2,
              "kawanishi": _2,
              "koryo": _2,
              "kurotaki": _2,
              "mitsue": _2,
              "miyake": _2,
              "nara": _2,
              "nosegawa": _2,
              "oji": _2,
              "ouda": _2,
              "oyodo": _2,
              "sakurai": _2,
              "sango": _2,
              "shimoichi": _2,
              "shimokitayama": _2,
              "shinjo": _2,
              "soni": _2,
              "takatori": _2,
              "tawaramoto": _2,
              "tenkawa": _2,
              "tenri": _2,
              "uda": _2,
              "yamatokoriyama": _2,
              "yamatotakada": _2,
              "yamazoe": _2,
              "yoshino": _2
            }
          },
          "niigata": {
            "$": 1,
            "succ": {
              "aga": _2,
              "agano": _2,
              "gosen": _2,
              "itoigawa": _2,
              "izumozaki": _2,
              "joetsu": _2,
              "kamo": _2,
              "kariwa": _2,
              "kashiwazaki": _2,
              "minamiuonuma": _2,
              "mitsuke": _2,
              "muika": _2,
              "murakami": _2,
              "myoko": _2,
              "nagaoka": _2,
              "niigata": _2,
              "ojiya": _2,
              "omi": _2,
              "sado": _2,
              "sanjo": _2,
              "seiro": _2,
              "seirou": _2,
              "sekikawa": _2,
              "shibata": _2,
              "tagami": _2,
              "tainai": _2,
              "tochio": _2,
              "tokamachi": _2,
              "tsubame": _2,
              "tsunan": _2,
              "uonuma": _2,
              "yahiko": _2,
              "yoita": _2,
              "yuzawa": _2
            }
          },
          "oita": {
            "$": 1,
            "succ": {
              "beppu": _2,
              "bungoono": _2,
              "bungotakada": _2,
              "hasama": _2,
              "hiji": _2,
              "himeshima": _2,
              "hita": _2,
              "kamitsue": _2,
              "kokonoe": _2,
              "kuju": _2,
              "kunisaki": _2,
              "kusu": _2,
              "oita": _2,
              "saiki": _2,
              "taketa": _2,
              "tsukumi": _2,
              "usa": _2,
              "usuki": _2,
              "yufu": _2
            }
          },
          "okayama": {
            "$": 1,
            "succ": {
              "akaiwa": _2,
              "asakuchi": _2,
              "bizen": _2,
              "hayashima": _2,
              "ibara": _2,
              "kagamino": _2,
              "kasaoka": _2,
              "kibichuo": _2,
              "kumenan": _2,
              "kurashiki": _2,
              "maniwa": _2,
              "misaki": _2,
              "nagi": _2,
              "niimi": _2,
              "nishiawakura": _2,
              "okayama": _2,
              "satosho": _2,
              "setouchi": _2,
              "shinjo": _2,
              "shoo": _2,
              "soja": _2,
              "takahashi": _2,
              "tamano": _2,
              "tsuyama": _2,
              "wake": _2,
              "yakage": _2
            }
          },
          "okinawa": {
            "$": 1,
            "succ": {
              "aguni": _2,
              "ginowan": _2,
              "ginoza": _2,
              "gushikami": _2,
              "haebaru": _2,
              "higashi": _2,
              "hirara": _2,
              "iheya": _2,
              "ishigaki": _2,
              "ishikawa": _2,
              "itoman": _2,
              "izena": _2,
              "kadena": _2,
              "kin": _2,
              "kitadaito": _2,
              "kitanakagusuku": _2,
              "kumejima": _2,
              "kunigami": _2,
              "minamidaito": _2,
              "motobu": _2,
              "nago": _2,
              "naha": _2,
              "nakagusuku": _2,
              "nakijin": _2,
              "nanjo": _2,
              "nishihara": _2,
              "ogimi": _2,
              "okinawa": _2,
              "onna": _2,
              "shimoji": _2,
              "taketomi": _2,
              "tarama": _2,
              "tokashiki": _2,
              "tomigusuku": _2,
              "tonaki": _2,
              "urasoe": _2,
              "uruma": _2,
              "yaese": _2,
              "yomitan": _2,
              "yonabaru": _2,
              "yonaguni": _2,
              "zamami": _2
            }
          },
          "osaka": {
            "$": 1,
            "succ": {
              "abeno": _2,
              "chihayaakasaka": _2,
              "chuo": _2,
              "daito": _2,
              "fujiidera": _2,
              "habikino": _2,
              "hannan": _2,
              "higashiosaka": _2,
              "higashisumiyoshi": _2,
              "higashiyodogawa": _2,
              "hirakata": _2,
              "ibaraki": _2,
              "ikeda": _2,
              "izumi": _2,
              "izumiotsu": _2,
              "izumisano": _2,
              "kadoma": _2,
              "kaizuka": _2,
              "kanan": _2,
              "kashiwara": _2,
              "katano": _2,
              "kawachinagano": _2,
              "kishiwada": _2,
              "kita": _2,
              "kumatori": _2,
              "matsubara": _2,
              "minato": _2,
              "minoh": _2,
              "misaki": _2,
              "moriguchi": _2,
              "neyagawa": _2,
              "nishi": _2,
              "nose": _2,
              "osakasayama": _2,
              "sakai": _2,
              "sayama": _2,
              "sennan": _2,
              "settsu": _2,
              "shijonawate": _2,
              "shimamoto": _2,
              "suita": _2,
              "tadaoka": _2,
              "taishi": _2,
              "tajiri": _2,
              "takaishi": _2,
              "takatsuki": _2,
              "tondabayashi": _2,
              "toyonaka": _2,
              "toyono": _2,
              "yao": _2
            }
          },
          "saga": {
            "$": 1,
            "succ": {
              "ariake": _2,
              "arita": _2,
              "fukudomi": _2,
              "genkai": _2,
              "hamatama": _2,
              "hizen": _2,
              "imari": _2,
              "kamimine": _2,
              "kanzaki": _2,
              "karatsu": _2,
              "kashima": _2,
              "kitagata": _2,
              "kitahata": _2,
              "kiyama": _2,
              "kouhoku": _2,
              "kyuragi": _2,
              "nishiarita": _2,
              "ogi": _2,
              "omachi": _2,
              "ouchi": _2,
              "saga": _2,
              "shiroishi": _2,
              "taku": _2,
              "tara": _2,
              "tosu": _2,
              "yoshinogari": _2
            }
          },
          "saitama": {
            "$": 1,
            "succ": {
              "arakawa": _2,
              "asaka": _2,
              "chichibu": _2,
              "fujimi": _2,
              "fujimino": _2,
              "fukaya": _2,
              "hanno": _2,
              "hanyu": _2,
              "hasuda": _2,
              "hatogaya": _2,
              "hatoyama": _2,
              "hidaka": _2,
              "higashichichibu": _2,
              "higashimatsuyama": _2,
              "honjo": _2,
              "ina": _2,
              "iruma": _2,
              "iwatsuki": _2,
              "kamiizumi": _2,
              "kamikawa": _2,
              "kamisato": _2,
              "kasukabe": _2,
              "kawagoe": _2,
              "kawaguchi": _2,
              "kawajima": _2,
              "kazo": _2,
              "kitamoto": _2,
              "koshigaya": _2,
              "kounosu": _2,
              "kuki": _2,
              "kumagaya": _2,
              "matsubushi": _2,
              "minano": _2,
              "misato": _2,
              "miyashiro": _2,
              "miyoshi": _2,
              "moroyama": _2,
              "nagatoro": _2,
              "namegawa": _2,
              "niiza": _2,
              "ogano": _2,
              "ogawa": _2,
              "ogose": _2,
              "okegawa": _2,
              "omiya": _2,
              "otaki": _2,
              "ranzan": _2,
              "ryokami": _2,
              "saitama": _2,
              "sakado": _2,
              "satte": _2,
              "sayama": _2,
              "shiki": _2,
              "shiraoka": _2,
              "soka": _2,
              "sugito": _2,
              "toda": _2,
              "tokigawa": _2,
              "tokorozawa": _2,
              "tsurugashima": _2,
              "urawa": _2,
              "warabi": _2,
              "yashio": _2,
              "yokoze": _2,
              "yono": _2,
              "yorii": _2,
              "yoshida": _2,
              "yoshikawa": _2,
              "yoshimi": _2
            }
          },
          "shiga": {
            "$": 1,
            "succ": {
              "aisho": _2,
              "gamo": _2,
              "higashiomi": _2,
              "hikone": _2,
              "koka": _2,
              "konan": _2,
              "kosei": _2,
              "koto": _2,
              "kusatsu": _2,
              "maibara": _2,
              "moriyama": _2,
              "nagahama": _2,
              "nishiazai": _2,
              "notogawa": _2,
              "omihachiman": _2,
              "otsu": _2,
              "ritto": _2,
              "ryuoh": _2,
              "takashima": _2,
              "takatsuki": _2,
              "torahime": _2,
              "toyosato": _2,
              "yasu": _2
            }
          },
          "shimane": {
            "$": 1,
            "succ": {
              "akagi": _2,
              "ama": _2,
              "gotsu": _2,
              "hamada": _2,
              "higashiizumo": _2,
              "hikawa": _2,
              "hikimi": _2,
              "izumo": _2,
              "kakinoki": _2,
              "masuda": _2,
              "matsue": _2,
              "misato": _2,
              "nishinoshima": _2,
              "ohda": _2,
              "okinoshima": _2,
              "okuizumo": _2,
              "shimane": _2,
              "tamayu": _2,
              "tsuwano": _2,
              "unnan": _2,
              "yakumo": _2,
              "yasugi": _2,
              "yatsuka": _2
            }
          },
          "shizuoka": {
            "$": 1,
            "succ": {
              "arai": _2,
              "atami": _2,
              "fuji": _2,
              "fujieda": _2,
              "fujikawa": _2,
              "fujinomiya": _2,
              "fukuroi": _2,
              "gotemba": _2,
              "haibara": _2,
              "hamamatsu": _2,
              "higashiizu": _2,
              "ito": _2,
              "iwata": _2,
              "izu": _2,
              "izunokuni": _2,
              "kakegawa": _2,
              "kannami": _2,
              "kawanehon": _2,
              "kawazu": _2,
              "kikugawa": _2,
              "kosai": _2,
              "makinohara": _2,
              "matsuzaki": _2,
              "minamiizu": _2,
              "mishima": _2,
              "morimachi": _2,
              "nishiizu": _2,
              "numazu": _2,
              "omaezaki": _2,
              "shimada": _2,
              "shimizu": _2,
              "shimoda": _2,
              "shizuoka": _2,
              "susono": _2,
              "yaizu": _2,
              "yoshida": _2
            }
          },
          "tochigi": {
            "$": 1,
            "succ": {
              "ashikaga": _2,
              "bato": _2,
              "haga": _2,
              "ichikai": _2,
              "iwafune": _2,
              "kaminokawa": _2,
              "kanuma": _2,
              "karasuyama": _2,
              "kuroiso": _2,
              "mashiko": _2,
              "mibu": _2,
              "moka": _2,
              "motegi": _2,
              "nasu": _2,
              "nasushiobara": _2,
              "nikko": _2,
              "nishikata": _2,
              "nogi": _2,
              "ohira": _2,
              "ohtawara": _2,
              "oyama": _2,
              "sakura": _2,
              "sano": _2,
              "shimotsuke": _2,
              "shioya": _2,
              "takanezawa": _2,
              "tochigi": _2,
              "tsuga": _2,
              "ujiie": _2,
              "utsunomiya": _2,
              "yaita": _2
            }
          },
          "tokushima": {
            "$": 1,
            "succ": {
              "aizumi": _2,
              "anan": _2,
              "ichiba": _2,
              "itano": _2,
              "kainan": _2,
              "komatsushima": _2,
              "matsushige": _2,
              "mima": _2,
              "minami": _2,
              "miyoshi": _2,
              "mugi": _2,
              "nakagawa": _2,
              "naruto": _2,
              "sanagochi": _2,
              "shishikui": _2,
              "tokushima": _2,
              "wajiki": _2
            }
          },
          "tokyo": {
            "$": 1,
            "succ": {
              "adachi": _2,
              "akiruno": _2,
              "akishima": _2,
              "aogashima": _2,
              "arakawa": _2,
              "bunkyo": _2,
              "chiyoda": _2,
              "chofu": _2,
              "chuo": _2,
              "edogawa": _2,
              "fuchu": _2,
              "fussa": _2,
              "hachijo": _2,
              "hachioji": _2,
              "hamura": _2,
              "higashikurume": _2,
              "higashimurayama": _2,
              "higashiyamato": _2,
              "hino": _2,
              "hinode": _2,
              "hinohara": _2,
              "inagi": _2,
              "itabashi": _2,
              "katsushika": _2,
              "kita": _2,
              "kiyose": _2,
              "kodaira": _2,
              "koganei": _2,
              "kokubunji": _2,
              "komae": _2,
              "koto": _2,
              "kouzushima": _2,
              "kunitachi": _2,
              "machida": _2,
              "meguro": _2,
              "minato": _2,
              "mitaka": _2,
              "mizuho": _2,
              "musashimurayama": _2,
              "musashino": _2,
              "nakano": _2,
              "nerima": _2,
              "ogasawara": _2,
              "okutama": _2,
              "ome": _2,
              "oshima": _2,
              "ota": _2,
              "setagaya": _2,
              "shibuya": _2,
              "shinagawa": _2,
              "shinjuku": _2,
              "suginami": _2,
              "sumida": _2,
              "tachikawa": _2,
              "taito": _2,
              "tama": _2,
              "toshima": _2
            }
          },
          "tottori": {
            "$": 1,
            "succ": {
              "chizu": _2,
              "hino": _2,
              "kawahara": _2,
              "koge": _2,
              "kotoura": _2,
              "misasa": _2,
              "nanbu": _2,
              "nichinan": _2,
              "sakaiminato": _2,
              "tottori": _2,
              "wakasa": _2,
              "yazu": _2,
              "yonago": _2
            }
          },
          "toyama": {
            "$": 1,
            "succ": {
              "asahi": _2,
              "fuchu": _2,
              "fukumitsu": _2,
              "funahashi": _2,
              "himi": _2,
              "imizu": _2,
              "inami": _2,
              "johana": _2,
              "kamiichi": _2,
              "kurobe": _2,
              "nakaniikawa": _2,
              "namerikawa": _2,
              "nanto": _2,
              "nyuzen": _2,
              "oyabe": _2,
              "taira": _2,
              "takaoka": _2,
              "tateyama": _2,
              "toga": _2,
              "tonami": _2,
              "toyama": _2,
              "unazuki": _2,
              "uozu": _2,
              "yamada": _2
            }
          },
          "wakayama": {
            "$": 1,
            "succ": {
              "arida": _2,
              "aridagawa": _2,
              "gobo": _2,
              "hashimoto": _2,
              "hidaka": _2,
              "hirogawa": _2,
              "inami": _2,
              "iwade": _2,
              "kainan": _2,
              "kamitonda": _2,
              "katsuragi": _2,
              "kimino": _2,
              "kinokawa": _2,
              "kitayama": _2,
              "koya": _2,
              "koza": _2,
              "kozagawa": _2,
              "kudoyama": _2,
              "kushimoto": _2,
              "mihama": _2,
              "misato": _2,
              "nachikatsuura": _2,
              "shingu": _2,
              "shirahama": _2,
              "taiji": _2,
              "tanabe": _2,
              "wakayama": _2,
              "yuasa": _2,
              "yura": _2
            }
          },
          "yamagata": {
            "$": 1,
            "succ": {
              "asahi": _2,
              "funagata": _2,
              "higashine": _2,
              "iide": _2,
              "kahoku": _2,
              "kaminoyama": _2,
              "kaneyama": _2,
              "kawanishi": _2,
              "mamurogawa": _2,
              "mikawa": _2,
              "murayama": _2,
              "nagai": _2,
              "nakayama": _2,
              "nanyo": _2,
              "nishikawa": _2,
              "obanazawa": _2,
              "oe": _2,
              "oguni": _2,
              "ohkura": _2,
              "oishida": _2,
              "sagae": _2,
              "sakata": _2,
              "sakegawa": _2,
              "shinjo": _2,
              "shirataka": _2,
              "shonai": _2,
              "takahata": _2,
              "tendo": _2,
              "tozawa": _2,
              "tsuruoka": _2,
              "yamagata": _2,
              "yamanobe": _2,
              "yonezawa": _2,
              "yuza": _2
            }
          },
          "yamaguchi": {
            "$": 1,
            "succ": {
              "abu": _2,
              "hagi": _2,
              "hikari": _2,
              "hofu": _2,
              "iwakuni": _2,
              "kudamatsu": _2,
              "mitou": _2,
              "nagato": _2,
              "oshima": _2,
              "shimonoseki": _2,
              "shunan": _2,
              "tabuse": _2,
              "tokuyama": _2,
              "toyota": _2,
              "ube": _2,
              "yuu": _2
            }
          },
          "yamanashi": {
            "$": 1,
            "succ": {
              "chuo": _2,
              "doshi": _2,
              "fuefuki": _2,
              "fujikawa": _2,
              "fujikawaguchiko": _2,
              "fujiyoshida": _2,
              "hayakawa": _2,
              "hokuto": _2,
              "ichikawamisato": _2,
              "kai": _2,
              "kofu": _2,
              "koshu": _2,
              "kosuge": _2,
              "minami-alps": _2,
              "minobu": _2,
              "nakamichi": _2,
              "nanbu": _2,
              "narusawa": _2,
              "nirasaki": _2,
              "nishikatsura": _2,
              "oshino": _2,
              "otsuki": _2,
              "showa": _2,
              "tabayama": _2,
              "tsuru": _2,
              "uenohara": _2,
              "yamanakako": _2,
              "yamanashi": _2
            }
          },
          "xn--4pvxs": _2,
          "栃木": _2,
          "xn--vgu402c": _2,
          "愛知": _2,
          "xn--c3s14m": _2,
          "愛媛": _2,
          "xn--f6qx53a": _2,
          "兵庫": _2,
          "xn--8pvr4u": _2,
          "熊本": _2,
          "xn--uist22h": _2,
          "茨城": _2,
          "xn--djrs72d6uy": _2,
          "北海道": _2,
          "xn--mkru45i": _2,
          "千葉": _2,
          "xn--0trq7p7nn": _2,
          "和歌山": _2,
          "xn--8ltr62k": _2,
          "長崎": _2,
          "xn--2m4a15e": _2,
          "長野": _2,
          "xn--efvn9s": _2,
          "新潟": _2,
          "xn--32vp30h": _2,
          "青森": _2,
          "xn--4it797k": _2,
          "静岡": _2,
          "xn--1lqs71d": _2,
          "東京": _2,
          "xn--5rtp49c": _2,
          "石川": _2,
          "xn--5js045d": _2,
          "埼玉": _2,
          "xn--ehqz56n": _2,
          "三重": _2,
          "xn--1lqs03n": _2,
          "京都": _2,
          "xn--qqqt11m": _2,
          "佐賀": _2,
          "xn--kbrq7o": _2,
          "大分": _2,
          "xn--pssu33l": _2,
          "大阪": _2,
          "xn--ntsq17g": _2,
          "奈良": _2,
          "xn--uisz3g": _2,
          "宮城": _2,
          "xn--6btw5a": _2,
          "宮崎": _2,
          "xn--1ctwo": _2,
          "富山": _2,
          "xn--6orx2r": _2,
          "山口": _2,
          "xn--rht61e": _2,
          "山形": _2,
          "xn--rht27z": _2,
          "山梨": _2,
          "xn--djty4k": _2,
          "岩手": _2,
          "xn--nit225k": _2,
          "岐阜": _2,
          "xn--rht3d": _2,
          "岡山": _2,
          "xn--klty5x": _2,
          "島根": _2,
          "xn--kltx9a": _2,
          "広島": _2,
          "xn--kltp7d": _2,
          "徳島": _2,
          "xn--uuwu58a": _2,
          "沖縄": _2,
          "xn--zbx025d": _2,
          "滋賀": _2,
          "xn--ntso0iqx3a": _2,
          "神奈川": _2,
          "xn--elqq16h": _2,
          "福井": _2,
          "xn--4it168d": _2,
          "福岡": _2,
          "xn--klt787d": _2,
          "福島": _2,
          "xn--rny31h": _2,
          "秋田": _2,
          "xn--7t0a264c": _2,
          "群馬": _2,
          "xn--5rtq34k": _2,
          "香川": _2,
          "xn--k7yn95e": _2,
          "高知": _2,
          "xn--tor131o": _2,
          "鳥取": _2,
          "xn--d5qv7z876c": _2,
          "鹿児島": _2,
          "kawasaki": _8,
          "kitakyushu": _8,
          "kobe": _8,
          "nagoya": _8,
          "sapporo": _8,
          "sendai": _8,
          "yokohama": _8,
          "usercontent": _3,
          "blogspot": _3
        }
      },
      "ke": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _6,
          "go": _2,
          "info": _2,
          "me": _2,
          "mobi": _2,
          "ne": _2,
          "or": _2,
          "sc": _2
        }
      },
      "kg": {
        "$": 1,
        "succ": {
          "org": _2,
          "net": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "blog": _3,
          "io": _3,
          "jp": _3,
          "tv": _3,
          "uk": _3,
          "us": _3
        }
      },
      "kh": _8,
      "ki": _26,
      "km": {
        "$": 1,
        "succ": {
          "org": _2,
          "nom": _2,
          "gov": _2,
          "prd": _2,
          "tm": _2,
          "edu": _2,
          "mil": _2,
          "ass": _2,
          "com": _2,
          "coop": _2,
          "asso": _2,
          "presse": _2,
          "medecin": _2,
          "notaires": _2,
          "pharmaciens": _2,
          "veterinaire": _2,
          "gouv": _2
        }
      },
      "kn": {
        "$": 1,
        "succ": {
          "net": _2,
          "org": _2,
          "edu": _2,
          "gov": _2
        }
      },
      "kp": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "rep": _2,
          "tra": _2
        }
      },
      "kr": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "es": _2,
          "go": _2,
          "hs": _2,
          "kg": _2,
          "mil": _2,
          "ms": _2,
          "ne": _2,
          "or": _2,
          "pe": _2,
          "re": _2,
          "sc": _2,
          "busan": _2,
          "chungbuk": _2,
          "chungnam": _2,
          "daegu": _2,
          "daejeon": _2,
          "gangwon": _2,
          "gwangju": _2,
          "gyeongbuk": _2,
          "gyeonggi": _2,
          "gyeongnam": _2,
          "incheon": _2,
          "jeju": _2,
          "jeonbuk": _2,
          "jeonnam": _2,
          "seoul": _2,
          "ulsan": _2,
          "blogspot": _3
        }
      },
      "kw": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "emb": _2,
          "gov": _2,
          "ind": _2,
          "net": _2,
          "org": _2
        }
      },
      "ky": _4,
      "kz": {
        "$": 1,
        "succ": {
          "org": _2,
          "edu": _2,
          "net": _2,
          "gov": _2,
          "mil": _2,
          "com": _2,
          "jcloud": _3,
          "kazteleport": {
            "$": 0,
            "succ": {
              "upaas": _3
            }
          }
        }
      },
      "la": {
        "$": 1,
        "succ": {
          "int": _2,
          "net": _2,
          "info": _2,
          "edu": _2,
          "gov": _2,
          "per": _2,
          "com": _2,
          "org": _2,
          "bnr": _3,
          "c": _3
        }
      },
      "lb": _4,
      "lc": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "co": _2,
          "org": _2,
          "edu": _2,
          "gov": _2,
          "oy": _3
        }
      },
      "li": {
        "$": 1,
        "succ": {
          "blogspot": _3,
          "caa": _3
        }
      },
      "lk": {
        "$": 1,
        "succ": {
          "gov": _2,
          "sch": _2,
          "net": _2,
          "int": _2,
          "com": _2,
          "org": _2,
          "edu": _2,
          "ngo": _2,
          "soc": _2,
          "web": _2,
          "ltd": _2,
          "assn": _2,
          "grp": _2,
          "hotel": _2,
          "ac": _2
        }
      },
      "lr": _4,
      "ls": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _2,
          "edu": _2,
          "gov": _2,
          "info": _2,
          "net": _2,
          "org": _2,
          "sc": _2,
          "de": _3
        }
      },
      "lt": _27,
      "lu": _6,
      "lv": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "org": _2,
          "mil": _2,
          "id": _2,
          "net": _2,
          "asn": _2,
          "conf": _2
        }
      },
      "ly": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "gov": _2,
          "plc": _2,
          "edu": _2,
          "sch": _2,
          "med": _2,
          "org": _2,
          "id": _2
        }
      },
      "ma": {
        "$": 1,
        "succ": {
          "co": _2,
          "net": _2,
          "gov": _2,
          "org": _2,
          "ac": _2,
          "press": _2
        }
      },
      "mc": {
        "$": 1,
        "succ": {
          "tm": _2,
          "asso": _2
        }
      },
      "md": {
        "$": 1,
        "succ": {
          "blogspot": _3,
          "at": _3,
          "de": _3,
          "jp": _3,
          "to": _3
        }
      },
      "me": {
        "$": 1,
        "succ": {
          "co": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "ac": _2,
          "gov": _2,
          "its": _2,
          "priv": _2,
          "c66": _3,
          "daplie": {
            "$": 2,
            "succ": {
              "localhost": _3
            }
          },
          "edgestack": _3,
          "couk": _3,
          "ukco": _3,
          "filegear": _3,
          "filegear-au": _3,
          "filegear-de": _3,
          "filegear-gb": _3,
          "filegear-ie": _3,
          "filegear-jp": _3,
          "filegear-sg": _3,
          "glitch": _3,
          "ravendb": _3,
          "lohmus": _3,
          "barsy": _3,
          "mcpe": _3,
          "mcdir": _3,
          "soundcast": _3,
          "tcp4": _3,
          "brasilia": _3,
          "ddns": _3,
          "dnsfor": _3,
          "hopto": _3,
          "loginto": _3,
          "noip": _3,
          "webhop": _3,
          "vp4": _3,
          "diskstation": _3,
          "dscloud": _3,
          "i234": _3,
          "myds": _3,
          "synology": _3,
          "tbits": _3,
          "wbq": _3,
          "wedeploy": _3,
          "yombo": _3,
          "nohost": _3
        }
      },
      "mg": {
        "$": 1,
        "succ": {
          "org": _2,
          "nom": _2,
          "gov": _2,
          "prd": _2,
          "tm": _2,
          "edu": _2,
          "mil": _2,
          "com": _2,
          "co": _2
        }
      },
      "mh": _2,
      "mil": _2,
      "mk": {
        "$": 1,
        "succ": {
          "com": _2,
          "org": _2,
          "net": _2,
          "edu": _2,
          "gov": _2,
          "inf": _2,
          "name": _2,
          "blogspot": _3
        }
      },
      "ml": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gouv": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "presse": _2
        }
      },
      "mm": _8,
      "mn": {
        "$": 1,
        "succ": {
          "gov": _2,
          "edu": _2,
          "org": _2,
          "nyc": _3
        }
      },
      "mo": _4,
      "mobi": {
        "$": 1,
        "succ": {
          "barsy": _3,
          "dscloud": _3
        }
      },
      "mp": {
        "$": 1,
        "succ": {
          "ju": _3
        }
      },
      "mq": _2,
      "mr": _27,
      "ms": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "lab": _3,
          "minisite": _3
        }
      },
      "mt": {
        "$": 1,
        "succ": {
          "com": _6,
          "edu": _2,
          "net": _2,
          "org": _2
        }
      },
      "mu": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "ac": _2,
          "co": _2,
          "or": _2
        }
      },
      "museum": {
        "$": 1,
        "succ": {
          "academy": _2,
          "agriculture": _2,
          "air": _2,
          "airguard": _2,
          "alabama": _2,
          "alaska": _2,
          "amber": _2,
          "ambulance": _2,
          "american": _2,
          "americana": _2,
          "americanantiques": _2,
          "americanart": _2,
          "amsterdam": _2,
          "and": _2,
          "annefrank": _2,
          "anthro": _2,
          "anthropology": _2,
          "antiques": _2,
          "aquarium": _2,
          "arboretum": _2,
          "archaeological": _2,
          "archaeology": _2,
          "architecture": _2,
          "art": _2,
          "artanddesign": _2,
          "artcenter": _2,
          "artdeco": _2,
          "arteducation": _2,
          "artgallery": _2,
          "arts": _2,
          "artsandcrafts": _2,
          "asmatart": _2,
          "assassination": _2,
          "assisi": _2,
          "association": _2,
          "astronomy": _2,
          "atlanta": _2,
          "austin": _2,
          "australia": _2,
          "automotive": _2,
          "aviation": _2,
          "axis": _2,
          "badajoz": _2,
          "baghdad": _2,
          "bahn": _2,
          "bale": _2,
          "baltimore": _2,
          "barcelona": _2,
          "baseball": _2,
          "basel": _2,
          "baths": _2,
          "bauern": _2,
          "beauxarts": _2,
          "beeldengeluid": _2,
          "bellevue": _2,
          "bergbau": _2,
          "berkeley": _2,
          "berlin": _2,
          "bern": _2,
          "bible": _2,
          "bilbao": _2,
          "bill": _2,
          "birdart": _2,
          "birthplace": _2,
          "bonn": _2,
          "boston": _2,
          "botanical": _2,
          "botanicalgarden": _2,
          "botanicgarden": _2,
          "botany": _2,
          "brandywinevalley": _2,
          "brasil": _2,
          "bristol": _2,
          "british": _2,
          "britishcolumbia": _2,
          "broadcast": _2,
          "brunel": _2,
          "brussel": _2,
          "brussels": _2,
          "bruxelles": _2,
          "building": _2,
          "burghof": _2,
          "bus": _2,
          "bushey": _2,
          "cadaques": _2,
          "california": _2,
          "cambridge": _2,
          "can": _2,
          "canada": _2,
          "capebreton": _2,
          "carrier": _2,
          "cartoonart": _2,
          "casadelamoneda": _2,
          "castle": _2,
          "castres": _2,
          "celtic": _2,
          "center": _2,
          "chattanooga": _2,
          "cheltenham": _2,
          "chesapeakebay": _2,
          "chicago": _2,
          "children": _2,
          "childrens": _2,
          "childrensgarden": _2,
          "chiropractic": _2,
          "chocolate": _2,
          "christiansburg": _2,
          "cincinnati": _2,
          "cinema": _2,
          "circus": _2,
          "civilisation": _2,
          "civilization": _2,
          "civilwar": _2,
          "clinton": _2,
          "clock": _2,
          "coal": _2,
          "coastaldefence": _2,
          "cody": _2,
          "coldwar": _2,
          "collection": _2,
          "colonialwilliamsburg": _2,
          "coloradoplateau": _2,
          "columbia": _2,
          "columbus": _2,
          "communication": _2,
          "communications": _2,
          "community": _2,
          "computer": _2,
          "computerhistory": _2,
          "xn--comunicaes-v6a2o": _2,
          "comunicações": _2,
          "contemporary": _2,
          "contemporaryart": _2,
          "convent": _2,
          "copenhagen": _2,
          "corporation": _2,
          "xn--correios-e-telecomunicaes-ghc29a": _2,
          "correios-e-telecomunicações": _2,
          "corvette": _2,
          "costume": _2,
          "countryestate": _2,
          "county": _2,
          "crafts": _2,
          "cranbrook": _2,
          "creation": _2,
          "cultural": _2,
          "culturalcenter": _2,
          "culture": _2,
          "cyber": _2,
          "cymru": _2,
          "dali": _2,
          "dallas": _2,
          "database": _2,
          "ddr": _2,
          "decorativearts": _2,
          "delaware": _2,
          "delmenhorst": _2,
          "denmark": _2,
          "depot": _2,
          "design": _2,
          "detroit": _2,
          "dinosaur": _2,
          "discovery": _2,
          "dolls": _2,
          "donostia": _2,
          "durham": _2,
          "eastafrica": _2,
          "eastcoast": _2,
          "education": _2,
          "educational": _2,
          "egyptian": _2,
          "eisenbahn": _2,
          "elburg": _2,
          "elvendrell": _2,
          "embroidery": _2,
          "encyclopedic": _2,
          "england": _2,
          "entomology": _2,
          "environment": _2,
          "environmentalconservation": _2,
          "epilepsy": _2,
          "essex": _2,
          "estate": _2,
          "ethnology": _2,
          "exeter": _2,
          "exhibition": _2,
          "family": _2,
          "farm": _2,
          "farmequipment": _2,
          "farmers": _2,
          "farmstead": _2,
          "field": _2,
          "figueres": _2,
          "filatelia": _2,
          "film": _2,
          "fineart": _2,
          "finearts": _2,
          "finland": _2,
          "flanders": _2,
          "florida": _2,
          "force": _2,
          "fortmissoula": _2,
          "fortworth": _2,
          "foundation": _2,
          "francaise": _2,
          "frankfurt": _2,
          "franziskaner": _2,
          "freemasonry": _2,
          "freiburg": _2,
          "fribourg": _2,
          "frog": _2,
          "fundacio": _2,
          "furniture": _2,
          "gallery": _2,
          "garden": _2,
          "gateway": _2,
          "geelvinck": _2,
          "gemological": _2,
          "geology": _2,
          "georgia": _2,
          "giessen": _2,
          "glas": _2,
          "glass": _2,
          "gorge": _2,
          "grandrapids": _2,
          "graz": _2,
          "guernsey": _2,
          "halloffame": _2,
          "hamburg": _2,
          "handson": _2,
          "harvestcelebration": _2,
          "hawaii": _2,
          "health": _2,
          "heimatunduhren": _2,
          "hellas": _2,
          "helsinki": _2,
          "hembygdsforbund": _2,
          "heritage": _2,
          "histoire": _2,
          "historical": _2,
          "historicalsociety": _2,
          "historichouses": _2,
          "historisch": _2,
          "historisches": _2,
          "history": _2,
          "historyofscience": _2,
          "horology": _2,
          "house": _2,
          "humanities": _2,
          "illustration": _2,
          "imageandsound": _2,
          "indian": _2,
          "indiana": _2,
          "indianapolis": _2,
          "indianmarket": _2,
          "intelligence": _2,
          "interactive": _2,
          "iraq": _2,
          "iron": _2,
          "isleofman": _2,
          "jamison": _2,
          "jefferson": _2,
          "jerusalem": _2,
          "jewelry": _2,
          "jewish": _2,
          "jewishart": _2,
          "jfk": _2,
          "journalism": _2,
          "judaica": _2,
          "judygarland": _2,
          "juedisches": _2,
          "juif": _2,
          "karate": _2,
          "karikatur": _2,
          "kids": _2,
          "koebenhavn": _2,
          "koeln": _2,
          "kunst": _2,
          "kunstsammlung": _2,
          "kunstunddesign": _2,
          "labor": _2,
          "labour": _2,
          "lajolla": _2,
          "lancashire": _2,
          "landes": _2,
          "lans": _2,
          "xn--lns-qla": _2,
          "läns": _2,
          "larsson": _2,
          "lewismiller": _2,
          "lincoln": _2,
          "linz": _2,
          "living": _2,
          "livinghistory": _2,
          "localhistory": _2,
          "london": _2,
          "losangeles": _2,
          "louvre": _2,
          "loyalist": _2,
          "lucerne": _2,
          "luxembourg": _2,
          "luzern": _2,
          "mad": _2,
          "madrid": _2,
          "mallorca": _2,
          "manchester": _2,
          "mansion": _2,
          "mansions": _2,
          "manx": _2,
          "marburg": _2,
          "maritime": _2,
          "maritimo": _2,
          "maryland": _2,
          "marylhurst": _2,
          "media": _2,
          "medical": _2,
          "medizinhistorisches": _2,
          "meeres": _2,
          "memorial": _2,
          "mesaverde": _2,
          "michigan": _2,
          "midatlantic": _2,
          "military": _2,
          "mill": _2,
          "miners": _2,
          "mining": _2,
          "minnesota": _2,
          "missile": _2,
          "missoula": _2,
          "modern": _2,
          "moma": _2,
          "money": _2,
          "monmouth": _2,
          "monticello": _2,
          "montreal": _2,
          "moscow": _2,
          "motorcycle": _2,
          "muenchen": _2,
          "muenster": _2,
          "mulhouse": _2,
          "muncie": _2,
          "museet": _2,
          "museumcenter": _2,
          "museumvereniging": _2,
          "music": _2,
          "national": _2,
          "nationalfirearms": _2,
          "nationalheritage": _2,
          "nativeamerican": _2,
          "naturalhistory": _2,
          "naturalhistorymuseum": _2,
          "naturalsciences": _2,
          "nature": _2,
          "naturhistorisches": _2,
          "natuurwetenschappen": _2,
          "naumburg": _2,
          "naval": _2,
          "nebraska": _2,
          "neues": _2,
          "newhampshire": _2,
          "newjersey": _2,
          "newmexico": _2,
          "newport": _2,
          "newspaper": _2,
          "newyork": _2,
          "niepce": _2,
          "norfolk": _2,
          "north": _2,
          "nrw": _2,
          "nyc": _2,
          "nyny": _2,
          "oceanographic": _2,
          "oceanographique": _2,
          "omaha": _2,
          "online": _2,
          "ontario": _2,
          "openair": _2,
          "oregon": _2,
          "oregontrail": _2,
          "otago": _2,
          "oxford": _2,
          "pacific": _2,
          "paderborn": _2,
          "palace": _2,
          "paleo": _2,
          "palmsprings": _2,
          "panama": _2,
          "paris": _2,
          "pasadena": _2,
          "pharmacy": _2,
          "philadelphia": _2,
          "philadelphiaarea": _2,
          "philately": _2,
          "phoenix": _2,
          "photography": _2,
          "pilots": _2,
          "pittsburgh": _2,
          "planetarium": _2,
          "plantation": _2,
          "plants": _2,
          "plaza": _2,
          "portal": _2,
          "portland": _2,
          "portlligat": _2,
          "posts-and-telecommunications": _2,
          "preservation": _2,
          "presidio": _2,
          "press": _2,
          "project": _2,
          "public": _2,
          "pubol": _2,
          "quebec": _2,
          "railroad": _2,
          "railway": _2,
          "research": _2,
          "resistance": _2,
          "riodejaneiro": _2,
          "rochester": _2,
          "rockart": _2,
          "roma": _2,
          "russia": _2,
          "saintlouis": _2,
          "salem": _2,
          "salvadordali": _2,
          "salzburg": _2,
          "sandiego": _2,
          "sanfrancisco": _2,
          "santabarbara": _2,
          "santacruz": _2,
          "santafe": _2,
          "saskatchewan": _2,
          "satx": _2,
          "savannahga": _2,
          "schlesisches": _2,
          "schoenbrunn": _2,
          "schokoladen": _2,
          "school": _2,
          "schweiz": _2,
          "science": _2,
          "scienceandhistory": _2,
          "scienceandindustry": _2,
          "sciencecenter": _2,
          "sciencecenters": _2,
          "science-fiction": _2,
          "sciencehistory": _2,
          "sciences": _2,
          "sciencesnaturelles": _2,
          "scotland": _2,
          "seaport": _2,
          "settlement": _2,
          "settlers": _2,
          "shell": _2,
          "sherbrooke": _2,
          "sibenik": _2,
          "silk": _2,
          "ski": _2,
          "skole": _2,
          "society": _2,
          "sologne": _2,
          "soundandvision": _2,
          "southcarolina": _2,
          "southwest": _2,
          "space": _2,
          "spy": _2,
          "square": _2,
          "stadt": _2,
          "stalbans": _2,
          "starnberg": _2,
          "state": _2,
          "stateofdelaware": _2,
          "station": _2,
          "steam": _2,
          "steiermark": _2,
          "stjohn": _2,
          "stockholm": _2,
          "stpetersburg": _2,
          "stuttgart": _2,
          "suisse": _2,
          "surgeonshall": _2,
          "surrey": _2,
          "svizzera": _2,
          "sweden": _2,
          "sydney": _2,
          "tank": _2,
          "tcm": _2,
          "technology": _2,
          "telekommunikation": _2,
          "television": _2,
          "texas": _2,
          "textile": _2,
          "theater": _2,
          "time": _2,
          "timekeeping": _2,
          "topology": _2,
          "torino": _2,
          "touch": _2,
          "town": _2,
          "transport": _2,
          "tree": _2,
          "trolley": _2,
          "trust": _2,
          "trustee": _2,
          "uhren": _2,
          "ulm": _2,
          "undersea": _2,
          "university": _2,
          "usa": _2,
          "usantiques": _2,
          "usarts": _2,
          "uscountryestate": _2,
          "usculture": _2,
          "usdecorativearts": _2,
          "usgarden": _2,
          "ushistory": _2,
          "ushuaia": _2,
          "uslivinghistory": _2,
          "utah": _2,
          "uvic": _2,
          "valley": _2,
          "vantaa": _2,
          "versailles": _2,
          "viking": _2,
          "village": _2,
          "virginia": _2,
          "virtual": _2,
          "virtuel": _2,
          "vlaanderen": _2,
          "volkenkunde": _2,
          "wales": _2,
          "wallonie": _2,
          "war": _2,
          "washingtondc": _2,
          "watchandclock": _2,
          "watch-and-clock": _2,
          "western": _2,
          "westfalen": _2,
          "whaling": _2,
          "wildlife": _2,
          "williamsburg": _2,
          "windmill": _2,
          "workshop": _2,
          "york": _2,
          "yorkshire": _2,
          "yosemite": _2,
          "youth": _2,
          "zoological": _2,
          "zoology": _2,
          "xn--9dbhblg6di": _2,
          "ירושלים": _2,
          "xn--h1aegh": _2,
          "иком": _2
        }
      },
      "mv": {
        "$": 1,
        "succ": {
          "aero": _2,
          "biz": _2,
          "com": _2,
          "coop": _2,
          "edu": _2,
          "gov": _2,
          "info": _2,
          "int": _2,
          "mil": _2,
          "museum": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "pro": _2
        }
      },
      "mw": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _2,
          "com": _2,
          "coop": _2,
          "edu": _2,
          "gov": _2,
          "int": _2,
          "museum": _2,
          "net": _2,
          "org": _2
        }
      },
      "mx": {
        "$": 1,
        "succ": {
          "com": _2,
          "org": _2,
          "gob": _2,
          "edu": _2,
          "net": _2,
          "blogspot": _3
        }
      },
      "my": {
        "$": 1,
        "succ": {
          "biz": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "blogspot": _3
        }
      },
      "mz": {
        "$": 1,
        "succ": {
          "ac": _2,
          "adv": _2,
          "co": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2
        }
      },
      "na": {
        "$": 1,
        "succ": {
          "info": _2,
          "pro": _2,
          "name": _2,
          "school": _2,
          "or": _2,
          "dr": _2,
          "us": _2,
          "mx": _2,
          "ca": _2,
          "in": _2,
          "cc": _2,
          "tv": _2,
          "ws": _2,
          "mobi": _2,
          "co": _2,
          "com": _2,
          "org": _2
        }
      },
      "name": {
        "$": 1,
        "succ": {
          "her": _29,
          "his": _29
        }
      },
      "nc": {
        "$": 1,
        "succ": {
          "asso": _2,
          "nom": _2
        }
      },
      "ne": _2,
      "net": {
        "$": 1,
        "succ": {
          "adobeaemcloud": _3,
          "alwaysdata": _3,
          "cloudfront": _3,
          "t3l3p0rt": _3,
          "appudo": _3,
          "atlassian-dev": {
            "$": 0,
            "succ": {
              "prod": {
                "$": 0,
                "succ": {
                  "cdn": _3
                }
              }
            }
          },
          "myfritz": _3,
          "onavstack": _3,
          "blackbaudcdn": _3,
          "boomla": _3,
          "bplaced": _3,
          "square7": _3,
          "gb": _3,
          "hu": _3,
          "jp": _3,
          "se": _3,
          "uk": _3,
          "in": _3,
          "clickrising": _3,
          "cloudaccess": _3,
          "cdn77-ssl": _3,
          "cdn77": {
            "$": 0,
            "succ": {
              "r": _3
            }
          },
          "feste-ip": _3,
          "knx-server": _3,
          "static-access": _3,
          "cryptonomic": _5,
          "dattolocal": _3,
          "mydatto": _3,
          "debian": _3,
          "bitbridge": _3,
          "at-band-camp": _3,
          "blogdns": _3,
          "broke-it": _3,
          "buyshouses": _3,
          "dnsalias": _3,
          "dnsdojo": _3,
          "does-it": _3,
          "dontexist": _3,
          "dynalias": _3,
          "dynathome": _3,
          "endofinternet": _3,
          "from-az": _3,
          "from-co": _3,
          "from-la": _3,
          "from-ny": _3,
          "gets-it": _3,
          "ham-radio-op": _3,
          "homeftp": _3,
          "homeip": _3,
          "homelinux": _3,
          "homeunix": _3,
          "in-the-band": _3,
          "is-a-chef": _3,
          "is-a-geek": _3,
          "isa-geek": _3,
          "kicks-ass": _3,
          "office-on-the": _3,
          "podzone": _3,
          "scrapper-site": _3,
          "selfip": _3,
          "sells-it": _3,
          "servebbs": _3,
          "serveftp": _3,
          "thruhere": _3,
          "webhop": _3,
          "definima": _3,
          "casacam": _3,
          "dynu": _3,
          "dynv6": _3,
          "twmail": _3,
          "ru": _3,
          "channelsdvr": {
            "$": 2,
            "succ": {
              "u": _3
            }
          },
          "fastlylb": {
            "$": 2,
            "succ": {
              "map": _3
            }
          },
          "fastly": {
            "$": 0,
            "succ": {
              "freetls": _3,
              "map": _3,
              "prod": {
                "$": 0,
                "succ": {
                  "a": _3,
                  "global": _3
                }
              },
              "ssl": {
                "$": 0,
                "succ": {
                  "a": _3,
                  "b": _3,
                  "global": _3
                }
              }
            }
          },
          "edgeapp": _3,
          "flynnhosting": _3,
          "cdn-edges": _3,
          "cloudfunctions": _3,
          "moonscale": _3,
          "in-dsl": _3,
          "in-vpn": _3,
          "ipifony": _3,
          "iobb": _3,
          "cloudjiffy": {
            "$": 2,
            "succ": {
              "fra1-de": _3,
              "west1-us": _3
            }
          },
          "elastx": {
            "$": 0,
            "succ": {
              "jls-sto1": _3,
              "jls-sto2": _3,
              "jls-sto3": _3
            }
          },
          "faststacks": _3,
          "massivegrid": {
            "$": 0,
            "succ": {
              "paas": {
                "$": 0,
                "succ": {
                  "fr-1": _3,
                  "lon-1": _3,
                  "lon-2": _3,
                  "ny-1": _3,
                  "ny-2": _3,
                  "sg-1": _3
                }
              }
            }
          },
          "saveincloud": {
            "$": 0,
            "succ": {
              "jelastic": _3,
              "nordeste-idc": _3
            }
          },
          "scaleforce": _19,
          "tsukaeru": _20,
          "kinghost": _3,
          "uni5": _3,
          "krellian": _3,
          "barsy": _3,
          "memset": _3,
          "azurewebsites": _3,
          "azure-mobile": _3,
          "cloudapp": _3,
          "azurestaticapps": {
            "$": 2,
            "succ": {
              "centralus": _3,
              "eastasia": _3,
              "eastus2": _3,
              "westeurope": _3,
              "westus2": _3
            }
          },
          "dnsup": _3,
          "hicam": _3,
          "now-dns": _3,
          "ownip": _3,
          "vpndns": _3,
          "eating-organic": _3,
          "mydissent": _3,
          "myeffect": _3,
          "mymediapc": _3,
          "mypsx": _3,
          "mysecuritycamera": _3,
          "nhlfan": _3,
          "no-ip": _3,
          "pgafan": _3,
          "privatizehealthinsurance": _3,
          "bounceme": _3,
          "ddns": _3,
          "redirectme": _3,
          "serveblog": _3,
          "serveminecraft": _3,
          "sytes": _3,
          "cloudycluster": _3,
          "ovh": {
            "$": 0,
            "succ": {
              "webpaas": _5,
              "hosting": _5
            }
          },
          "bar0": _3,
          "bar1": _3,
          "bar2": _3,
          "rackmaze": _3,
          "schokokeks": _3,
          "firewall-gateway": _3,
          "seidat": _3,
          "senseering": _3,
          "siteleaf": _3,
          "vps-host": {
            "$": 2,
            "succ": {
              "jelastic": {
                "$": 0,
                "succ": {
                  "atl": _3,
                  "njs": _3,
                  "ric": _3
                }
              }
            }
          },
          "myspreadshop": _3,
          "srcf": {
            "$": 0,
            "succ": {
              "soc": _3,
              "user": _3
            }
          },
          "supabase": _3,
          "dsmynas": _3,
          "familyds": _3,
          "tailscale": {
            "$": 0,
            "succ": {
              "beta": _3
            }
          },
          "ts": _3,
          "torproject": {
            "$": 2,
            "succ": {
              "pages": _3
            }
          },
          "fastblog": _3,
          "reserve-online": _3,
          "community-pro": _3,
          "meinforum": _3,
          "yandexcloud": {
            "$": 2,
            "succ": {
              "storage": _3,
              "website": _3
            }
          },
          "za": _3
        }
      },
      "nf": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "per": _2,
          "rec": _2,
          "web": _2,
          "arts": _2,
          "firm": _2,
          "info": _2,
          "other": _2,
          "store": _2
        }
      },
      "ng": {
        "$": 1,
        "succ": {
          "com": _6,
          "edu": _2,
          "gov": _2,
          "i": _2,
          "mil": _2,
          "mobi": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "sch": _2,
          "col": _3,
          "firm": _3,
          "gen": _3,
          "ltd": _3,
          "ngo": _3
        }
      },
      "ni": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _2,
          "com": _2,
          "edu": _2,
          "gob": _2,
          "in": _2,
          "info": _2,
          "int": _2,
          "mil": _2,
          "net": _2,
          "nom": _2,
          "org": _2,
          "web": _2
        }
      },
      "nl": {
        "$": 1,
        "succ": {
          "amsw": _3,
          "virtueeldomein": _3,
          "co": _3,
          "hosting-cluster": _3,
          "blogspot": _3,
          "khplay": _3,
          "myspreadshop": _3,
          "transurl": _5,
          "cistron": _3,
          "demon": _3
        }
      },
      "no": {
        "$": 1,
        "succ": {
          "fhs": _2,
          "vgs": _2,
          "fylkesbibl": _2,
          "folkebibl": _2,
          "museum": _2,
          "idrett": _2,
          "priv": _2,
          "mil": _2,
          "stat": _2,
          "dep": _2,
          "kommune": _2,
          "herad": _2,
          "aa": _30,
          "ah": _30,
          "bu": _30,
          "fm": _30,
          "hl": _30,
          "hm": _30,
          "jan-mayen": _30,
          "mr": _30,
          "nl": _30,
          "nt": _30,
          "of": _30,
          "ol": _30,
          "oslo": _30,
          "rl": _30,
          "sf": _30,
          "st": _30,
          "svalbard": _30,
          "tm": _30,
          "tr": _30,
          "va": _30,
          "vf": _30,
          "akrehamn": _2,
          "xn--krehamn-dxa": _2,
          "åkrehamn": _2,
          "algard": _2,
          "xn--lgrd-poac": _2,
          "ålgård": _2,
          "arna": _2,
          "brumunddal": _2,
          "bryne": _2,
          "bronnoysund": _2,
          "xn--brnnysund-m8ac": _2,
          "brønnøysund": _2,
          "drobak": _2,
          "xn--drbak-wua": _2,
          "drøbak": _2,
          "egersund": _2,
          "fetsund": _2,
          "floro": _2,
          "xn--flor-jra": _2,
          "florø": _2,
          "fredrikstad": _2,
          "hokksund": _2,
          "honefoss": _2,
          "xn--hnefoss-q1a": _2,
          "hønefoss": _2,
          "jessheim": _2,
          "jorpeland": _2,
          "xn--jrpeland-54a": _2,
          "jørpeland": _2,
          "kirkenes": _2,
          "kopervik": _2,
          "krokstadelva": _2,
          "langevag": _2,
          "xn--langevg-jxa": _2,
          "langevåg": _2,
          "leirvik": _2,
          "mjondalen": _2,
          "xn--mjndalen-64a": _2,
          "mjøndalen": _2,
          "mo-i-rana": _2,
          "mosjoen": _2,
          "xn--mosjen-eya": _2,
          "mosjøen": _2,
          "nesoddtangen": _2,
          "orkanger": _2,
          "osoyro": _2,
          "xn--osyro-wua": _2,
          "osøyro": _2,
          "raholt": _2,
          "xn--rholt-mra": _2,
          "råholt": _2,
          "sandnessjoen": _2,
          "xn--sandnessjen-ogb": _2,
          "sandnessjøen": _2,
          "skedsmokorset": _2,
          "slattum": _2,
          "spjelkavik": _2,
          "stathelle": _2,
          "stavern": _2,
          "stjordalshalsen": _2,
          "xn--stjrdalshalsen-sqb": _2,
          "stjørdalshalsen": _2,
          "tananger": _2,
          "tranby": _2,
          "vossevangen": _2,
          "afjord": _2,
          "xn--fjord-lra": _2,
          "åfjord": _2,
          "agdenes": _2,
          "al": _2,
          "xn--l-1fa": _2,
          "ål": _2,
          "alesund": _2,
          "xn--lesund-hua": _2,
          "ålesund": _2,
          "alstahaug": _2,
          "alta": _2,
          "xn--lt-liac": _2,
          "áltá": _2,
          "alaheadju": _2,
          "xn--laheadju-7ya": _2,
          "álaheadju": _2,
          "alvdal": _2,
          "amli": _2,
          "xn--mli-tla": _2,
          "åmli": _2,
          "amot": _2,
          "xn--mot-tla": _2,
          "åmot": _2,
          "andebu": _2,
          "andoy": _2,
          "xn--andy-ira": _2,
          "andøy": _2,
          "andasuolo": _2,
          "ardal": _2,
          "xn--rdal-poa": _2,
          "årdal": _2,
          "aremark": _2,
          "arendal": _2,
          "xn--s-1fa": _2,
          "ås": _2,
          "aseral": _2,
          "xn--seral-lra": _2,
          "åseral": _2,
          "asker": _2,
          "askim": _2,
          "askvoll": _2,
          "askoy": _2,
          "xn--asky-ira": _2,
          "askøy": _2,
          "asnes": _2,
          "xn--snes-poa": _2,
          "åsnes": _2,
          "audnedaln": _2,
          "aukra": _2,
          "aure": _2,
          "aurland": _2,
          "aurskog-holand": _2,
          "xn--aurskog-hland-jnb": _2,
          "aurskog-høland": _2,
          "austevoll": _2,
          "austrheim": _2,
          "averoy": _2,
          "xn--avery-yua": _2,
          "averøy": _2,
          "balestrand": _2,
          "ballangen": _2,
          "balat": _2,
          "xn--blt-elab": _2,
          "bálát": _2,
          "balsfjord": _2,
          "bahccavuotna": _2,
          "xn--bhccavuotna-k7a": _2,
          "báhccavuotna": _2,
          "bamble": _2,
          "bardu": _2,
          "beardu": _2,
          "beiarn": _2,
          "bajddar": _2,
          "xn--bjddar-pta": _2,
          "bájddar": _2,
          "baidar": _2,
          "xn--bidr-5nac": _2,
          "báidár": _2,
          "berg": _2,
          "bergen": _2,
          "berlevag": _2,
          "xn--berlevg-jxa": _2,
          "berlevåg": _2,
          "bearalvahki": _2,
          "xn--bearalvhki-y4a": _2,
          "bearalváhki": _2,
          "bindal": _2,
          "birkenes": _2,
          "bjarkoy": _2,
          "xn--bjarky-fya": _2,
          "bjarkøy": _2,
          "bjerkreim": _2,
          "bjugn": _2,
          "bodo": _2,
          "xn--bod-2na": _2,
          "bodø": _2,
          "badaddja": _2,
          "xn--bdddj-mrabd": _2,
          "bådåddjå": _2,
          "budejju": _2,
          "bokn": _2,
          "bremanger": _2,
          "bronnoy": _2,
          "xn--brnny-wuac": _2,
          "brønnøy": _2,
          "bygland": _2,
          "bykle": _2,
          "barum": _2,
          "xn--brum-voa": _2,
          "bærum": _2,
          "telemark": {
            "$": 0,
            "succ": {
              "bo": _2,
              "xn--b-5ga": _2,
              "bø": _2
            }
          },
          "nordland": {
            "$": 0,
            "succ": {
              "bo": _2,
              "xn--b-5ga": _2,
              "bø": _2,
              "heroy": _2,
              "xn--hery-ira": _2,
              "herøy": _2
            }
          },
          "bievat": _2,
          "xn--bievt-0qa": _2,
          "bievát": _2,
          "bomlo": _2,
          "xn--bmlo-gra": _2,
          "bømlo": _2,
          "batsfjord": _2,
          "xn--btsfjord-9za": _2,
          "båtsfjord": _2,
          "bahcavuotna": _2,
          "xn--bhcavuotna-s4a": _2,
          "báhcavuotna": _2,
          "dovre": _2,
          "drammen": _2,
          "drangedal": _2,
          "dyroy": _2,
          "xn--dyry-ira": _2,
          "dyrøy": _2,
          "donna": _2,
          "xn--dnna-gra": _2,
          "dønna": _2,
          "eid": _2,
          "eidfjord": _2,
          "eidsberg": _2,
          "eidskog": _2,
          "eidsvoll": _2,
          "eigersund": _2,
          "elverum": _2,
          "enebakk": _2,
          "engerdal": _2,
          "etne": _2,
          "etnedal": _2,
          "evenes": _2,
          "evenassi": _2,
          "xn--eveni-0qa01ga": _2,
          "evenášši": _2,
          "evje-og-hornnes": _2,
          "farsund": _2,
          "fauske": _2,
          "fuossko": _2,
          "fuoisku": _2,
          "fedje": _2,
          "fet": _2,
          "finnoy": _2,
          "xn--finny-yua": _2,
          "finnøy": _2,
          "fitjar": _2,
          "fjaler": _2,
          "fjell": _2,
          "flakstad": _2,
          "flatanger": _2,
          "flekkefjord": _2,
          "flesberg": _2,
          "flora": _2,
          "fla": _2,
          "xn--fl-zia": _2,
          "flå": _2,
          "folldal": _2,
          "forsand": _2,
          "fosnes": _2,
          "frei": _2,
          "frogn": _2,
          "froland": _2,
          "frosta": _2,
          "frana": _2,
          "xn--frna-woa": _2,
          "fræna": _2,
          "froya": _2,
          "xn--frya-hra": _2,
          "frøya": _2,
          "fusa": _2,
          "fyresdal": _2,
          "forde": _2,
          "xn--frde-gra": _2,
          "førde": _2,
          "gamvik": _2,
          "gangaviika": _2,
          "xn--ggaviika-8ya47h": _2,
          "gáŋgaviika": _2,
          "gaular": _2,
          "gausdal": _2,
          "gildeskal": _2,
          "xn--gildeskl-g0a": _2,
          "gildeskål": _2,
          "giske": _2,
          "gjemnes": _2,
          "gjerdrum": _2,
          "gjerstad": _2,
          "gjesdal": _2,
          "gjovik": _2,
          "xn--gjvik-wua": _2,
          "gjøvik": _2,
          "gloppen": _2,
          "gol": _2,
          "gran": _2,
          "grane": _2,
          "granvin": _2,
          "gratangen": _2,
          "grimstad": _2,
          "grong": _2,
          "kraanghke": _2,
          "xn--kranghke-b0a": _2,
          "kråanghke": _2,
          "grue": _2,
          "gulen": _2,
          "hadsel": _2,
          "halden": _2,
          "halsa": _2,
          "hamar": _2,
          "hamaroy": _2,
          "habmer": _2,
          "xn--hbmer-xqa": _2,
          "hábmer": _2,
          "hapmir": _2,
          "xn--hpmir-xqa": _2,
          "hápmir": _2,
          "hammerfest": _2,
          "hammarfeasta": _2,
          "xn--hmmrfeasta-s4ac": _2,
          "hámmárfeasta": _2,
          "haram": _2,
          "hareid": _2,
          "harstad": _2,
          "hasvik": _2,
          "aknoluokta": _2,
          "xn--koluokta-7ya57h": _2,
          "ákŋoluokta": _2,
          "hattfjelldal": _2,
          "aarborte": _2,
          "haugesund": _2,
          "hemne": _2,
          "hemnes": _2,
          "hemsedal": _2,
          "more-og-romsdal": {
            "$": 0,
            "succ": {
              "heroy": _2,
              "sande": _2
            }
          },
          "xn--mre-og-romsdal-qqb": {
            "$": 0,
            "succ": {
              "xn--hery-ira": _2,
              "sande": _2
            }
          },
          "møre-og-romsdal": {
            "$": 0,
            "succ": {
              "herøy": _2,
              "sande": _2
            }
          },
          "hitra": _2,
          "hjartdal": _2,
          "hjelmeland": _2,
          "hobol": _2,
          "xn--hobl-ira": _2,
          "hobøl": _2,
          "hof": _2,
          "hol": _2,
          "hole": _2,
          "holmestrand": _2,
          "holtalen": _2,
          "xn--holtlen-hxa": _2,
          "holtålen": _2,
          "hornindal": _2,
          "horten": _2,
          "hurdal": _2,
          "hurum": _2,
          "hvaler": _2,
          "hyllestad": _2,
          "hagebostad": _2,
          "xn--hgebostad-g3a": _2,
          "hægebostad": _2,
          "hoyanger": _2,
          "xn--hyanger-q1a": _2,
          "høyanger": _2,
          "hoylandet": _2,
          "xn--hylandet-54a": _2,
          "høylandet": _2,
          "ha": _2,
          "xn--h-2fa": _2,
          "hå": _2,
          "ibestad": _2,
          "inderoy": _2,
          "xn--indery-fya": _2,
          "inderøy": _2,
          "iveland": _2,
          "jevnaker": _2,
          "jondal": _2,
          "jolster": _2,
          "xn--jlster-bya": _2,
          "jølster": _2,
          "karasjok": _2,
          "karasjohka": _2,
          "xn--krjohka-hwab49j": _2,
          "kárášjohka": _2,
          "karlsoy": _2,
          "galsa": _2,
          "xn--gls-elac": _2,
          "gálsá": _2,
          "karmoy": _2,
          "xn--karmy-yua": _2,
          "karmøy": _2,
          "kautokeino": _2,
          "guovdageaidnu": _2,
          "klepp": _2,
          "klabu": _2,
          "xn--klbu-woa": _2,
          "klæbu": _2,
          "kongsberg": _2,
          "kongsvinger": _2,
          "kragero": _2,
          "xn--krager-gya": _2,
          "kragerø": _2,
          "kristiansand": _2,
          "kristiansund": _2,
          "krodsherad": _2,
          "xn--krdsherad-m8a": _2,
          "krødsherad": _2,
          "kvalsund": _2,
          "rahkkeravju": _2,
          "xn--rhkkervju-01af": _2,
          "ráhkkerávju": _2,
          "kvam": _2,
          "kvinesdal": _2,
          "kvinnherad": _2,
          "kviteseid": _2,
          "kvitsoy": _2,
          "xn--kvitsy-fya": _2,
          "kvitsøy": _2,
          "kvafjord": _2,
          "xn--kvfjord-nxa": _2,
          "kvæfjord": _2,
          "giehtavuoatna": _2,
          "kvanangen": _2,
          "xn--kvnangen-k0a": _2,
          "kvænangen": _2,
          "navuotna": _2,
          "xn--nvuotna-hwa": _2,
          "návuotna": _2,
          "kafjord": _2,
          "xn--kfjord-iua": _2,
          "kåfjord": _2,
          "gaivuotna": _2,
          "xn--givuotna-8ya": _2,
          "gáivuotna": _2,
          "larvik": _2,
          "lavangen": _2,
          "lavagis": _2,
          "loabat": _2,
          "xn--loabt-0qa": _2,
          "loabát": _2,
          "lebesby": _2,
          "davvesiida": _2,
          "leikanger": _2,
          "leirfjord": _2,
          "leka": _2,
          "leksvik": _2,
          "lenvik": _2,
          "leangaviika": _2,
          "xn--leagaviika-52b": _2,
          "leaŋgaviika": _2,
          "lesja": _2,
          "levanger": _2,
          "lier": _2,
          "lierne": _2,
          "lillehammer": _2,
          "lillesand": _2,
          "lindesnes": _2,
          "lindas": _2,
          "xn--linds-pra": _2,
          "lindås": _2,
          "lom": _2,
          "loppa": _2,
          "lahppi": _2,
          "xn--lhppi-xqa": _2,
          "láhppi": _2,
          "lund": _2,
          "lunner": _2,
          "luroy": _2,
          "xn--lury-ira": _2,
          "lurøy": _2,
          "luster": _2,
          "lyngdal": _2,
          "lyngen": _2,
          "ivgu": _2,
          "lardal": _2,
          "lerdal": _2,
          "xn--lrdal-sra": _2,
          "lærdal": _2,
          "lodingen": _2,
          "xn--ldingen-q1a": _2,
          "lødingen": _2,
          "lorenskog": _2,
          "xn--lrenskog-54a": _2,
          "lørenskog": _2,
          "loten": _2,
          "xn--lten-gra": _2,
          "løten": _2,
          "malvik": _2,
          "masoy": _2,
          "xn--msy-ula0h": _2,
          "måsøy": _2,
          "muosat": _2,
          "xn--muost-0qa": _2,
          "muosát": _2,
          "mandal": _2,
          "marker": _2,
          "marnardal": _2,
          "masfjorden": _2,
          "meland": _2,
          "meldal": _2,
          "melhus": _2,
          "meloy": _2,
          "xn--mely-ira": _2,
          "meløy": _2,
          "meraker": _2,
          "xn--merker-kua": _2,
          "meråker": _2,
          "moareke": _2,
          "xn--moreke-jua": _2,
          "moåreke": _2,
          "midsund": _2,
          "midtre-gauldal": _2,
          "modalen": _2,
          "modum": _2,
          "molde": _2,
          "moskenes": _2,
          "moss": _2,
          "mosvik": _2,
          "malselv": _2,
          "xn--mlselv-iua": _2,
          "målselv": _2,
          "malatvuopmi": _2,
          "xn--mlatvuopmi-s4a": _2,
          "málatvuopmi": _2,
          "namdalseid": _2,
          "aejrie": _2,
          "namsos": _2,
          "namsskogan": _2,
          "naamesjevuemie": _2,
          "xn--nmesjevuemie-tcba": _2,
          "nååmesjevuemie": _2,
          "laakesvuemie": _2,
          "nannestad": _2,
          "narvik": _2,
          "narviika": _2,
          "naustdal": _2,
          "nedre-eiker": _2,
          "akershus": _31,
          "buskerud": _31,
          "nesna": _2,
          "nesodden": _2,
          "nesseby": _2,
          "unjarga": _2,
          "xn--unjrga-rta": _2,
          "unjárga": _2,
          "nesset": _2,
          "nissedal": _2,
          "nittedal": _2,
          "nord-aurdal": _2,
          "nord-fron": _2,
          "nord-odal": _2,
          "norddal": _2,
          "nordkapp": _2,
          "davvenjarga": _2,
          "xn--davvenjrga-y4a": _2,
          "davvenjárga": _2,
          "nordre-land": _2,
          "nordreisa": _2,
          "raisa": _2,
          "xn--risa-5na": _2,
          "ráisa": _2,
          "nore-og-uvdal": _2,
          "notodden": _2,
          "naroy": _2,
          "xn--nry-yla5g": _2,
          "nærøy": _2,
          "notteroy": _2,
          "xn--nttery-byae": _2,
          "nøtterøy": _2,
          "odda": _2,
          "oksnes": _2,
          "xn--ksnes-uua": _2,
          "øksnes": _2,
          "oppdal": _2,
          "oppegard": _2,
          "xn--oppegrd-ixa": _2,
          "oppegård": _2,
          "orkdal": _2,
          "orland": _2,
          "xn--rland-uua": _2,
          "ørland": _2,
          "orskog": _2,
          "xn--rskog-uua": _2,
          "ørskog": _2,
          "orsta": _2,
          "xn--rsta-fra": _2,
          "ørsta": _2,
          "hedmark": {
            "$": 0,
            "succ": {
              "os": _2,
              "valer": _2,
              "xn--vler-qoa": _2,
              "våler": _2
            }
          },
          "hordaland": {
            "$": 0,
            "succ": {
              "os": _2
            }
          },
          "osen": _2,
          "osteroy": _2,
          "xn--ostery-fya": _2,
          "osterøy": _2,
          "ostre-toten": _2,
          "xn--stre-toten-zcb": _2,
          "østre-toten": _2,
          "overhalla": _2,
          "ovre-eiker": _2,
          "xn--vre-eiker-k8a": _2,
          "øvre-eiker": _2,
          "oyer": _2,
          "xn--yer-zna": _2,
          "øyer": _2,
          "oygarden": _2,
          "xn--ygarden-p1a": _2,
          "øygarden": _2,
          "oystre-slidre": _2,
          "xn--ystre-slidre-ujb": _2,
          "øystre-slidre": _2,
          "porsanger": _2,
          "porsangu": _2,
          "xn--porsgu-sta26f": _2,
          "porsáŋgu": _2,
          "porsgrunn": _2,
          "radoy": _2,
          "xn--rady-ira": _2,
          "radøy": _2,
          "rakkestad": _2,
          "rana": _2,
          "ruovat": _2,
          "randaberg": _2,
          "rauma": _2,
          "rendalen": _2,
          "rennebu": _2,
          "rennesoy": _2,
          "xn--rennesy-v1a": _2,
          "rennesøy": _2,
          "rindal": _2,
          "ringebu": _2,
          "ringerike": _2,
          "ringsaker": _2,
          "rissa": _2,
          "risor": _2,
          "xn--risr-ira": _2,
          "risør": _2,
          "roan": _2,
          "rollag": _2,
          "rygge": _2,
          "ralingen": _2,
          "xn--rlingen-mxa": _2,
          "rælingen": _2,
          "rodoy": _2,
          "xn--rdy-0nab": _2,
          "rødøy": _2,
          "romskog": _2,
          "xn--rmskog-bya": _2,
          "rømskog": _2,
          "roros": _2,
          "xn--rros-gra": _2,
          "røros": _2,
          "rost": _2,
          "xn--rst-0na": _2,
          "røst": _2,
          "royken": _2,
          "xn--ryken-vua": _2,
          "røyken": _2,
          "royrvik": _2,
          "xn--ryrvik-bya": _2,
          "røyrvik": _2,
          "rade": _2,
          "xn--rde-ula": _2,
          "råde": _2,
          "salangen": _2,
          "siellak": _2,
          "saltdal": _2,
          "salat": _2,
          "xn--slt-elab": _2,
          "sálát": _2,
          "xn--slat-5na": _2,
          "sálat": _2,
          "samnanger": _2,
          "vestfold": {
            "$": 0,
            "succ": {
              "sande": _2
            }
          },
          "sandefjord": _2,
          "sandnes": _2,
          "sandoy": _2,
          "xn--sandy-yua": _2,
          "sandøy": _2,
          "sarpsborg": _2,
          "sauda": _2,
          "sauherad": _2,
          "sel": _2,
          "selbu": _2,
          "selje": _2,
          "seljord": _2,
          "sigdal": _2,
          "siljan": _2,
          "sirdal": _2,
          "skaun": _2,
          "skedsmo": _2,
          "ski": _2,
          "skien": _2,
          "skiptvet": _2,
          "skjervoy": _2,
          "xn--skjervy-v1a": _2,
          "skjervøy": _2,
          "skierva": _2,
          "xn--skierv-uta": _2,
          "skiervá": _2,
          "skjak": _2,
          "xn--skjk-soa": _2,
          "skjåk": _2,
          "skodje": _2,
          "skanland": _2,
          "xn--sknland-fxa": _2,
          "skånland": _2,
          "skanit": _2,
          "xn--sknit-yqa": _2,
          "skánit": _2,
          "smola": _2,
          "xn--smla-hra": _2,
          "smøla": _2,
          "snillfjord": _2,
          "snasa": _2,
          "xn--snsa-roa": _2,
          "snåsa": _2,
          "snoasa": _2,
          "snaase": _2,
          "xn--snase-nra": _2,
          "snåase": _2,
          "sogndal": _2,
          "sokndal": _2,
          "sola": _2,
          "solund": _2,
          "songdalen": _2,
          "sortland": _2,
          "spydeberg": _2,
          "stange": _2,
          "stavanger": _2,
          "steigen": _2,
          "steinkjer": _2,
          "stjordal": _2,
          "xn--stjrdal-s1a": _2,
          "stjørdal": _2,
          "stokke": _2,
          "stor-elvdal": _2,
          "stord": _2,
          "stordal": _2,
          "storfjord": _2,
          "omasvuotna": _2,
          "strand": _2,
          "stranda": _2,
          "stryn": _2,
          "sula": _2,
          "suldal": _2,
          "sund": _2,
          "sunndal": _2,
          "surnadal": _2,
          "sveio": _2,
          "svelvik": _2,
          "sykkylven": _2,
          "sogne": _2,
          "xn--sgne-gra": _2,
          "søgne": _2,
          "somna": _2,
          "xn--smna-gra": _2,
          "sømna": _2,
          "sondre-land": _2,
          "xn--sndre-land-0cb": _2,
          "søndre-land": _2,
          "sor-aurdal": _2,
          "xn--sr-aurdal-l8a": _2,
          "sør-aurdal": _2,
          "sor-fron": _2,
          "xn--sr-fron-q1a": _2,
          "sør-fron": _2,
          "sor-odal": _2,
          "xn--sr-odal-q1a": _2,
          "sør-odal": _2,
          "sor-varanger": _2,
          "xn--sr-varanger-ggb": _2,
          "sør-varanger": _2,
          "matta-varjjat": _2,
          "xn--mtta-vrjjat-k7af": _2,
          "mátta-várjjat": _2,
          "sorfold": _2,
          "xn--srfold-bya": _2,
          "sørfold": _2,
          "sorreisa": _2,
          "xn--srreisa-q1a": _2,
          "sørreisa": _2,
          "sorum": _2,
          "xn--srum-gra": _2,
          "sørum": _2,
          "tana": _2,
          "deatnu": _2,
          "time": _2,
          "tingvoll": _2,
          "tinn": _2,
          "tjeldsund": _2,
          "dielddanuorri": _2,
          "tjome": _2,
          "xn--tjme-hra": _2,
          "tjøme": _2,
          "tokke": _2,
          "tolga": _2,
          "torsken": _2,
          "tranoy": _2,
          "xn--trany-yua": _2,
          "tranøy": _2,
          "tromso": _2,
          "xn--troms-zua": _2,
          "tromsø": _2,
          "tromsa": _2,
          "romsa": _2,
          "trondheim": _2,
          "troandin": _2,
          "trysil": _2,
          "trana": _2,
          "xn--trna-woa": _2,
          "træna": _2,
          "trogstad": _2,
          "xn--trgstad-r1a": _2,
          "trøgstad": _2,
          "tvedestrand": _2,
          "tydal": _2,
          "tynset": _2,
          "tysfjord": _2,
          "divtasvuodna": _2,
          "divttasvuotna": _2,
          "tysnes": _2,
          "tysvar": _2,
          "xn--tysvr-vra": _2,
          "tysvær": _2,
          "tonsberg": _2,
          "xn--tnsberg-q1a": _2,
          "tønsberg": _2,
          "ullensaker": _2,
          "ullensvang": _2,
          "ulvik": _2,
          "utsira": _2,
          "vadso": _2,
          "xn--vads-jra": _2,
          "vadsø": _2,
          "cahcesuolo": _2,
          "xn--hcesuolo-7ya35b": _2,
          "čáhcesuolo": _2,
          "vaksdal": _2,
          "valle": _2,
          "vang": _2,
          "vanylven": _2,
          "vardo": _2,
          "xn--vard-jra": _2,
          "vardø": _2,
          "varggat": _2,
          "xn--vrggt-xqad": _2,
          "várggát": _2,
          "vefsn": _2,
          "vaapste": _2,
          "vega": _2,
          "vegarshei": _2,
          "xn--vegrshei-c0a": _2,
          "vegårshei": _2,
          "vennesla": _2,
          "verdal": _2,
          "verran": _2,
          "vestby": _2,
          "vestnes": _2,
          "vestre-slidre": _2,
          "vestre-toten": _2,
          "vestvagoy": _2,
          "xn--vestvgy-ixa6o": _2,
          "vestvågøy": _2,
          "vevelstad": _2,
          "vik": _2,
          "vikna": _2,
          "vindafjord": _2,
          "volda": _2,
          "voss": _2,
          "varoy": _2,
          "xn--vry-yla5g": _2,
          "værøy": _2,
          "vagan": _2,
          "xn--vgan-qoa": _2,
          "vågan": _2,
          "voagat": _2,
          "vagsoy": _2,
          "xn--vgsy-qoa0j": _2,
          "vågsøy": _2,
          "vaga": _2,
          "xn--vg-yiab": _2,
          "vågå": _2,
          "ostfold": {
            "$": 0,
            "succ": {
              "valer": _2
            }
          },
          "xn--stfold-9xa": {
            "$": 0,
            "succ": {
              "xn--vler-qoa": _2
            }
          },
          "østfold": {
            "$": 0,
            "succ": {
              "våler": _2
            }
          },
          "co": _3,
          "blogspot": _3,
          "myspreadshop": _3
        }
      },
      "np": _8,
      "nr": _26,
      "nu": {
        "$": 1,
        "succ": {
          "merseine": _3,
          "mine": _3,
          "shacknet": _3,
          "enterprisecloud": _3
        }
      },
      "nz": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _6,
          "cri": _2,
          "geek": _2,
          "gen": _2,
          "govt": _2,
          "health": _2,
          "iwi": _2,
          "kiwi": _2,
          "maori": _2,
          "mil": _2,
          "xn--mori-qsa": _2,
          "māori": _2,
          "net": _2,
          "org": _2,
          "parliament": _2,
          "school": _2
        }
      },
      "om": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "med": _2,
          "museum": _2,
          "net": _2,
          "org": _2,
          "pro": _2
        }
      },
      "onion": _2,
      "org": {
        "$": 1,
        "succ": {
          "altervista": _3,
          "amune": {
            "$": 0,
            "succ": {
              "tele": _3
            }
          },
          "pimienta": _3,
          "poivron": _3,
          "potager": _3,
          "sweetpepper": _3,
          "ae": _3,
          "us": _3,
          "certmgr": _3,
          "cdn77": {
            "$": 0,
            "succ": {
              "c": _3,
              "rsc": _3
            }
          },
          "cdn77-secure": {
            "$": 0,
            "succ": {
              "origin": {
                "$": 0,
                "succ": {
                  "ssl": _3
                }
              }
            }
          },
          "cloudns": _3,
          "duckdns": _3,
          "tunk": _3,
          "dyndns": {
            "$": 2,
            "succ": {
              "go": _3,
              "home": _3
            }
          },
          "blogdns": _3,
          "blogsite": _3,
          "boldlygoingnowhere": _3,
          "dnsalias": _3,
          "dnsdojo": _3,
          "doesntexist": _3,
          "dontexist": _3,
          "doomdns": _3,
          "dvrdns": _3,
          "dynalias": _3,
          "endofinternet": _3,
          "endoftheinternet": _3,
          "from-me": _3,
          "game-host": _3,
          "gotdns": _3,
          "hobby-site": _3,
          "homedns": _3,
          "homeftp": _3,
          "homelinux": _3,
          "homeunix": _3,
          "is-a-bruinsfan": _3,
          "is-a-candidate": _3,
          "is-a-celticsfan": _3,
          "is-a-chef": _3,
          "is-a-geek": _3,
          "is-a-knight": _3,
          "is-a-linux-user": _3,
          "is-a-patsfan": _3,
          "is-a-soxfan": _3,
          "is-found": _3,
          "is-lost": _3,
          "is-saved": _3,
          "is-very-bad": _3,
          "is-very-evil": _3,
          "is-very-good": _3,
          "is-very-nice": _3,
          "is-very-sweet": _3,
          "isa-geek": _3,
          "kicks-ass": _3,
          "misconfused": _3,
          "podzone": _3,
          "readmyblog": _3,
          "selfip": _3,
          "sellsyourhome": _3,
          "servebbs": _3,
          "serveftp": _3,
          "servegame": _3,
          "stuff-4-sale": _3,
          "webhop": _3,
          "ddnss": _3,
          "accesscam": _3,
          "camdvr": _3,
          "freeddns": _3,
          "mywire": _3,
          "webredirect": _3,
          "eu": {
            "$": 2,
            "succ": {
              "al": _3,
              "asso": _3,
              "at": _3,
              "au": _3,
              "be": _3,
              "bg": _3,
              "ca": _3,
              "cd": _3,
              "ch": _3,
              "cn": _3,
              "cy": _3,
              "cz": _3,
              "de": _3,
              "dk": _3,
              "edu": _3,
              "ee": _3,
              "es": _3,
              "fi": _3,
              "fr": _3,
              "gr": _3,
              "hr": _3,
              "hu": _3,
              "ie": _3,
              "il": _3,
              "in": _3,
              "int": _3,
              "is": _3,
              "it": _3,
              "jp": _3,
              "kr": _3,
              "lt": _3,
              "lu": _3,
              "lv": _3,
              "mc": _3,
              "me": _3,
              "mk": _3,
              "mt": _3,
              "my": _3,
              "net": _3,
              "ng": _3,
              "nl": _3,
              "no": _3,
              "nz": _3,
              "paris": _3,
              "pl": _3,
              "pt": _3,
              "q-a": _3,
              "ro": _3,
              "ru": _3,
              "se": _3,
              "si": _3,
              "sk": _3,
              "tr": _3,
              "uk": _3,
              "us": _3
            }
          },
          "twmail": _3,
          "fedorainfracloud": _3,
          "fedorapeople": _3,
          "fedoraproject": {
            "$": 0,
            "succ": {
              "cloud": _3,
              "os": _16,
              "stg": {
                "$": 0,
                "succ": {
                  "os": _16
                }
              }
            }
          },
          "freedesktop": _3,
          "hepforge": _3,
          "in-dsl": _3,
          "in-vpn": _3,
          "js": _3,
          "barsy": _3,
          "mayfirst": _3,
          "mozilla-iot": _3,
          "bmoattachments": _3,
          "dynserv": _3,
          "now-dns": _3,
          "cable-modem": _3,
          "collegefan": _3,
          "couchpotatofries": _3,
          "mlbfan": _3,
          "mysecuritycamera": _3,
          "nflfan": _3,
          "read-books": _3,
          "ufcfan": _3,
          "hopto": _3,
          "myftp": _3,
          "no-ip": _3,
          "zapto": _3,
          "httpbin": _3,
          "pubtls": _3,
          "my-firewall": _3,
          "myfirewall": _3,
          "spdns": _3,
          "small-web": _3,
          "dsmynas": _3,
          "familyds": _3,
          "edugit": _3,
          "tuxfamily": _3,
          "diskstation": _3,
          "hk": _3,
          "wmflabs": _3,
          "toolforge": _3,
          "wmcloud": _3,
          "za": _3
        }
      },
      "pa": {
        "$": 1,
        "succ": {
          "ac": _2,
          "gob": _2,
          "com": _2,
          "org": _2,
          "sld": _2,
          "edu": _2,
          "net": _2,
          "ing": _2,
          "abo": _2,
          "med": _2,
          "nom": _2
        }
      },
      "pe": {
        "$": 1,
        "succ": {
          "edu": _2,
          "gob": _2,
          "nom": _2,
          "mil": _2,
          "org": _2,
          "com": _2,
          "net": _2,
          "blogspot": _3
        }
      },
      "pf": {
        "$": 1,
        "succ": {
          "com": _2,
          "org": _2,
          "edu": _2
        }
      },
      "pg": _8,
      "ph": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "edu": _2,
          "ngo": _2,
          "mil": _2,
          "i": _2
        }
      },
      "pk": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "edu": _2,
          "org": _2,
          "fam": _2,
          "biz": _2,
          "web": _2,
          "gov": _2,
          "gob": _2,
          "gok": _2,
          "gon": _2,
          "gop": _2,
          "gos": _2,
          "info": _2
        }
      },
      "pl": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "aid": _2,
          "agro": _2,
          "atm": _2,
          "auto": _2,
          "biz": _2,
          "edu": _2,
          "gmina": _2,
          "gsm": _2,
          "info": _2,
          "mail": _2,
          "miasta": _2,
          "media": _2,
          "mil": _2,
          "nieruchomosci": _2,
          "nom": _2,
          "pc": _2,
          "powiat": _2,
          "priv": _2,
          "realestate": _2,
          "rel": _2,
          "sex": _2,
          "shop": _2,
          "sklep": _2,
          "sos": _2,
          "szkola": _2,
          "targi": _2,
          "tm": _2,
          "tourism": _2,
          "travel": _2,
          "turystyka": _2,
          "gov": {
            "$": 1,
            "succ": {
              "ap": _2,
              "ic": _2,
              "is": _2,
              "us": _2,
              "kmpsp": _2,
              "kppsp": _2,
              "kwpsp": _2,
              "psp": _2,
              "wskr": _2,
              "kwp": _2,
              "mw": _2,
              "ug": _2,
              "um": _2,
              "umig": _2,
              "ugim": _2,
              "upow": _2,
              "uw": _2,
              "starostwo": _2,
              "pa": _2,
              "po": _2,
              "psse": _2,
              "pup": _2,
              "rzgw": _2,
              "sa": _2,
              "so": _2,
              "sr": _2,
              "wsa": _2,
              "sko": _2,
              "uzs": _2,
              "wiih": _2,
              "winb": _2,
              "pinb": _2,
              "wios": _2,
              "witd": _2,
              "wzmiuw": _2,
              "piw": _2,
              "wiw": _2,
              "griw": _2,
              "wif": _2,
              "oum": _2,
              "sdn": _2,
              "zp": _2,
              "uppo": _2,
              "mup": _2,
              "wuoz": _2,
              "konsulat": _2,
              "oirm": _2
            }
          },
          "augustow": _2,
          "babia-gora": _2,
          "bedzin": _2,
          "beskidy": _2,
          "bialowieza": _2,
          "bialystok": _2,
          "bielawa": _2,
          "bieszczady": _2,
          "boleslawiec": _2,
          "bydgoszcz": _2,
          "bytom": _2,
          "cieszyn": _2,
          "czeladz": _2,
          "czest": _2,
          "dlugoleka": _2,
          "elblag": _2,
          "elk": _2,
          "glogow": _2,
          "gniezno": _2,
          "gorlice": _2,
          "grajewo": _2,
          "ilawa": _2,
          "jaworzno": _2,
          "jelenia-gora": _2,
          "jgora": _2,
          "kalisz": _2,
          "kazimierz-dolny": _2,
          "karpacz": _2,
          "kartuzy": _2,
          "kaszuby": _2,
          "katowice": _2,
          "kepno": _2,
          "ketrzyn": _2,
          "klodzko": _2,
          "kobierzyce": _2,
          "kolobrzeg": _2,
          "konin": _2,
          "konskowola": _2,
          "kutno": _2,
          "lapy": _2,
          "lebork": _2,
          "legnica": _2,
          "lezajsk": _2,
          "limanowa": _2,
          "lomza": _2,
          "lowicz": _2,
          "lubin": _2,
          "lukow": _2,
          "malbork": _2,
          "malopolska": _2,
          "mazowsze": _2,
          "mazury": _2,
          "mielec": _2,
          "mielno": _2,
          "mragowo": _2,
          "naklo": _2,
          "nowaruda": _2,
          "nysa": _2,
          "olawa": _2,
          "olecko": _2,
          "olkusz": _2,
          "olsztyn": _2,
          "opoczno": _2,
          "opole": _2,
          "ostroda": _2,
          "ostroleka": _2,
          "ostrowiec": _2,
          "ostrowwlkp": _2,
          "pila": _2,
          "pisz": _2,
          "podhale": _2,
          "podlasie": _2,
          "polkowice": _2,
          "pomorze": _2,
          "pomorskie": _2,
          "prochowice": _2,
          "pruszkow": _2,
          "przeworsk": _2,
          "pulawy": _2,
          "radom": _2,
          "rawa-maz": _2,
          "rybnik": _2,
          "rzeszow": _2,
          "sanok": _2,
          "sejny": _2,
          "slask": _2,
          "slupsk": _2,
          "sosnowiec": _2,
          "stalowa-wola": _2,
          "skoczow": _2,
          "starachowice": _2,
          "stargard": _2,
          "suwalki": _2,
          "swidnica": _2,
          "swiebodzin": _2,
          "swinoujscie": _2,
          "szczecin": _2,
          "szczytno": _2,
          "tarnobrzeg": _2,
          "tgory": _2,
          "turek": _2,
          "tychy": _2,
          "ustka": _2,
          "walbrzych": _2,
          "warmia": _2,
          "warszawa": _2,
          "waw": _2,
          "wegrow": _2,
          "wielun": _2,
          "wlocl": _2,
          "wloclawek": _2,
          "wodzislaw": _2,
          "wolomin": _2,
          "wroclaw": _2,
          "zachpomor": _2,
          "zagan": _2,
          "zarow": _2,
          "zgora": _2,
          "zgorzelec": _2,
          "beep": _3,
          "ecommerce-shop": _3,
          "shoparena": _3,
          "homesklep": _3,
          "sdscloud": _3,
          "unicloud": _3,
          "krasnik": _3,
          "leczna": _3,
          "lubartow": _3,
          "lublin": _3,
          "poniatowa": _3,
          "swidnik": _3,
          "co": _3,
          "art": _3,
          "gliwice": _3,
          "krakow": _3,
          "poznan": _3,
          "wroc": _3,
          "zakopane": _3,
          "myspreadshop": _3,
          "gda": _3,
          "gdansk": _3,
          "gdynia": _3,
          "med": _3,
          "sopot": _3
        }
      },
      "pm": {
        "$": 1,
        "succ": {
          "own": _3
        }
      },
      "pn": {
        "$": 1,
        "succ": {
          "gov": _2,
          "co": _2,
          "org": _2,
          "edu": _2,
          "net": _2
        }
      },
      "post": _2,
      "pr": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "edu": _2,
          "isla": _2,
          "pro": _2,
          "biz": _2,
          "info": _2,
          "name": _2,
          "est": _2,
          "prof": _2,
          "ac": _2
        }
      },
      "pro": {
        "$": 1,
        "succ": {
          "aaa": _2,
          "aca": _2,
          "acct": _2,
          "avocat": _2,
          "bar": _2,
          "cpa": _2,
          "eng": _2,
          "jur": _2,
          "law": _2,
          "med": _2,
          "recht": _2,
          "cloudns": _3,
          "dnstrace": {
            "$": 0,
            "succ": {
              "bci": _3
            }
          },
          "barsy": _3
        }
      },
      "ps": {
        "$": 1,
        "succ": {
          "edu": _2,
          "gov": _2,
          "sec": _2,
          "plo": _2,
          "com": _2,
          "org": _2,
          "net": _2
        }
      },
      "pt": {
        "$": 1,
        "succ": {
          "net": _2,
          "gov": _2,
          "org": _2,
          "edu": _2,
          "int": _2,
          "publ": _2,
          "com": _2,
          "nome": _2,
          "blogspot": _3
        }
      },
      "pw": {
        "$": 1,
        "succ": {
          "co": _2,
          "ne": _2,
          "or": _2,
          "ed": _2,
          "go": _2,
          "belau": _2,
          "cloudns": _3,
          "x443": _3
        }
      },
      "py": {
        "$": 1,
        "succ": {
          "com": _2,
          "coop": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2
        }
      },
      "qa": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "sch": _2,
          "blogspot": _3
        }
      },
      "re": {
        "$": 1,
        "succ": {
          "asso": _2,
          "com": _2,
          "nom": _2,
          "blogspot": _3
        }
      },
      "ro": {
        "$": 1,
        "succ": {
          "arts": _2,
          "com": _2,
          "firm": _2,
          "info": _2,
          "nom": _2,
          "nt": _2,
          "org": _2,
          "rec": _2,
          "store": _2,
          "tm": _2,
          "www": _2,
          "co": _3,
          "shop": _3,
          "blogspot": _3,
          "barsy": _3
        }
      },
      "rs": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "edu": _2,
          "gov": _2,
          "in": _2,
          "org": _2,
          "brendly": {
            "$": 0,
            "succ": {
              "shop": _3
            }
          },
          "blogspot": _3,
          "ua": _3,
          "ox": _3
        }
      },
      "ru": {
        "$": 1,
        "succ": {
          "ac": _3,
          "edu": _3,
          "gov": _3,
          "int": _3,
          "mil": _3,
          "test": _3,
          "eurodir": _3,
          "adygeya": _3,
          "bashkiria": _3,
          "bir": _3,
          "cbg": _3,
          "com": _3,
          "dagestan": _3,
          "grozny": _3,
          "kalmykia": _3,
          "kustanai": _3,
          "marine": _3,
          "mordovia": _3,
          "msk": _3,
          "mytis": _3,
          "nalchik": _3,
          "nov": _3,
          "pyatigorsk": _3,
          "spb": _3,
          "vladikavkaz": _3,
          "vladimir": _3,
          "blogspot": _3,
          "na4u": _3,
          "mircloud": _3,
          "regruhosting": _20,
          "myjino": {
            "$": 2,
            "succ": {
              "hosting": _5,
              "landing": _5,
              "spectrum": _5,
              "vps": _5
            }
          },
          "cldmail": {
            "$": 0,
            "succ": {
              "hb": _3
            }
          },
          "mcdir": {
            "$": 2,
            "succ": {
              "vps": _3
            }
          },
          "mcpre": _3,
          "net": _3,
          "org": _3,
          "pp": _3,
          "lk3": _3,
          "ras": _3
        }
      },
      "rw": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "coop": _2,
          "gov": _2,
          "mil": _2,
          "net": _2,
          "org": _2
        }
      },
      "sa": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "med": _2,
          "pub": _2,
          "edu": _2,
          "sch": _2
        }
      },
      "sb": _4,
      "sc": _4,
      "sd": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "med": _2,
          "tv": _2,
          "gov": _2,
          "info": _2
        }
      },
      "se": {
        "$": 1,
        "succ": {
          "a": _2,
          "ac": _2,
          "b": _2,
          "bd": _2,
          "brand": _2,
          "c": _2,
          "d": _2,
          "e": _2,
          "f": _2,
          "fh": _2,
          "fhsk": _2,
          "fhv": _2,
          "g": _2,
          "h": _2,
          "i": _2,
          "k": _2,
          "komforb": _2,
          "kommunalforbund": _2,
          "komvux": _2,
          "l": _2,
          "lanbib": _2,
          "m": _2,
          "n": _2,
          "naturbruksgymn": _2,
          "o": _2,
          "org": _2,
          "p": _2,
          "parti": _2,
          "pp": _2,
          "press": _2,
          "r": _2,
          "s": _2,
          "t": _2,
          "tm": _2,
          "u": _2,
          "w": _2,
          "x": _2,
          "y": _2,
          "z": _2,
          "com": _3,
          "blogspot": _3,
          "conf": _3,
          "iopsys": _3,
          "itcouldbewor": _3,
          "myspreadshop": _3,
          "paba": {
            "$": 0,
            "succ": {
              "su": _3
            }
          }
        }
      },
      "sg": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "edu": _2,
          "per": _2,
          "blogspot": _3,
          "enscaled": _3
        }
      },
      "sh": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "gov": _2,
          "org": _2,
          "mil": _2,
          "bip": _3,
          "hashbang": _3,
          "platform": {
            "$": 0,
            "succ": {
              "bc": _3,
              "ent": _3,
              "eu": _3,
              "us": _3
            }
          },
          "now": _3,
          "vxl": _3,
          "wedeploy": _3
        }
      },
      "si": {
        "$": 1,
        "succ": {
          "gitapp": _3,
          "gitpage": _3,
          "blogspot": _3
        }
      },
      "sj": _2,
      "sk": _6,
      "sl": _4,
      "sm": _2,
      "sn": {
        "$": 1,
        "succ": {
          "art": _2,
          "com": _2,
          "edu": _2,
          "gouv": _2,
          "org": _2,
          "perso": _2,
          "univ": _2,
          "blogspot": _3
        }
      },
      "so": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "me": _2,
          "net": _2,
          "org": _2,
          "sch": _3
        }
      },
      "sr": _2,
      "ss": {
        "$": 1,
        "succ": {
          "biz": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "me": _2,
          "net": _2,
          "org": _2,
          "sch": _2
        }
      },
      "st": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "consulado": _2,
          "edu": _2,
          "embaixada": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "principe": _2,
          "saotome": _2,
          "store": _2,
          "noho": _3
        }
      },
      "su": {
        "$": 1,
        "succ": {
          "abkhazia": _3,
          "adygeya": _3,
          "aktyubinsk": _3,
          "arkhangelsk": _3,
          "armenia": _3,
          "ashgabad": _3,
          "azerbaijan": _3,
          "balashov": _3,
          "bashkiria": _3,
          "bryansk": _3,
          "bukhara": _3,
          "chimkent": _3,
          "dagestan": _3,
          "east-kazakhstan": _3,
          "exnet": _3,
          "georgia": _3,
          "grozny": _3,
          "ivanovo": _3,
          "jambyl": _3,
          "kalmykia": _3,
          "kaluga": _3,
          "karacol": _3,
          "karaganda": _3,
          "karelia": _3,
          "khakassia": _3,
          "krasnodar": _3,
          "kurgan": _3,
          "kustanai": _3,
          "lenug": _3,
          "mangyshlak": _3,
          "mordovia": _3,
          "msk": _3,
          "murmansk": _3,
          "nalchik": _3,
          "navoi": _3,
          "north-kazakhstan": _3,
          "nov": _3,
          "obninsk": _3,
          "penza": _3,
          "pokrovsk": _3,
          "sochi": _3,
          "spb": _3,
          "tashkent": _3,
          "termez": _3,
          "togliatti": _3,
          "troitsk": _3,
          "tselinograd": _3,
          "tula": _3,
          "tuva": _3,
          "vladikavkaz": _3,
          "vladimir": _3,
          "vologda": _3
        }
      },
      "sv": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gob": _2,
          "org": _2,
          "red": _2
        }
      },
      "sx": _7,
      "sy": _25,
      "sz": {
        "$": 1,
        "succ": {
          "co": _2,
          "ac": _2,
          "org": _2
        }
      },
      "tc": {
        "$": 1,
        "succ": {
          "ch": _3,
          "me": _3,
          "we": _3
        }
      },
      "td": _6,
      "tel": _2,
      "tf": _2,
      "tg": _2,
      "th": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "go": _2,
          "in": _2,
          "mi": _2,
          "net": _2,
          "or": _2,
          "online": _3,
          "shop": _3
        }
      },
      "tj": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _2,
          "com": _2,
          "edu": _2,
          "go": _2,
          "gov": _2,
          "int": _2,
          "mil": _2,
          "name": _2,
          "net": _2,
          "nic": _2,
          "org": _2,
          "test": _2,
          "web": _2
        }
      },
      "tk": _2,
      "tl": _7,
      "tm": {
        "$": 1,
        "succ": {
          "com": _2,
          "co": _2,
          "org": _2,
          "net": _2,
          "nom": _2,
          "gov": _2,
          "mil": _2,
          "edu": _2
        }
      },
      "tn": {
        "$": 1,
        "succ": {
          "com": _2,
          "ens": _2,
          "fin": _2,
          "gov": _2,
          "ind": _2,
          "info": _2,
          "intl": _2,
          "mincom": _2,
          "nat": _2,
          "net": _2,
          "org": _2,
          "perso": _2,
          "tourism": _2,
          "orangecloud": _3
        }
      },
      "to": {
        "$": 1,
        "succ": {
          "611": _3,
          "com": _2,
          "gov": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "mil": _2,
          "oya": _3,
          "rdv": _3,
          "vpnplus": _3,
          "quickconnect": {
            "$": 0,
            "succ": {
              "direct": _3
            }
          },
          "nyan": _3
        }
      },
      "tr": {
        "$": 1,
        "succ": {
          "av": _2,
          "bbs": _2,
          "bel": _2,
          "biz": _2,
          "com": _6,
          "dr": _2,
          "edu": _2,
          "gen": _2,
          "gov": _2,
          "info": _2,
          "mil": _2,
          "k12": _2,
          "kep": _2,
          "name": _2,
          "net": _2,
          "org": _2,
          "pol": _2,
          "tel": _2,
          "tsk": _2,
          "tv": _2,
          "web": _2,
          "nc": _7
        }
      },
      "tt": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "org": _2,
          "net": _2,
          "biz": _2,
          "info": _2,
          "pro": _2,
          "int": _2,
          "coop": _2,
          "jobs": _2,
          "mobi": _2,
          "travel": _2,
          "museum": _2,
          "aero": _2,
          "name": _2,
          "gov": _2,
          "edu": _2
        }
      },
      "tv": {
        "$": 1,
        "succ": {
          "dyndns": _3,
          "better-than": _3,
          "on-the-web": _3,
          "worse-than": _3
        }
      },
      "tw": {
        "$": 1,
        "succ": {
          "edu": _2,
          "gov": _2,
          "mil": _2,
          "com": {
            "$": 1,
            "succ": {
              "mymailer": _3
            }
          },
          "net": _2,
          "org": _2,
          "idv": _2,
          "game": _2,
          "ebiz": _2,
          "club": _2,
          "xn--zf0ao64a": _2,
          "網路": _2,
          "xn--uc0atv": _2,
          "組織": _2,
          "xn--czrw28b": _2,
          "商業": _2,
          "url": _3,
          "blogspot": _3
        }
      },
      "tz": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "go": _2,
          "hotel": _2,
          "info": _2,
          "me": _2,
          "mil": _2,
          "mobi": _2,
          "ne": _2,
          "or": _2,
          "sc": _2,
          "tv": _2
        }
      },
      "ua": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "gov": _2,
          "in": _2,
          "net": _2,
          "org": _2,
          "cherkassy": _2,
          "cherkasy": _2,
          "chernigov": _2,
          "chernihiv": _2,
          "chernivtsi": _2,
          "chernovtsy": _2,
          "ck": _2,
          "cn": _2,
          "cr": _2,
          "crimea": _2,
          "cv": _2,
          "dn": _2,
          "dnepropetrovsk": _2,
          "dnipropetrovsk": _2,
          "donetsk": _2,
          "dp": _2,
          "if": _2,
          "ivano-frankivsk": _2,
          "kh": _2,
          "kharkiv": _2,
          "kharkov": _2,
          "kherson": _2,
          "khmelnitskiy": _2,
          "khmelnytskyi": _2,
          "kiev": _2,
          "kirovograd": _2,
          "km": _2,
          "kr": _2,
          "krym": _2,
          "ks": _2,
          "kv": _2,
          "kyiv": _2,
          "lg": _2,
          "lt": _2,
          "lugansk": _2,
          "lutsk": _2,
          "lv": _2,
          "lviv": _2,
          "mk": _2,
          "mykolaiv": _2,
          "nikolaev": _2,
          "od": _2,
          "odesa": _2,
          "odessa": _2,
          "pl": _2,
          "poltava": _2,
          "rivne": _2,
          "rovno": _2,
          "rv": _2,
          "sb": _2,
          "sebastopol": _2,
          "sevastopol": _2,
          "sm": _2,
          "sumy": _2,
          "te": _2,
          "ternopil": _2,
          "uz": _2,
          "uzhgorod": _2,
          "vinnica": _2,
          "vinnytsia": _2,
          "vn": _2,
          "volyn": _2,
          "yalta": _2,
          "zaporizhzhe": _2,
          "zaporizhzhia": _2,
          "zhitomir": _2,
          "zhytomyr": _2,
          "zp": _2,
          "zt": _2,
          "cc": _3,
          "inf": _3,
          "ltd": _3,
          "cx": _3,
          "biz": _3,
          "co": _3,
          "pp": _3,
          "v": _3
        }
      },
      "ug": {
        "$": 1,
        "succ": {
          "co": _2,
          "or": _2,
          "ac": _2,
          "sc": _2,
          "go": _2,
          "ne": _2,
          "com": _2,
          "org": _2,
          "blogspot": _3
        }
      },
      "uk": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": {
            "$": 1,
            "succ": {
              "bytemark": {
                "$": 0,
                "succ": {
                  "dh": _3,
                  "vm": _3
                }
              },
              "blogspot": _3,
              "layershift": _19,
              "barsy": _3,
              "barsyonline": _3,
              "retrosnub": _24,
              "nh-serv": _3,
              "no-ip": _3,
              "wellbeingzone": _3,
              "adimo": _3,
              "myspreadshop": _3,
              "gwiddle": _3
            }
          },
          "gov": {
            "$": 1,
            "succ": {
              "service": _3,
              "homeoffice": _3
            }
          },
          "ltd": _2,
          "me": _2,
          "net": _2,
          "nhs": _2,
          "org": {
            "$": 1,
            "succ": {
              "glug": _3,
              "lug": _3,
              "lugs": _3,
              "affinitylottery": _3,
              "raffleentry": _3,
              "weeklylottery": _3
            }
          },
          "plc": _2,
          "police": _2,
          "sch": _8,
          "conn": _3,
          "copro": _3,
          "hosp": _3,
          "pymnt": _3,
          "barsy": _3
        }
      },
      "us": {
        "$": 1,
        "succ": {
          "dni": _2,
          "fed": _2,
          "isa": _2,
          "kids": _2,
          "nsn": _2,
          "ak": _32,
          "al": _32,
          "ar": _32,
          "as": _32,
          "az": _32,
          "ca": _32,
          "co": _32,
          "ct": _32,
          "dc": _32,
          "de": {
            "$": 1,
            "succ": {
              "k12": _2,
              "cc": _2,
              "lib": _3
            }
          },
          "fl": _32,
          "ga": _32,
          "gu": _32,
          "hi": _33,
          "ia": _32,
          "id": _32,
          "il": _32,
          "in": _32,
          "ks": _32,
          "ky": _32,
          "la": _32,
          "ma": {
            "$": 1,
            "succ": {
              "k12": {
                "$": 1,
                "succ": {
                  "pvt": _2,
                  "chtr": _2,
                  "paroch": _2
                }
              },
              "cc": _2,
              "lib": _2
            }
          },
          "md": _32,
          "me": _32,
          "mi": {
            "$": 1,
            "succ": {
              "k12": _2,
              "cc": _2,
              "lib": _2,
              "ann-arbor": _2,
              "cog": _2,
              "dst": _2,
              "eaton": _2,
              "gen": _2,
              "mus": _2,
              "tec": _2,
              "washtenaw": _2
            }
          },
          "mn": _32,
          "mo": _32,
          "ms": _32,
          "mt": _32,
          "nc": _32,
          "nd": _33,
          "ne": _32,
          "nh": _32,
          "nj": _32,
          "nm": _32,
          "nv": _32,
          "ny": _32,
          "oh": _32,
          "ok": _32,
          "or": _32,
          "pa": _32,
          "pr": _32,
          "ri": _33,
          "sc": _32,
          "sd": _33,
          "tn": _32,
          "tx": _32,
          "ut": _32,
          "vi": _32,
          "vt": _32,
          "va": _32,
          "wa": _32,
          "wi": _32,
          "wv": {
            "$": 1,
            "succ": {
              "cc": _2
            }
          },
          "wy": _32,
          "graphox": _3,
          "cloudns": _3,
          "drud": _3,
          "is-by": _3,
          "land-4-sale": _3,
          "stuff-4-sale": _3,
          "enscaled": {
            "$": 0,
            "succ": {
              "phx": _3
            }
          },
          "mircloud": _3,
          "freeddns": _3,
          "golffan": _3,
          "noip": _3,
          "pointto": _3,
          "platterp": _3
        }
      },
      "uy": {
        "$": 1,
        "succ": {
          "com": _6,
          "edu": _2,
          "gub": _2,
          "mil": _2,
          "net": _2,
          "org": _2
        }
      },
      "uz": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "net": _2,
          "org": _2
        }
      },
      "va": _2,
      "vc": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "mil": _2,
          "edu": _2,
          "gv": {
            "$": 2,
            "succ": {
              "d": _3
            }
          },
          "0e": _3
        }
      },
      "ve": {
        "$": 1,
        "succ": {
          "arts": _2,
          "bib": _2,
          "co": _2,
          "com": _2,
          "e12": _2,
          "edu": _2,
          "firm": _2,
          "gob": _2,
          "gov": _2,
          "info": _2,
          "int": _2,
          "mil": _2,
          "net": _2,
          "nom": _2,
          "org": _2,
          "rar": _2,
          "rec": _2,
          "store": _2,
          "tec": _2,
          "web": _2
        }
      },
      "vg": {
        "$": 1,
        "succ": {
          "at": _3
        }
      },
      "vi": {
        "$": 1,
        "succ": {
          "co": _2,
          "com": _2,
          "k12": _2,
          "net": _2,
          "org": _2
        }
      },
      "vn": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "edu": _2,
          "gov": _2,
          "int": _2,
          "ac": _2,
          "biz": _2,
          "info": _2,
          "name": _2,
          "pro": _2,
          "health": _2,
          "blogspot": _3
        }
      },
      "vu": {
        "$": 1,
        "succ": {
          "com": _2,
          "edu": _2,
          "net": _2,
          "org": _2,
          "cn": _3,
          "blog": _3,
          "dev": _3,
          "me": _3
        }
      },
      "wf": _2,
      "ws": {
        "$": 1,
        "succ": {
          "com": _2,
          "net": _2,
          "org": _2,
          "gov": _2,
          "edu": _2,
          "advisor": _5,
          "cloud66": _3,
          "dyndns": _3,
          "mypets": _3
        }
      },
      "yt": {
        "$": 1,
        "succ": {
          "org": _3
        }
      },
      "xn--mgbaam7a8h": _2,
      "امارات": _2,
      "xn--y9a3aq": _2,
      "հայ": _2,
      "xn--54b7fta0cc": _2,
      "বাংলা": _2,
      "xn--90ae": _2,
      "бг": _2,
      "xn--mgbcpq6gpa1a": _2,
      "البحرين": _2,
      "xn--90ais": _2,
      "бел": _2,
      "xn--fiqs8s": _2,
      "中国": _2,
      "xn--fiqz9s": _2,
      "中國": _2,
      "xn--lgbbat1ad8j": _2,
      "الجزائر": _2,
      "xn--wgbh1c": _2,
      "مصر": _2,
      "xn--e1a4c": _2,
      "ею": _2,
      "xn--qxa6a": _2,
      "ευ": _2,
      "xn--mgbah1a3hjkrd": _2,
      "موريتانيا": _2,
      "xn--node": _2,
      "გე": _2,
      "xn--qxam": _2,
      "ελ": _2,
      "xn--j6w193g": {
        "$": 1,
        "succ": {
          "xn--55qx5d": _2,
          "xn--wcvs22d": _2,
          "xn--mxtq1m": _2,
          "xn--gmqw5a": _2,
          "xn--od0alg": _2,
          "xn--uc0atv": _2
        }
      },
      "香港": {
        "$": 1,
        "succ": {
          "公司": _2,
          "教育": _2,
          "政府": _2,
          "個人": _2,
          "網絡": _2,
          "組織": _2
        }
      },
      "xn--2scrj9c": _2,
      "ಭಾರತ": _2,
      "xn--3hcrj9c": _2,
      "ଭାରତ": _2,
      "xn--45br5cyl": _2,
      "ভাৰত": _2,
      "xn--h2breg3eve": _2,
      "भारतम्": _2,
      "xn--h2brj9c8c": _2,
      "भारोत": _2,
      "xn--mgbgu82a": _2,
      "ڀارت": _2,
      "xn--rvc1e0am3e": _2,
      "ഭാരതം": _2,
      "xn--h2brj9c": _2,
      "भारत": _2,
      "xn--mgbbh1a": _2,
      "بارت": _2,
      "xn--mgbbh1a71e": _2,
      "بھارت": _2,
      "xn--fpcrj9c3d": _2,
      "భారత్": _2,
      "xn--gecrj9c": _2,
      "ભારત": _2,
      "xn--s9brj9c": _2,
      "ਭਾਰਤ": _2,
      "xn--45brj9c": _2,
      "ভারত": _2,
      "xn--xkc2dl3a5ee0h": _2,
      "இந்தியா": _2,
      "xn--mgba3a4f16a": _2,
      "ایران": _2,
      "xn--mgba3a4fra": _2,
      "ايران": _2,
      "xn--mgbtx2b": _2,
      "عراق": _2,
      "xn--mgbayh7gpa": _2,
      "الاردن": _2,
      "xn--3e0b707e": _2,
      "한국": _2,
      "xn--80ao21a": _2,
      "қаз": _2,
      "xn--q7ce6a": _2,
      "ລາວ": _2,
      "xn--fzc2c9e2c": _2,
      "ලංකා": _2,
      "xn--xkc2al3hye2a": _2,
      "இலங்கை": _2,
      "xn--mgbc0a9azcg": _2,
      "المغرب": _2,
      "xn--d1alf": _2,
      "мкд": _2,
      "xn--l1acc": _2,
      "мон": _2,
      "xn--mix891f": _2,
      "澳門": _2,
      "xn--mix082f": _2,
      "澳门": _2,
      "xn--mgbx4cd0ab": _2,
      "مليسيا": _2,
      "xn--mgb9awbf": _2,
      "عمان": _2,
      "xn--mgbai9azgqp6j": _2,
      "پاکستان": _2,
      "xn--mgbai9a5eva00b": _2,
      "پاكستان": _2,
      "xn--ygbi2ammx": _2,
      "فلسطين": _2,
      "xn--90a3ac": {
        "$": 1,
        "succ": {
          "xn--o1ac": _2,
          "xn--c1avg": _2,
          "xn--90azh": _2,
          "xn--d1at": _2,
          "xn--o1ach": _2,
          "xn--80au": _2
        }
      },
      "срб": {
        "$": 1,
        "succ": {
          "пр": _2,
          "орг": _2,
          "обр": _2,
          "од": _2,
          "упр": _2,
          "ак": _2
        }
      },
      "xn--p1ai": _2,
      "рф": _2,
      "xn--wgbl6a": _2,
      "قطر": _2,
      "xn--mgberp4a5d4ar": _2,
      "السعودية": _2,
      "xn--mgberp4a5d4a87g": _2,
      "السعودیة": _2,
      "xn--mgbqly7c0a67fbc": _2,
      "السعودیۃ": _2,
      "xn--mgbqly7cvafr": _2,
      "السعوديه": _2,
      "xn--mgbpl2fh": _2,
      "سودان": _2,
      "xn--yfro4i67o": _2,
      "新加坡": _2,
      "xn--clchc0ea0b2g2a9gcd": _2,
      "சிங்கப்பூர்": _2,
      "xn--ogbpf8fl": _2,
      "سورية": _2,
      "xn--mgbtf8fl": _2,
      "سوريا": _2,
      "xn--o3cw4h": {
        "$": 1,
        "succ": {
          "xn--12c1fe0br": _2,
          "xn--12co0c3b4eva": _2,
          "xn--h3cuzk1di": _2,
          "xn--o3cyx2a": _2,
          "xn--m3ch0j3a": _2,
          "xn--12cfi8ixb8l": _2
        }
      },
      "ไทย": {
        "$": 1,
        "succ": {
          "ศึกษา": _2,
          "ธุรกิจ": _2,
          "รัฐบาล": _2,
          "ทหาร": _2,
          "เน็ต": _2,
          "องค์กร": _2
        }
      },
      "xn--pgbs0dh": _2,
      "تونس": _2,
      "xn--kpry57d": _2,
      "台灣": _2,
      "xn--kprw13d": _2,
      "台湾": _2,
      "xn--nnx388a": _2,
      "臺灣": _2,
      "xn--j1amh": _2,
      "укр": _2,
      "xn--mgb2ddes": _2,
      "اليمن": _2,
      "xxx": _2,
      "ye": _25,
      "za": {
        "$": 0,
        "succ": {
          "ac": _2,
          "agric": _2,
          "alt": _2,
          "co": _6,
          "edu": _2,
          "gov": _2,
          "grondar": _2,
          "law": _2,
          "mil": _2,
          "net": _2,
          "ngo": _2,
          "nic": _2,
          "nis": _2,
          "nom": _2,
          "org": _2,
          "school": _2,
          "tm": _2,
          "web": _2
        }
      },
      "zm": {
        "$": 1,
        "succ": {
          "ac": _2,
          "biz": _2,
          "co": _2,
          "com": _2,
          "edu": _2,
          "gov": _2,
          "info": _2,
          "mil": _2,
          "net": _2,
          "org": _2,
          "sch": _2
        }
      },
      "zw": {
        "$": 1,
        "succ": {
          "ac": _2,
          "co": _2,
          "gov": _2,
          "mil": _2,
          "org": _2
        }
      },
      "aaa": _2,
      "aarp": _2,
      "abarth": _2,
      "abb": _2,
      "abbott": _2,
      "abbvie": _2,
      "abc": _2,
      "able": _2,
      "abogado": _2,
      "abudhabi": _2,
      "academy": {
        "$": 1,
        "succ": {
          "official": _3
        }
      },
      "accenture": _2,
      "accountant": _2,
      "accountants": _2,
      "aco": _2,
      "actor": _2,
      "adac": _2,
      "ads": _2,
      "adult": _2,
      "aeg": _2,
      "aetna": _2,
      "afamilycompany": _2,
      "afl": _2,
      "africa": _2,
      "agakhan": _2,
      "agency": _2,
      "aig": _2,
      "airbus": _2,
      "airforce": _2,
      "airtel": _2,
      "akdn": _2,
      "alfaromeo": _2,
      "alibaba": _2,
      "alipay": _2,
      "allfinanz": _2,
      "allstate": _2,
      "ally": _2,
      "alsace": _2,
      "alstom": _2,
      "amazon": _2,
      "americanexpress": _2,
      "americanfamily": _2,
      "amex": _2,
      "amfam": _2,
      "amica": _2,
      "amsterdam": _2,
      "analytics": _2,
      "android": _2,
      "anquan": _2,
      "anz": _2,
      "aol": _2,
      "apartments": _2,
      "app": {
        "$": 1,
        "succ": {
          "clerk": _3,
          "clerkstage": _3,
          "wnext": _3,
          "platform0": _3,
          "ondigitalocean": _3,
          "edgecompute": _3,
          "fireweb": _3,
          "framer": _3,
          "run": {
            "$": 2,
            "succ": {
              "a": _3
            }
          },
          "web": _3,
          "hasura": _3,
          "loginline": _3,
          "netlify": _3,
          "developer": _5,
          "noop": _3,
          "northflank": _5,
          "telebit": _3,
          "vercel": _3,
          "bookonline": _3
        }
      },
      "apple": _2,
      "aquarelle": _2,
      "arab": _2,
      "aramco": _2,
      "archi": _2,
      "army": _2,
      "art": _2,
      "arte": _2,
      "asda": _2,
      "associates": _2,
      "athleta": _2,
      "attorney": _2,
      "auction": _2,
      "audi": _2,
      "audible": _2,
      "audio": _2,
      "auspost": _2,
      "author": _2,
      "auto": _2,
      "autos": _2,
      "avianca": _2,
      "aws": _2,
      "axa": _2,
      "azure": _2,
      "baby": _2,
      "baidu": _2,
      "banamex": _2,
      "bananarepublic": _2,
      "band": _2,
      "bank": _2,
      "bar": _2,
      "barcelona": _2,
      "barclaycard": _2,
      "barclays": _2,
      "barefoot": _2,
      "bargains": _2,
      "baseball": _2,
      "basketball": {
        "$": 1,
        "succ": {
          "aus": _3,
          "nz": _3
        }
      },
      "bauhaus": _2,
      "bayern": _2,
      "bbc": _2,
      "bbt": _2,
      "bbva": _2,
      "bcg": _2,
      "bcn": _2,
      "beats": _2,
      "beauty": _2,
      "beer": _2,
      "bentley": _2,
      "berlin": _2,
      "best": _2,
      "bestbuy": _2,
      "bet": _2,
      "bharti": _2,
      "bible": _2,
      "bid": _2,
      "bike": _2,
      "bing": _2,
      "bingo": _2,
      "bio": _2,
      "black": _2,
      "blackfriday": _2,
      "blockbuster": _2,
      "blog": _2,
      "bloomberg": _2,
      "blue": _2,
      "bms": _2,
      "bmw": _2,
      "bnpparibas": _2,
      "boats": _2,
      "boehringer": _2,
      "bofa": _2,
      "bom": _2,
      "bond": _2,
      "boo": _2,
      "book": _2,
      "booking": _2,
      "bosch": _2,
      "bostik": _2,
      "boston": _2,
      "bot": _2,
      "boutique": _2,
      "box": _2,
      "bradesco": _2,
      "bridgestone": _2,
      "broadway": _2,
      "broker": _2,
      "brother": _2,
      "brussels": _2,
      "budapest": _2,
      "bugatti": _2,
      "build": _2,
      "builders": {
        "$": 1,
        "succ": {
          "cloudsite": _3
        }
      },
      "business": _10,
      "buy": _2,
      "buzz": _2,
      "bzh": _2,
      "cab": _2,
      "cafe": _2,
      "cal": _2,
      "call": _2,
      "calvinklein": _2,
      "cam": _2,
      "camera": _2,
      "camp": _2,
      "cancerresearch": _2,
      "canon": _2,
      "capetown": _2,
      "capital": _2,
      "capitalone": _2,
      "car": _2,
      "caravan": _2,
      "cards": _2,
      "care": _2,
      "career": _2,
      "careers": _2,
      "cars": _2,
      "casa": {
        "$": 1,
        "succ": {
          "nabu": {
            "$": 0,
            "succ": {
              "ui": _3
            }
          }
        }
      },
      "case": _2,
      "cash": _2,
      "casino": _2,
      "catering": _2,
      "catholic": _2,
      "cba": _2,
      "cbn": _2,
      "cbre": _2,
      "cbs": _2,
      "center": _2,
      "ceo": _2,
      "cern": _2,
      "cfa": _2,
      "cfd": _2,
      "chanel": _2,
      "channel": _2,
      "charity": _2,
      "chase": _2,
      "chat": _2,
      "cheap": _2,
      "chintai": _2,
      "christmas": _2,
      "chrome": _2,
      "church": _2,
      "cipriani": _2,
      "circle": _2,
      "cisco": _2,
      "citadel": _2,
      "citi": _2,
      "citic": _2,
      "city": _2,
      "cityeats": _2,
      "claims": _2,
      "cleaning": _2,
      "click": _2,
      "clinic": _2,
      "clinique": _2,
      "clothing": _2,
      "cloud": {
        "$": 1,
        "succ": {
          "banzai": _5,
          "elementor": _3,
          "statics": _5,
          "axarnet": {
            "$": 0,
            "succ": {
              "es-1": _3
            }
          },
          "diadem": _3,
          "jelastic": {
            "$": 0,
            "succ": {
              "vip": _3
            }
          },
          "jele": _3,
          "jenv-aruba": {
            "$": 0,
            "succ": {
              "aruba": {
                "$": 0,
                "succ": {
                  "eur": {
                    "$": 0,
                    "succ": {
                      "it1": _3
                    }
                  }
                }
              },
              "it1": _3
            }
          },
          "keliweb": {
            "$": 2,
            "succ": {
              "cs": _3
            }
          },
          "oxa": {
            "$": 2,
            "succ": {
              "tn": _3,
              "uk": _3
            }
          },
          "primetel": {
            "$": 2,
            "succ": {
              "uk": _3
            }
          },
          "reclaim": {
            "$": 0,
            "succ": {
              "ca": _3,
              "uk": _3,
              "us": _3
            }
          },
          "trendhosting": {
            "$": 0,
            "succ": {
              "ch": _3,
              "de": _3
            }
          },
          "jotelulu": _3,
          "kuleuven": _3,
          "linkyard": _3,
          "magentosite": _5,
          "perspecta": _3,
          "vapor": _3,
          "on-rancher": _5,
          "sensiosite": _5,
          "trafficplex": _3,
          "urown": _3,
          "voorloper": _3
        }
      },
      "club": {
        "$": 1,
        "succ": {
          "cloudns": _3,
          "jele": _3,
          "barsy": _3,
          "pony": _3
        }
      },
      "clubmed": _2,
      "coach": _2,
      "codes": {
        "$": 1,
        "succ": {
          "owo": _5
        }
      },
      "coffee": _2,
      "college": _2,
      "cologne": _2,
      "comcast": _2,
      "commbank": _2,
      "community": {
        "$": 1,
        "succ": {
          "nog": _3,
          "ravendb": _3,
          "myforum": _3
        }
      },
      "company": _2,
      "compare": _2,
      "computer": _2,
      "comsec": _2,
      "condos": _2,
      "construction": _2,
      "consulting": _2,
      "contact": _2,
      "contractors": _2,
      "cooking": _2,
      "cookingchannel": _2,
      "cool": {
        "$": 1,
        "succ": {
          "elementor": _3,
          "de": _3
        }
      },
      "corsica": _2,
      "country": _2,
      "coupon": _2,
      "coupons": _2,
      "courses": _2,
      "cpa": _2,
      "credit": _2,
      "creditcard": _2,
      "creditunion": _2,
      "cricket": _2,
      "crown": _2,
      "crs": _2,
      "cruise": _2,
      "cruises": _2,
      "csc": _2,
      "cuisinella": _2,
      "cymru": _2,
      "cyou": _2,
      "dabur": _2,
      "dad": _2,
      "dance": _2,
      "data": _2,
      "date": _2,
      "dating": _2,
      "datsun": _2,
      "day": _2,
      "dclk": _2,
      "dds": _2,
      "deal": _2,
      "dealer": _2,
      "deals": _2,
      "degree": _2,
      "delivery": _2,
      "dell": _2,
      "deloitte": _2,
      "delta": _2,
      "democrat": _2,
      "dental": _2,
      "dentist": _2,
      "desi": _2,
      "design": {
        "$": 1,
        "succ": {
          "bss": _3
        }
      },
      "dev": {
        "$": 1,
        "succ": {
          "lcl": _5,
          "lclstage": _5,
          "stg": _5,
          "stgstage": _5,
          "pages": _3,
          "workers": _3,
          "curv": _3,
          "deno": _3,
          "deno-staging": _3,
          "fly": _3,
          "githubpreview": _3,
          "gateway": _5,
          "iserv": _3,
          "loginline": _3,
          "mediatech": _3,
          "platter-app": _3,
          "shiftcrypto": _3,
          "vercel": _3,
          "webhare": _5
        }
      },
      "dhl": _2,
      "diamonds": _2,
      "diet": _2,
      "digital": {
        "$": 1,
        "succ": {
          "cloudapps": {
            "$": 2,
            "succ": {
              "london": _3
            }
          }
        }
      },
      "direct": _2,
      "directory": _2,
      "discount": _2,
      "discover": _2,
      "dish": _2,
      "diy": _2,
      "dnp": _2,
      "docs": _2,
      "doctor": _2,
      "dog": _2,
      "domains": _2,
      "dot": _2,
      "download": _2,
      "drive": _2,
      "dtv": _2,
      "dubai": _2,
      "duck": _2,
      "dunlop": _2,
      "dupont": _2,
      "durban": _2,
      "dvag": _2,
      "dvr": _2,
      "earth": {
        "$": 1,
        "succ": {
          "dapps": {
            "$": 0,
            "succ": {
              "*": _3,
              "bzz": _5
            }
          }
        }
      },
      "eat": _2,
      "eco": _2,
      "edeka": _2,
      "education": _10,
      "email": _2,
      "emerck": _2,
      "energy": _2,
      "engineer": _2,
      "engineering": _2,
      "enterprises": _2,
      "epson": _2,
      "equipment": _2,
      "ericsson": _2,
      "erni": _2,
      "esq": _2,
      "estate": {
        "$": 1,
        "succ": {
          "compute": _5
        }
      },
      "etisalat": _2,
      "eurovision": _2,
      "eus": {
        "$": 1,
        "succ": {
          "party": _21
        }
      },
      "events": _10,
      "exchange": _2,
      "expert": _2,
      "exposed": _2,
      "express": _2,
      "extraspace": _2,
      "fage": _2,
      "fail": _2,
      "fairwinds": _2,
      "faith": _22,
      "family": _2,
      "fan": _2,
      "fans": _2,
      "farm": {
        "$": 1,
        "succ": {
          "storj": _3
        }
      },
      "farmers": _2,
      "fashion": {
        "$": 1,
        "succ": {
          "of": _3
        }
      },
      "fast": _2,
      "fedex": _2,
      "feedback": _2,
      "ferrari": _2,
      "ferrero": _2,
      "fiat": _2,
      "fidelity": _2,
      "fido": _2,
      "film": _2,
      "final": _2,
      "finance": _2,
      "financial": _10,
      "fire": _2,
      "firestone": _2,
      "firmdale": _2,
      "fish": _2,
      "fishing": _2,
      "fit": _2,
      "fitness": _2,
      "flickr": _2,
      "flights": _2,
      "flir": _2,
      "florist": _2,
      "flowers": _2,
      "fly": _2,
      "foo": _2,
      "food": _2,
      "foodnetwork": _2,
      "football": _2,
      "ford": _2,
      "forex": _2,
      "forsale": _2,
      "forum": _2,
      "foundation": _2,
      "fox": _2,
      "free": _2,
      "fresenius": _2,
      "frl": _2,
      "frogans": _2,
      "frontdoor": _2,
      "frontier": _2,
      "ftr": _2,
      "fujitsu": _2,
      "fun": _2,
      "fund": _2,
      "furniture": _2,
      "futbol": _2,
      "fyi": _2,
      "gal": _2,
      "gallery": _2,
      "gallo": _2,
      "gallup": _2,
      "game": _2,
      "games": _2,
      "gap": _2,
      "garden": _2,
      "gay": _2,
      "gbiz": _2,
      "gdn": {
        "$": 1,
        "succ": {
          "cnpy": _3
        }
      },
      "gea": _2,
      "gent": _2,
      "genting": _2,
      "george": _2,
      "ggee": _2,
      "gift": _2,
      "gifts": _2,
      "gives": _2,
      "giving": _2,
      "glade": _2,
      "glass": _2,
      "gle": _2,
      "global": _2,
      "globo": _2,
      "gmail": _2,
      "gmbh": _2,
      "gmo": _2,
      "gmx": _2,
      "godaddy": _2,
      "gold": _2,
      "goldpoint": _2,
      "golf": _2,
      "goo": _2,
      "goodyear": _2,
      "goog": {
        "$": 1,
        "succ": {
          "cloud": _3,
          "translate": _3,
          "usercontent": _5
        }
      },
      "google": _2,
      "gop": _2,
      "got": _2,
      "grainger": _2,
      "graphics": _2,
      "gratis": _2,
      "green": _2,
      "gripe": _2,
      "grocery": _2,
      "group": {
        "$": 1,
        "succ": {
          "discourse": _3
        }
      },
      "guardian": _2,
      "gucci": _2,
      "guge": _2,
      "guide": _2,
      "guitars": _2,
      "guru": _2,
      "hair": _2,
      "hamburg": _2,
      "hangout": _2,
      "haus": _2,
      "hbo": _2,
      "hdfc": _2,
      "hdfcbank": _2,
      "health": {
        "$": 1,
        "succ": {
          "hra": _3
        }
      },
      "healthcare": _2,
      "help": _2,
      "helsinki": _2,
      "here": _2,
      "hermes": _2,
      "hgtv": _2,
      "hiphop": _2,
      "hisamitsu": _2,
      "hitachi": _2,
      "hiv": _2,
      "hkt": _2,
      "hockey": _2,
      "holdings": _2,
      "holiday": _2,
      "homedepot": _2,
      "homegoods": _2,
      "homes": _2,
      "homesense": _2,
      "honda": _2,
      "horse": _2,
      "hospital": _2,
      "host": {
        "$": 1,
        "succ": {
          "cloudaccess": _3,
          "freesite": _3,
          "fastvps": _3,
          "myfast": _3,
          "tempurl": _3,
          "wpmudev": _3,
          "jele": _3,
          "mircloud": _3,
          "pcloud": _3,
          "half": _3
        }
      },
      "hosting": {
        "$": 1,
        "succ": {
          "opencraft": _3
        }
      },
      "hot": _2,
      "hoteles": _2,
      "hotels": _2,
      "hotmail": _2,
      "house": _2,
      "how": _2,
      "hsbc": _2,
      "hughes": _2,
      "hyatt": _2,
      "hyundai": _2,
      "ibm": _2,
      "icbc": _2,
      "ice": _2,
      "icu": _2,
      "ieee": _2,
      "ifm": _2,
      "ikano": _2,
      "imamat": _2,
      "imdb": _2,
      "immo": _2,
      "immobilien": _2,
      "inc": _2,
      "industries": _2,
      "infiniti": _2,
      "ing": _2,
      "ink": _2,
      "institute": _2,
      "insurance": _2,
      "insure": _2,
      "international": _2,
      "intuit": _2,
      "investments": _2,
      "ipiranga": _2,
      "irish": _2,
      "ismaili": _2,
      "ist": _2,
      "istanbul": _2,
      "itau": _2,
      "itv": _2,
      "jaguar": _2,
      "java": _2,
      "jcb": _2,
      "jeep": _2,
      "jetzt": _2,
      "jewelry": _2,
      "jio": _2,
      "jll": _2,
      "jmp": _2,
      "jnj": _2,
      "joburg": _2,
      "jot": _2,
      "joy": _2,
      "jpmorgan": _2,
      "jprs": _2,
      "juegos": _2,
      "juniper": _2,
      "kaufen": _2,
      "kddi": _2,
      "kerryhotels": _2,
      "kerrylogistics": _2,
      "kerryproperties": _2,
      "kfh": _2,
      "kia": _2,
      "kids": _2,
      "kim": _2,
      "kinder": _2,
      "kindle": _2,
      "kitchen": _2,
      "kiwi": _2,
      "koeln": _2,
      "komatsu": _2,
      "kosher": _2,
      "kpmg": _2,
      "kpn": _2,
      "krd": {
        "$": 1,
        "succ": {
          "co": _3,
          "edu": _3
        }
      },
      "kred": _2,
      "kuokgroup": _2,
      "kyoto": _2,
      "lacaixa": _2,
      "lamborghini": _2,
      "lamer": _2,
      "lancaster": _2,
      "lancia": _2,
      "land": {
        "$": 1,
        "succ": {
          "static": {
            "$": 2,
            "succ": {
              "dev": _3,
              "sites": _3
            }
          }
        }
      },
      "landrover": _2,
      "lanxess": _2,
      "lasalle": _2,
      "lat": _2,
      "latino": _2,
      "latrobe": _2,
      "law": _2,
      "lawyer": _2,
      "lds": _2,
      "lease": _2,
      "leclerc": _2,
      "lefrak": _2,
      "legal": _2,
      "lego": _2,
      "lexus": _2,
      "lgbt": _2,
      "lidl": _2,
      "life": _2,
      "lifeinsurance": _2,
      "lifestyle": _2,
      "lighting": _2,
      "like": _2,
      "lilly": _2,
      "limited": _2,
      "limo": _2,
      "lincoln": _2,
      "linde": _2,
      "link": {
        "$": 1,
        "succ": {
          "cyon": _3,
          "mypep": _3,
          "dweb": _5
        }
      },
      "lipsy": _2,
      "live": {
        "$": 1,
        "succ": {
          "hlx": _3
        }
      },
      "living": _2,
      "lixil": _2,
      "llc": _2,
      "llp": _2,
      "loan": _2,
      "loans": _2,
      "locker": _2,
      "locus": _2,
      "loft": _2,
      "lol": {
        "$": 1,
        "succ": {
          "omg": _3
        }
      },
      "london": {
        "$": 1,
        "succ": {
          "in": _3,
          "of": _3
        }
      },
      "lotte": _2,
      "lotto": _2,
      "love": _2,
      "lpl": _2,
      "lplfinancial": _2,
      "ltd": _2,
      "ltda": _2,
      "lundbeck": _2,
      "luxe": _2,
      "luxury": _2,
      "macys": _2,
      "madrid": _2,
      "maif": _2,
      "maison": _2,
      "makeup": _2,
      "man": _2,
      "management": {
        "$": 1,
        "succ": {
          "router": _3
        }
      },
      "mango": _2,
      "map": _2,
      "market": _2,
      "marketing": {
        "$": 1,
        "succ": {
          "from": _3,
          "with": _3
        }
      },
      "markets": _2,
      "marriott": _2,
      "marshalls": _2,
      "maserati": _2,
      "mattel": _2,
      "mba": _2,
      "mckinsey": _2,
      "med": _2,
      "media": _2,
      "meet": _2,
      "melbourne": _2,
      "meme": _2,
      "memorial": _2,
      "men": {
        "$": 1,
        "succ": {
          "for": _3,
          "repair": _3
        }
      },
      "menu": _28,
      "merckmsd": _2,
      "miami": _2,
      "microsoft": _2,
      "mini": _2,
      "mint": _2,
      "mit": _2,
      "mitsubishi": _2,
      "mlb": _2,
      "mls": _2,
      "mma": _2,
      "mobile": _2,
      "moda": _2,
      "moe": _2,
      "moi": _2,
      "mom": {
        "$": 1,
        "succ": {
          "and": _3,
          "for": _3
        }
      },
      "monash": _2,
      "money": _2,
      "monster": _2,
      "mormon": _2,
      "mortgage": _2,
      "moscow": _2,
      "moto": _2,
      "motorcycles": _2,
      "mov": _2,
      "movie": _2,
      "msd": _2,
      "mtn": _2,
      "mtr": _2,
      "music": _2,
      "mutual": _2,
      "nab": _2,
      "nagoya": _2,
      "natura": _2,
      "navy": _2,
      "nba": _2,
      "nec": _2,
      "netbank": _2,
      "netflix": _2,
      "network": {
        "$": 1,
        "succ": {
          "alces": _5,
          "co": _3,
          "arvo": _3,
          "azimuth": _3,
          "tlon": _3
        }
      },
      "neustar": _2,
      "new": _2,
      "news": {
        "$": 1,
        "succ": {
          "noticeable": _3
        }
      },
      "next": _2,
      "nextdirect": _2,
      "nexus": _2,
      "nfl": _2,
      "ngo": _2,
      "nhk": _2,
      "nico": _2,
      "nike": _2,
      "nikon": _2,
      "ninja": _2,
      "nissan": _2,
      "nissay": _2,
      "nokia": _2,
      "northwesternmutual": _2,
      "norton": _2,
      "now": _2,
      "nowruz": _2,
      "nowtv": _2,
      "nra": _2,
      "nrw": _2,
      "ntt": _2,
      "nyc": _2,
      "obi": _2,
      "observer": _2,
      "off": _2,
      "office": _2,
      "okinawa": _2,
      "olayan": _2,
      "olayangroup": _2,
      "oldnavy": _2,
      "ollo": _2,
      "omega": _2,
      "one": {
        "$": 1,
        "succ": {
          "onred": {
            "$": 2,
            "succ": {
              "staging": _3
            }
          },
          "for": _3,
          "under": _3,
          "service": _3,
          "homelink": _3
        }
      },
      "ong": _2,
      "onl": _2,
      "online": {
        "$": 1,
        "succ": {
          "eero": _3,
          "eero-stage": _3,
          "barsy": _3
        }
      },
      "ooo": _2,
      "open": _2,
      "oracle": _2,
      "orange": _2,
      "organic": _2,
      "origins": _2,
      "osaka": _2,
      "otsuka": _2,
      "ott": _2,
      "ovh": {
        "$": 1,
        "succ": {
          "nerdpol": _3
        }
      },
      "page": {
        "$": 1,
        "succ": {
          "hlx": _3,
          "hlx3": _3,
          "pdns": _3,
          "plesk": _3,
          "prvcy": _3,
          "magnet": _3
        }
      },
      "panasonic": _2,
      "paris": _2,
      "pars": _2,
      "partners": _2,
      "parts": _2,
      "party": _22,
      "passagens": _2,
      "pay": _2,
      "pccw": _2,
      "pet": _2,
      "pfizer": _2,
      "pharmacy": _2,
      "phd": _2,
      "philips": _2,
      "phone": _2,
      "photo": _2,
      "photography": _2,
      "photos": _2,
      "physio": _2,
      "pics": _2,
      "pictet": _2,
      "pictures": {
        "$": 1,
        "succ": {
          "1337": _3
        }
      },
      "pid": _2,
      "pin": _2,
      "ping": _2,
      "pink": _2,
      "pioneer": _2,
      "pizza": _2,
      "place": _10,
      "play": _2,
      "playstation": _2,
      "plumbing": _2,
      "plus": _2,
      "pnc": _2,
      "pohl": _2,
      "poker": _2,
      "politie": _2,
      "porn": {
        "$": 1,
        "succ": {
          "indie": _3
        }
      },
      "pramerica": _2,
      "praxi": _2,
      "press": _2,
      "prime": _2,
      "prod": _2,
      "productions": _2,
      "prof": _2,
      "progressive": _2,
      "promo": _2,
      "properties": _2,
      "property": _2,
      "protection": _2,
      "pru": _2,
      "prudential": _2,
      "pub": _28,
      "pwc": _2,
      "qpon": _2,
      "quebec": _2,
      "quest": _2,
      "racing": _2,
      "radio": _2,
      "raid": _2,
      "read": _2,
      "realestate": _2,
      "realtor": _2,
      "realty": _2,
      "recipes": _2,
      "red": _2,
      "redstone": _2,
      "redumbrella": _2,
      "rehab": _2,
      "reise": _2,
      "reisen": _2,
      "reit": _2,
      "reliance": _2,
      "ren": _2,
      "rent": _2,
      "rentals": _2,
      "repair": _2,
      "report": _2,
      "republican": _2,
      "rest": _2,
      "restaurant": _2,
      "review": _22,
      "reviews": _2,
      "rexroth": _2,
      "rich": _2,
      "richardli": _2,
      "ricoh": _2,
      "ril": _2,
      "rio": _2,
      "rip": {
        "$": 1,
        "succ": {
          "clan": _3
        }
      },
      "rocher": _2,
      "rocks": {
        "$": 1,
        "succ": {
          "myddns": _3,
          "lima-city": _3,
          "webspace": _3
        }
      },
      "rodeo": _2,
      "rogers": _2,
      "room": _2,
      "rsvp": _2,
      "rugby": _2,
      "ruhr": _2,
      "run": {
        "$": 1,
        "succ": {
          "hs": _3,
          "development": _3,
          "ravendb": _3,
          "servers": _3,
          "code": _5,
          "repl": _3
        }
      },
      "rwe": _2,
      "ryukyu": _2,
      "saarland": _2,
      "safe": _2,
      "safety": _2,
      "sakura": _2,
      "sale": {
        "$": 1,
        "succ": {
          "for": _3
        }
      },
      "salon": _2,
      "samsclub": _2,
      "samsung": _2,
      "sandvik": _2,
      "sandvikcoromant": _2,
      "sanofi": _2,
      "sap": _2,
      "sarl": _2,
      "sas": _2,
      "save": _2,
      "saxo": _2,
      "sbi": _2,
      "sbs": _2,
      "sca": _2,
      "scb": _2,
      "schaeffler": _2,
      "schmidt": _2,
      "scholarships": _2,
      "school": _2,
      "schule": _2,
      "schwarz": _2,
      "science": _22,
      "scjohnson": _2,
      "scot": {
        "$": 1,
        "succ": {
          "edu": _3,
          "gov": {
            "$": 2,
            "succ": {
              "service": _3
            }
          }
        }
      },
      "search": _2,
      "seat": _2,
      "secure": _2,
      "security": _2,
      "seek": _2,
      "select": _2,
      "sener": _2,
      "services": {
        "$": 1,
        "succ": {
          "loginline": _3
        }
      },
      "ses": _2,
      "seven": _2,
      "sew": _2,
      "sex": _2,
      "sexy": _2,
      "sfr": _2,
      "shangrila": _2,
      "sharp": _2,
      "shaw": _2,
      "shell": _2,
      "shia": _2,
      "shiksha": _2,
      "shoes": _2,
      "shop": _28,
      "shopping": _2,
      "shouji": _2,
      "show": _2,
      "showtime": _2,
      "silk": _2,
      "sina": _2,
      "singles": _2,
      "site": {
        "$": 1,
        "succ": {
          "cloudera": _5,
          "cyon": _3,
          "fnwk": _3,
          "folionetwork": _3,
          "fastvps": _3,
          "jele": _3,
          "lelux": _3,
          "loginline": _3,
          "barsy": _3,
          "mintere": _3,
          "omniwe": _3,
          "opensocial": _3,
          "platformsh": _5,
          "tst": _5,
          "byen": _3,
          "srht": _3,
          "novecore": _3
        }
      },
      "ski": _2,
      "skin": _2,
      "sky": _2,
      "skype": _2,
      "sling": _2,
      "smart": _2,
      "smile": _2,
      "sncf": _2,
      "soccer": _2,
      "social": _2,
      "softbank": _2,
      "software": _2,
      "sohu": _2,
      "solar": _2,
      "solutions": {
        "$": 1,
        "succ": {
          "diher": _5
        }
      },
      "song": _2,
      "sony": _2,
      "soy": _2,
      "spa": _2,
      "space": {
        "$": 1,
        "succ": {
          "myfast": _3,
          "uber": _3,
          "xs4all": _3
        }
      },
      "sport": _2,
      "spot": _2,
      "srl": _2,
      "stada": _2,
      "staples": _2,
      "star": _2,
      "statebank": _2,
      "statefarm": _2,
      "stc": _2,
      "stcgroup": _2,
      "stockholm": _2,
      "storage": _2,
      "store": {
        "$": 1,
        "succ": {
          "sellfy": _3,
          "shopware": _3,
          "storebase": _3
        }
      },
      "stream": _2,
      "studio": _2,
      "study": _2,
      "style": _2,
      "sucks": _2,
      "supplies": _2,
      "supply": _2,
      "support": _28,
      "surf": _2,
      "surgery": _2,
      "suzuki": _2,
      "swatch": _2,
      "swiss": _2,
      "sydney": _2,
      "systems": {
        "$": 1,
        "succ": {
          "knightpoint": _3
        }
      },
      "tab": _2,
      "taipei": _2,
      "talk": _2,
      "taobao": _2,
      "target": _2,
      "tatamotors": _2,
      "tatar": _2,
      "tattoo": _2,
      "tax": _2,
      "taxi": _2,
      "tci": _2,
      "tdk": _2,
      "team": {
        "$": 1,
        "succ": {
          "discourse": _3,
          "jelastic": _3
        }
      },
      "tech": _2,
      "technology": _10,
      "temasek": _2,
      "tennis": _2,
      "teva": _2,
      "thd": _2,
      "theater": _2,
      "theatre": _2,
      "tiaa": _2,
      "tickets": _2,
      "tienda": _2,
      "tiffany": _2,
      "tips": _2,
      "tires": _2,
      "tirol": _2,
      "tjmaxx": _2,
      "tjx": _2,
      "tkmaxx": _2,
      "tmall": _2,
      "today": {
        "$": 1,
        "succ": {
          "prequalifyme": _3
        }
      },
      "tokyo": _2,
      "tools": _2,
      "top": {
        "$": 1,
        "succ": {
          "now-dns": _3,
          "ntdll": _3
        }
      },
      "toray": _2,
      "toshiba": _2,
      "total": _2,
      "tours": _2,
      "town": _2,
      "toyota": _2,
      "toys": _2,
      "trade": _22,
      "trading": _2,
      "training": _2,
      "travel": _2,
      "travelchannel": _2,
      "travelers": _2,
      "travelersinsurance": _2,
      "trust": _2,
      "trv": _2,
      "tube": _2,
      "tui": _2,
      "tunes": _2,
      "tushu": _2,
      "tvs": _2,
      "ubank": _2,
      "ubs": _2,
      "unicom": _2,
      "university": _2,
      "uno": _2,
      "uol": _2,
      "ups": _2,
      "vacations": _2,
      "vana": _2,
      "vanguard": _2,
      "vegas": _2,
      "ventures": _2,
      "verisign": _2,
      "versicherung": _2,
      "vet": _2,
      "viajes": _2,
      "video": _2,
      "vig": _2,
      "viking": _2,
      "villas": _2,
      "vin": _2,
      "vip": _2,
      "virgin": _2,
      "visa": _2,
      "vision": _2,
      "viva": _2,
      "vivo": _2,
      "vlaanderen": _2,
      "vodka": _2,
      "volkswagen": _2,
      "volvo": _2,
      "vote": _2,
      "voting": _2,
      "voto": _2,
      "voyage": _2,
      "vuelos": _2,
      "wales": _2,
      "walmart": _2,
      "walter": _2,
      "wang": _2,
      "wanggou": _2,
      "watch": _2,
      "watches": _2,
      "weather": _2,
      "weatherchannel": _2,
      "webcam": _2,
      "weber": _2,
      "website": _2,
      "wedding": _2,
      "weibo": _2,
      "weir": _2,
      "whoswho": _2,
      "wien": _2,
      "wiki": _2,
      "williamhill": _2,
      "win": {
        "$": 1,
        "succ": {
          "that": _3
        }
      },
      "windows": _2,
      "wine": _2,
      "winners": _2,
      "wme": _2,
      "wolterskluwer": _2,
      "woodside": _2,
      "work": {
        "$": 1,
        "succ": {
          "from": _3,
          "to": _3
        }
      },
      "works": _2,
      "world": _2,
      "wow": _2,
      "wtc": _2,
      "wtf": _2,
      "xbox": _2,
      "xerox": _2,
      "xfinity": _2,
      "xihuan": _2,
      "xin": _2,
      "xn--11b4c3d": _2,
      "कॉम": _2,
      "xn--1ck2e1b": _2,
      "セール": _2,
      "xn--1qqw23a": _2,
      "佛山": _2,
      "xn--30rr7y": _2,
      "慈善": _2,
      "xn--3bst00m": _2,
      "集团": _2,
      "xn--3ds443g": _2,
      "在线": _2,
      "xn--3pxu8k": _2,
      "点看": _2,
      "xn--42c2d9a": _2,
      "คอม": _2,
      "xn--45q11c": _2,
      "八卦": _2,
      "xn--4gbrim": _2,
      "موقع": _2,
      "xn--55qw42g": _2,
      "公益": _2,
      "xn--55qx5d": _2,
      "公司": _2,
      "xn--5su34j936bgsg": _2,
      "香格里拉": _2,
      "xn--5tzm5g": _2,
      "网站": _2,
      "xn--6frz82g": _2,
      "移动": _2,
      "xn--6qq986b3xl": _2,
      "我爱你": _2,
      "xn--80adxhks": _2,
      "москва": _2,
      "xn--80aqecdr1a": _2,
      "католик": _2,
      "xn--80asehdb": _2,
      "онлайн": _2,
      "xn--80aswg": _2,
      "сайт": _2,
      "xn--8y0a063a": _2,
      "联通": _2,
      "xn--9dbq2a": _2,
      "קום": _2,
      "xn--9et52u": _2,
      "时尚": _2,
      "xn--9krt00a": _2,
      "微博": _2,
      "xn--b4w605ferd": _2,
      "淡马锡": _2,
      "xn--bck1b9a5dre4c": _2,
      "ファッション": _2,
      "xn--c1avg": _2,
      "орг": _2,
      "xn--c2br7g": _2,
      "नेट": _2,
      "xn--cck2b3b": _2,
      "ストア": _2,
      "xn--cckwcxetd": _2,
      "アマゾン": _2,
      "xn--cg4bki": _2,
      "삼성": _2,
      "xn--czr694b": _2,
      "商标": _2,
      "xn--czrs0t": _2,
      "商店": _2,
      "xn--czru2d": _2,
      "商城": _2,
      "xn--d1acj3b": _2,
      "дети": _2,
      "xn--eckvdtc9d": _2,
      "ポイント": _2,
      "xn--efvy88h": _2,
      "新闻": _2,
      "xn--fct429k": _2,
      "家電": _2,
      "xn--fhbei": _2,
      "كوم": _2,
      "xn--fiq228c5hs": _2,
      "中文网": _2,
      "xn--fiq64b": _2,
      "中信": _2,
      "xn--fjq720a": _2,
      "娱乐": _2,
      "xn--flw351e": _2,
      "谷歌": _2,
      "xn--fzys8d69uvgm": _2,
      "電訊盈科": _2,
      "xn--g2xx48c": _2,
      "购物": _2,
      "xn--gckr3f0f": _2,
      "クラウド": _2,
      "xn--gk3at1e": _2,
      "通販": _2,
      "xn--hxt814e": _2,
      "网店": _2,
      "xn--i1b6b1a6a2e": _2,
      "संगठन": _2,
      "xn--imr513n": _2,
      "餐厅": _2,
      "xn--io0a7i": _2,
      "网络": _2,
      "xn--j1aef": _2,
      "ком": _2,
      "xn--jlq480n2rg": _2,
      "亚马逊": _2,
      "xn--jlq61u9w7b": _2,
      "诺基亚": _2,
      "xn--jvr189m": _2,
      "食品": _2,
      "xn--kcrx77d1x4a": _2,
      "飞利浦": _2,
      "xn--kput3i": _2,
      "手机": _2,
      "xn--mgba3a3ejt": _2,
      "ارامكو": _2,
      "xn--mgba7c0bbn0a": _2,
      "العليان": _2,
      "xn--mgbaakc7dvf": _2,
      "اتصالات": _2,
      "xn--mgbab2bd": _2,
      "بازار": _2,
      "xn--mgbca7dzdo": _2,
      "ابوظبي": _2,
      "xn--mgbi4ecexp": _2,
      "كاثوليك": _2,
      "xn--mgbt3dhd": _2,
      "همراه": _2,
      "xn--mk1bu44c": _2,
      "닷컴": _2,
      "xn--mxtq1m": _2,
      "政府": _2,
      "xn--ngbc5azd": _2,
      "شبكة": _2,
      "xn--ngbe9e0a": _2,
      "بيتك": _2,
      "xn--ngbrx": _2,
      "عرب": _2,
      "xn--nqv7f": _2,
      "机构": _2,
      "xn--nqv7fs00ema": _2,
      "组织机构": _2,
      "xn--nyqy26a": _2,
      "健康": _2,
      "xn--otu796d": _2,
      "招聘": _2,
      "xn--p1acf": {
        "$": 1,
        "succ": {
          "xn--90amc": _3,
          "xn--j1aef": _3,
          "xn--j1ael8b": _3,
          "xn--h1ahn": _3,
          "xn--j1adp": _3,
          "xn--c1avg": _3,
          "xn--80aaa0cvac": _3,
          "xn--h1aliz": _3,
          "xn--90a1af": _3,
          "xn--41a": _3
        }
      },
      "рус": {
        "$": 1,
        "succ": {
          "биз": _3,
          "ком": _3,
          "крым": _3,
          "мир": _3,
          "мск": _3,
          "орг": _3,
          "самара": _3,
          "сочи": _3,
          "спб": _3,
          "я": _3
        }
      },
      "xn--pssy2u": _2,
      "大拿": _2,
      "xn--q9jyb4c": _2,
      "みんな": _2,
      "xn--qcka1pmc": _2,
      "グーグル": _2,
      "xn--rhqv96g": _2,
      "世界": _2,
      "xn--rovu88b": _2,
      "書籍": _2,
      "xn--ses554g": _2,
      "网址": _2,
      "xn--t60b56a": _2,
      "닷넷": _2,
      "xn--tckwe": _2,
      "コム": _2,
      "xn--tiq49xqyj": _2,
      "天主教": _2,
      "xn--unup4y": _2,
      "游戏": _2,
      "xn--vermgensberater-ctb": _2,
      "vermögensberater": _2,
      "xn--vermgensberatung-pwb": _2,
      "vermögensberatung": _2,
      "xn--vhquv": _2,
      "企业": _2,
      "xn--vuq861b": _2,
      "信息": _2,
      "xn--w4r85el8fhu5dnra": _2,
      "嘉里大酒店": _2,
      "xn--w4rs40l": _2,
      "嘉里": _2,
      "xn--xhq521b": _2,
      "广东": _2,
      "xn--zfr164b": _2,
      "政务": _2,
      "xyz": {
        "$": 1,
        "succ": {
          "blogsite": _3,
          "localzone": _3,
          "crafting": _3,
          "zapto": _3,
          "telebit": _5
        }
      },
      "yachts": _2,
      "yahoo": _2,
      "yamaxun": _2,
      "yandex": _2,
      "yodobashi": _2,
      "yoga": _2,
      "yokohama": _2,
      "you": _2,
      "youtube": _2,
      "yun": _2,
      "zappos": _2,
      "zara": _2,
      "zero": _2,
      "zip": _2,
      "zone": {
        "$": 1,
        "succ": {
          "cloud66": _3,
          "hs": _3,
          "triton": _5,
          "lima": _3
        }
      },
      "zuerich": _2
    }
  };
  ;
  return rules;
}();

exports.rules = rules;
},{}],"Y5bg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = suffixLookup;

var _tldtsCore = require("tldts-core");

var _trie = require("./data/trie");

/**
 * Lookup parts of domain in Trie
 */
function lookupInTrie(parts, trie, index, allowedMask) {
  let result = null;
  let node = trie;

  while (node !== undefined) {
    // We have a match!
    if ((node.$ & allowedMask) !== 0) {
      result = {
        index: index + 1,
        isIcann: node.$ === 1
        /* ICANN */
        ,
        isPrivate: node.$ === 2
        /* PRIVATE */

      };
    } // No more `parts` to look for


    if (index === -1) {
      break;
    }

    const succ = node.succ;
    node = succ && (succ[parts[index]] || succ['*']);
    index -= 1;
  }

  return result;
}
/**
 * Check if `hostname` has a valid public suffix in `trie`.
 */


function suffixLookup(hostname, options, out) {
  if ((0, _tldtsCore.fastPathLookup)(hostname, options, out) === true) {
    return;
  }

  const hostnameParts = hostname.split('.');
  const allowedMask = (options.allowPrivateDomains === true ? 2
  /* PRIVATE */
  : 0) | (options.allowIcannDomains === true ? 1
  /* ICANN */
  : 0); // Look for exceptions

  const exceptionMatch = lookupInTrie(hostnameParts, _trie.exceptions, hostnameParts.length - 1, allowedMask);

  if (exceptionMatch !== null) {
    out.isIcann = exceptionMatch.isIcann;
    out.isPrivate = exceptionMatch.isPrivate;
    out.publicSuffix = hostnameParts.slice(exceptionMatch.index + 1).join('.');
    return;
  } // Look for a match in rules


  const rulesMatch = lookupInTrie(hostnameParts, _trie.rules, hostnameParts.length - 1, allowedMask);

  if (rulesMatch !== null) {
    out.isIcann = rulesMatch.isIcann;
    out.isPrivate = rulesMatch.isPrivate;
    out.publicSuffix = hostnameParts.slice(rulesMatch.index).join('.');
    return;
  } // No match found...
  // Prevailing rule is '*' so we consider the top-level domain to be the
  // public suffix of `hostname` (e.g.: 'example.org' => 'org').


  out.isIcann = false;
  out.isPrivate = false;
  out.publicSuffix = hostnameParts[hostnameParts.length - 1];
}
},{"tldts-core":"U6aO","./data/trie":"v2lr"}],"YYDv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.getHostname = getHostname;
exports.getPublicSuffix = getPublicSuffix;
exports.getDomain = getDomain;
exports.getSubdomain = getSubdomain;
exports.getDomainWithoutSuffix = getDomainWithoutSuffix;

var _tldtsCore = require("tldts-core");

var _suffixTrie = _interopRequireDefault(require("./src/suffix-trie"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// For all methods but 'parse', it does not make sense to allocate an object
// every single time to only return the value of a specific attribute. To avoid
// this un-necessary allocation, we use a global object which is re-used.
const RESULT = (0, _tldtsCore.getEmptyResult)();

function parse(url, options = {}) {
  return (0, _tldtsCore.parseImpl)(url, 5
  /* ALL */
  , _suffixTrie.default, options, (0, _tldtsCore.getEmptyResult)());
}

function getHostname(url, options = {}) {
  /*@__INLINE__*/
  (0, _tldtsCore.resetResult)(RESULT);
  return (0, _tldtsCore.parseImpl)(url, 0
  /* HOSTNAME */
  , _suffixTrie.default, options, RESULT).hostname;
}

function getPublicSuffix(url, options = {}) {
  /*@__INLINE__*/
  (0, _tldtsCore.resetResult)(RESULT);
  return (0, _tldtsCore.parseImpl)(url, 2
  /* PUBLIC_SUFFIX */
  , _suffixTrie.default, options, RESULT).publicSuffix;
}

function getDomain(url, options = {}) {
  /*@__INLINE__*/
  (0, _tldtsCore.resetResult)(RESULT);
  return (0, _tldtsCore.parseImpl)(url, 3
  /* DOMAIN */
  , _suffixTrie.default, options, RESULT).domain;
}

function getSubdomain(url, options = {}) {
  /*@__INLINE__*/
  (0, _tldtsCore.resetResult)(RESULT);
  return (0, _tldtsCore.parseImpl)(url, 4
  /* SUB_DOMAIN */
  , _suffixTrie.default, options, RESULT).subdomain;
}

function getDomainWithoutSuffix(url, options = {}) {
  /*@__INLINE__*/
  (0, _tldtsCore.resetResult)(RESULT);
  return (0, _tldtsCore.parseImpl)(url, 5
  /* ALL */
  , _suffixTrie.default, options, RESULT).domainWithoutSuffix;
}
},{"tldts-core":"U6aO","./src/suffix-trie":"Y5bg"}],"Ittk":[function(require,module,exports) {
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"KoJT":[function(require,module,exports) {
var define;
var _typeof = require("./typeof.js")["default"];

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
    obj[key] = desc.value;
  },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }

  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");

      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }

      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);

        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }

        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
        method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
        keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":"FlpK"}],"y2KZ":[function(require,module,exports) {
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// TODO(Babel 8): Remove this file.
var runtime = require("../helpers/regeneratorRuntime")();

module.exports = runtime; // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
},{"../helpers/regeneratorRuntime":"KoJT"}],"dEOc":[function(require,module,exports) {
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"RonT":[function(require,module,exports) {
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];

  if (null != _i) {
    var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;

    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }
}

module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"LGpM":[function(require,module,exports) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"Vzqv":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":"LGpM"}],"sa4T":[function(require,module,exports) {
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"xkYc":[function(require,module,exports) {
var arrayWithHoles = require("./arrayWithHoles.js");

var iterableToArrayLimit = require("./iterableToArrayLimit.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableRest = require("./nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithHoles.js":"dEOc","./iterableToArrayLimit.js":"RonT","./unsupportedIterableToArray.js":"Vzqv","./nonIterableRest.js":"sa4T"}],"XApn":[function(require,module,exports) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"AQ4X":[function(require,module,exports) {
var getPrototypeOf = require("./getPrototypeOf.js");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./getPrototypeOf.js":"XApn"}],"rXSD":[function(require,module,exports) {
var superPropBase = require("./superPropBase.js");

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }

  return _get.apply(this, arguments);
}

module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./superPropBase.js":"AQ4X"}],"Omxx":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"PhTw":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./setPrototypeOf.js":"Omxx"}],"oXBW":[function(require,module,exports) {
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"cbGp":[function(require,module,exports) {
var _typeof = require("./typeof.js")["default"];

var assertThisInitialized = require("./assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./typeof.js":"FlpK","./assertThisInitialized.js":"oXBW"}],"o3SL":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":"LGpM"}],"lZpU":[function(require,module,exports) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"NCaH":[function(require,module,exports) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"I9dH":[function(require,module,exports) {
var arrayWithoutHoles = require("./arrayWithoutHoles.js");

var iterableToArray = require("./iterableToArray.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableSpread = require("./nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithoutHoles.js":"o3SL","./iterableToArray.js":"lZpU","./unsupportedIterableToArray.js":"Vzqv","./nonIterableSpread.js":"NCaH"}],"GC7k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniqueEntryChecker = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var uniqueEntryChecker = /*#__PURE__*/function () {
  function uniqueEntryChecker() {
    (0, _classCallCheck2.default)(this, uniqueEntryChecker);
    this._uniqueTrackingList = {};
  } //check if this uniqueTrackingList has an list with said property


  (0, _createClass2.default)(uniqueEntryChecker, [{
    key: "isUniqueEntry",
    value: function isUniqueEntry(identifier, dataEntry) {
      var allowedDataEntry = this._getStringOrNumberValue(dataEntry);

      if (allowedDataEntry === null) {
        console.error("Only numbers or strings can be marked unique. This entry was: ".concat(dataEntry, " with identifier: ").concat(identifier));
        return false;
      }

      if (Object.prototype.hasOwnProperty.call(this._uniqueTrackingList, identifier)) {
        // has the list
        // does it have the entry?
        if (this._uniqueTrackingList[identifier].findIndex(function (listItem) {
          return listItem === allowedDataEntry;
        }) !== -1) {
          // if so, return false, let parent method throw an error
          return false;
        } else {
          // if not, add
          this._uniqueTrackingList[identifier].push(allowedDataEntry);

          return true;
        }
      } else {
        // does not have the list
        // create the list & add the list and entry
        this._uniqueTrackingList[identifier] = [];

        this._uniqueTrackingList[identifier].push(allowedDataEntry);

        return true;
      }
    }
  }, {
    key: "_getStringOrNumberValue",
    value: function _getStringOrNumberValue(dataEntry) {
      if (typeof dataEntry === 'string') {
        return dataEntry;
      } else if (typeof dataEntry === 'number') {
        return dataEntry;
      }

      return null;
    }
  }]);
  return uniqueEntryChecker;
}();

exports.uniqueEntryChecker = uniqueEntryChecker;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"EDRb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateHelperTimeStamp = exports.DateHelper = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateHelper = /*#__PURE__*/function () {
  function DateHelper() {
    (0, _classCallCheck2.default)(this, DateHelper);
  }

  (0, _createClass2.default)(DateHelper, null, [{
    key: "isDateLaterThanDate",
    value: function isDateLaterThanDate(firstDateTime, secondDateTime) {
      var differenceBetweenDates = (0, _moment.default)(firstDateTime).diff(secondDateTime);
      return differenceBetweenDates > 0 ? true : false;
    }
  }, {
    key: "getAgeFromBirthDate",
    value: function getAgeFromBirthDate(birthdate) {
      if (DateHelper.isValidDate(birthdate)) {
        return _moment.default.duration((0, _moment.default)(new Date()).diff(birthdate)).asYears();
      }

      console.error('Invalid date string');
      return -1;
    }
  }, {
    key: "isValidDate",
    value: function isValidDate(dateString) {
      // hint: e.g. "2021-04-28T20:01:16.126Z" (ISO stringdates are valid dates)
      if ((0, _moment.default)(dateString).isValid()) {
        return true;
      } else {
        console.error("Datestring: ".concat(dateString, " is not a valid datetime string"));
        return false;
      }
    }
  }, {
    key: "isDateBetweenGreaterThanAmountOfDays",
    value: function isDateBetweenGreaterThanAmountOfDays(dateOne, dateTwo, amountOfDays) {
      if (amountOfDays <= 0) {
        console.error("The amount of days cannot be 0 or less");
        return undefined;
      }

      return this.getAmountDaysBetweenDates(dateOne, dateTwo) !== undefined && this.getAmountDaysBetweenDates(dateOne, dateTwo) > amountOfDays ? true : false;
    }
  }, {
    key: "getAmountDaysBetweenDates",
    value: function getAmountDaysBetweenDates(dateFormer, dateLater) {
      if (!DateHelper.isValidDate(dateFormer) || !DateHelper.isValidDate(dateLater)) {
        console.error("Parameter dateOne: ".concat(dateFormer, " and/or dateTwo: ").concat(dateLater, " is not a valid date"));
        return undefined;
      }

      return _moment.default.duration((0, _moment.default)(dateLater).diff(dateFormer)).asDays();
    }
  }, {
    key: "getAmountMilisecondesBetweenDates",
    value: function getAmountMilisecondesBetweenDates(dateFormer, dateLater) {
      if (!DateHelper.isValidDate(dateFormer) || !DateHelper.isValidDate(dateLater)) {
        console.error("Parameter dateOne: ".concat(dateFormer, " and/or dateTwo: ").concat(dateLater, " is not a valid date"));
        return undefined;
      }

      return _moment.default.duration((0, _moment.default)(dateLater).diff(dateFormer)).asMilliseconds();
    }
  }]);
  return DateHelper;
}();

exports.DateHelper = DateHelper;

var DateHelperTimeStamp = /*#__PURE__*/function () {
  function DateHelperTimeStamp() {
    (0, _classCallCheck2.default)(this, DateHelperTimeStamp);
  }

  (0, _createClass2.default)(DateHelperTimeStamp, null, [{
    key: "isDateBetweenGreaterThanAmountOfDays",
    value: function isDateBetweenGreaterThanAmountOfDays(dateOne, dateTwo, amountOfDays) {
      if (amountOfDays <= 0) {
        console.error("The amount of days cannot be 0 or less");
        return null;
      }

      var miliSecondsInDay = 86400000;
      var amountOfDaysInMS = amountOfDays * 86400000; //todo: why can't i type this shorthand without type converting it to a number?

      return this.getAmountDaysBetweenDates(dateOne, dateTwo) !== null && this.getAmountDaysBetweenDates(dateOne, dateTwo) >= amountOfDays ? true : false;
    }
  }, {
    key: "getAmountDaysBetweenDates",
    value: function getAmountDaysBetweenDates(dateFormer, dateLater) {
      if (!DateHelperTimeStamp.isValidDate(dateFormer) || !DateHelperTimeStamp.isValidDate(dateLater)) {
        console.error("Parameter dateOne: ".concat(dateFormer, " and/or dateTwo: ").concat(dateLater, " is not a valid date"));
        return null;
      } // return moment.duration(moment(dateLater).diff(dateFormer)).asDays();


      var miliSecondsInDay = 86400000;
      return (dateLater - dateFormer) / miliSecondsInDay;
    }
  }, {
    key: "isValidDate",
    value: function isValidDate(dateTimeStampNumber) {
      // timestamp 0 is 1-1-1970 01:00:00. Any number below that is in the future thus is invalid
      return dateTimeStampNumber > 0 ? true : false;
    }
  }]);
  return DateHelperTimeStamp;
}();

exports.DateHelperTimeStamp = DateHelperTimeStamp;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","moment":"ZCrj"}],"LTXP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataFieldDistances = exports.DataFieldGhostsList = exports.DataFieldReminderList = exports.DataFieldReactionSpeedList = exports.DataFieldMessages = exports.DataFieldSystemNo = exports.DataField = exports.UIRequiredType = exports.UIRequired = void 0;

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _uniqueEntryChecker = require("../util/uniqueEntryChecker");

var _dateHelper = require("../util/dateHelper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var UIRequired;
exports.UIRequired = UIRequired;

(function (UIRequired) {
  UIRequired["SELECT_ONLY"] = "select_only";
  UIRequired["CHAT_ONLY"] = "chat_only";
  UIRequired["ALL"] = "all";
  UIRequired["NONE"] = "none";
})(UIRequired || (exports.UIRequired = UIRequired = {}));

var UIRequiredType;
exports.UIRequiredType = UIRequiredType;

(function (UIRequiredType) {
  UIRequiredType["TEXTAREA"] = "textarea";
  UIRequiredType["ALPHANUMERIC_INPUT"] = "alphanumeric-input";
  UIRequiredType["NUMERIC_INPUT"] = "numeric-input";
  UIRequiredType["SLIDER"] = "slider";
  UIRequiredType["SWITCH"] = "switch";
  UIRequiredType["MULTISELECT"] = "multiselect";
})(UIRequiredType || (exports.UIRequiredType = UIRequiredType = {}));

var DataField = /*#__PURE__*/function () {
  function DataField(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic, options) {
    var _this = this;

    (0, _classCallCheck2.default)(this, DataField);
    this.dataEntryList = [];
    this._uniqueIdentifier = new _uniqueEntryChecker.uniqueEntryChecker();

    this.isDataEntryValid = function (dataEntry) {
      if (!_this._isBaseTypeSet(_this.dataLogic.baseType)) {
        return false;
      } // if the data entry is allowed to be empty, and IS empty


      if (_this.emptyFieldAllowed && _this._isDataEntryEmpty(dataEntry)) {
        // return true because undefined/null/empty string is an acceptable value if empty field allowed is true
        return true;
      } //if the data entry is allowed to be empty, but data entry is not empty
      // continue with the check
      // if the data entry IS NOT allowed to be empty, but data entry IS empty AND the current entry is not null (empty)


      if (!_this.emptyFieldAllowed && _this._isDataEntryEmpty(dataEntry) && _this.dataEntry !== null) {
        console.error("The data entry for  ".concat(_this.title, " cannot be empty or of a falsy value. Value: (").concat(dataEntry, ")."));
        return false;
      } // if the data entry IS NOT allowed to be empty, but the data entry is not empty
      // continue with the check


      if (_this.mustBeUnique && !_this._isDataEntryUnique('noDataEntry', dataEntry) && dataEntry !== _this.dataEntry) {
        console.error("dataEntry: ".concat(dataEntry, " for property: ").concat(_this.title, " does not have a unique number."));
      }

      if (_this.dataLogic.baseType === 'specialList' && _this.dataLogic.customCheckClass !== null) {
        if (_this.dataLogic.customCheckClass.isValidEntry(dataEntry)) {
          return true;
        }

        console.error("The converted data entry (".concat(dataEntry, ") does not satisfy the check method set for ").concat(_this.title));
        return false;
      }

      var typeDataEntry = _this._getTypeOfValue(dataEntry);

      switch (_this.dataLogic.baseType) {
        case 'string':
          if (typeDataEntry === 'string') {
            return true;
          }

          console.error("The data entry (".concat(dataEntry, ") provided for ").concat(_this.title, " should be of type ").concat(_this.dataLogic.baseType, " but was found to be of type ").concat(_this._getTypeOfValue(dataEntry)));
          return false;

        case 'boolean':
          if (typeDataEntry === 'boolean') {
            return true;
          }

          console.error("The data entry (".concat(dataEntry, ") provided for ").concat(_this.title, " should be of type ").concat(_this.dataLogic.baseType, " but was found to be of type ").concat(_this._getTypeOfValue(dataEntry)));
          return false;

        case 'number':
          if (typeDataEntry === 'number') {
            return true;
          }

          console.error("The data entry (".concat(dataEntry, ") provided for ").concat(_this.title, " should be of type ").concat(_this.dataLogic.baseType, " but was found to be of type ").concat(_this._getTypeOfValue(dataEntry)));
          return false;

        case 'stringList':
          if (typeDataEntry === 'object' && Array.isArray(dataEntry)) {
            if (_this._isDataEntryValidForStringList(dataEntry)) {
              return true;
            }

            return false;
          }

          console.error("".concat(_this.title, " has baseType set to 'stringList' but received a value which is not an array. Please check the data to ensure values provided to this datafield are always of type array."));
          return false;

        case 'specialList':
          console.error("Datafield ".concat(_this.title, " has baseType 'specialList' but no customCheckClass assigned. Datafields with baseType 'specialList' must have a customCheckClass assigned to it."));
          return false;

        default:
          console.error("The basetype provided for ".concat(_this.title, " has an unknown type"));
          return false;
      }
    };

    this.title = title;
    this.description = description;
    this.emptyFieldAllowed = emptyFieldAllowed; // why did i need this again? What the difference between this setting and the UISetting setting? Don;t i only need the UISetting setting? Idea; refactor this to a specific string keyword mentioning the required ui element needed e.g. 'radio'

    this.UISetting = UISetting; //determines if the fields is visible in UI

    this.multipleDataEntry = multipleDataEntry;
    this.options = options ? options : [];
    this.mustBeUnique = mustBeUnique;
    this.autoGather = autoGather; //if true, then check in the provided dataSource if e.g. a numnber already exists. if not assign a new (increment from the former) number to this person

    this.onlyGatherOnce = onlyGatherOnce;
    this.dataLogic = dataLogic;

    if (!this._isDataFieldValid()) {
      console.error("Data field ".concat(this.title, " is not valid. Check the logs and update."));
    }
  }

  (0, _createClass2.default)(DataField, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.log('uses getBaseValue from datafield');
      if (this._isBaseTypeOfAllowedListType(this.dataLogic.baseType)) {
        return this.dataEntryList;
      }

      if (!this.hasValue()) {
        return null;
      }

      if (this.dataEntryList.length > 0) {
        // console.error(`getValue method called on ${this.title} has not yet been inplemented. Please inplement this logic first`);
        // return null;
        return this.dataEntryList;
      } else {
        switch (this.dataLogic.baseType) {
          case 'string':
            return this.dataEntry;

          case 'number':
            return this.dataEntry;

          case 'boolean':
            return this.dataEntry;

          default:
            return null;
        }
      }
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      if (this.dataEntryList.length > 0) {
        return true;
      }

      if (this.dataEntry !== null || this.dataEntry !== undefined) {
        return true;
      }

      return false;
    }
  }, {
    key: "updateValueAllowed",
    value: function updateValueAllowed() {
      // if has value AND is multipleDataEntry -> can be updated, if has no value -> can be updated.. otherwise NO?
      // if has value AND is onlyGatherOnce = false -> can be updated, if has no value -> can be updated.. otherwise NO
      if (!this.hasValue()) {
        return true;
      }

      if (this.dataEntryList.length > 0 && this.multipleDataEntry) {
        return true;
      }

      if (this.dataEntry !== undefined && this.onlyGatherOnce) {
        return true;
      }

      return false;
    }
  }, {
    key: "addDataEntry",
    value: function addDataEntry(dataEntry) {
      if (!this.isDataEntryValid(dataEntry)) {
        //todo: create a notification system whereby me (the user) is notified through UI instead of console
        console.error('Incompatible dataEntry type with provided dataEntry type');
        return;
      }

      if (this._isBaseTypeOfAllowedListType(this.dataLogic.baseType)) {
        var isArrayDataEntryList = this._getArrayDataEntryList(dataEntry);

        if (isArrayDataEntryList) {
          if (this.multipleDataEntry) {
            if (isArrayDataEntryList !== null) {
              this.dataEntryList = Array.from(new Set([].concat((0, _toConsumableArray2.default)(this.dataEntryList), (0, _toConsumableArray2.default)(isArrayDataEntryList))));
            }
          } else {
            // It is best NOT to use the multipleDataEntry and always use the standard overwrite old data since i'm always getting the old list of messages anyway (and any app also supports always getting your old messages anyway af far as i can tell atm).
            this.dataEntryList = isArrayDataEntryList;
          }
        }
      } else {
        this.dataEntry = dataEntry;
      } // here in this method i do: check if the added data..
      // 1. can be added due to multipleDataEntry setting?
      // -> yep, must also be checked for this
      // 2. must be unique check? if checked, check if given data is unique
      // -> is that the responsibility of the field? or maybe the dataValue object?.. well only the field can control how many entries there already are AND if they're unique!?
      // 3. autoGather.. so idk? call something which gathers the data for this classobject?
      // -> not here, but must be done in tindercontroller
      // 4. if one entry already exists, prevent the addition of multiple entries (e.g. i can change my attractiveness rating of a girl afterwards thus allowing multiple, but if i got a match with her or not is really only added once, thus should be prevented from adding the same data again)
      // -> yup, must also be checked for this

    }
  }, {
    key: "_isBaseTypeSet",
    value: function _isBaseTypeSet(baseType) {
      if (!baseType) {
        console.error("No basetype and/or datalogic checkmethod was set for: ".concat(this.title));
        return false;
      }

      return true;
    }
  }, {
    key: "_isDataEntryEmpty",
    value: function _isDataEntryEmpty(dataEntry) {
      var _this2 = this;

      //todo: should refactor this to 1. convert unknown to a known type and 2. use a enum instead of true/false cause this aint working..
      if (this._isBaseTypeOfAllowedListType(this.dataLogic.baseType) && dataEntry instanceof Array) {
        return dataEntry.every(function (dataEntryItem) {
          if ((0, _typeof2.default)(dataEntryItem) === 'object') {
            return _this2._isObjectEntryEmpty(dataEntryItem);
          } else {
            return _this2._isEntryEmpty(dataEntry);
          }
        });
      }

      if ((0, _typeof2.default)(dataEntry) === 'object' && dataEntry !== null) {
        return this._isObjectEntryEmpty(dataEntry);
      }

      return this._isEntryEmpty(dataEntry);
    }
  }, {
    key: "_isEntryEmpty",
    value: function _isEntryEmpty(dataEntry) {
      if (dataEntry === undefined || dataEntry === null || dataEntry === "") {
        return true;
      }

      return false;
    }
  }, {
    key: "_isObjectEntryEmpty",
    value: function _isObjectEntryEmpty(dataEntry) {
      var objectValues = Object.values(dataEntry);

      if (objectValues.every(function (objectValue) {
        return objectValue === undefined || objectValue === null || objectValue === "";
      })) {
        return true;
      }

      return false;
    }
  }, {
    key: "_isDataEntryUnique",
    value: function _isDataEntryUnique(identifier, dataEntry) {
      return this._uniqueIdentifier.isUniqueEntry(identifier, dataEntry);
    }
  }, {
    key: "_getArrayDataEntryList",
    value: function _getArrayDataEntryList(dataEntry) {
      if (Array.isArray(dataEntry)) {
        return dataEntry;
      }

      return null;
    } //todo: create conversion methods; if i ever decide to;
    // add new data fields
    // change labels, type of data or data content.. to what was the data previously.. 
    // give me a prompt in which i can auto update my content to the newly desired contrent
    // this is for V2!!!

  }, {
    key: "_getTypeOfValue",
    value: function _getTypeOfValue(value) {
      switch ((0, _typeof2.default)(value)) {
        case 'string':
          return 'string';

        case 'number':
          return 'number';

        case 'boolean':
          return 'boolean';

        case 'object':
          return 'object';

        default:
          return null;
      }
    }
  }, {
    key: "_isDataFieldValid",
    value: function _isDataFieldValid() {
      var isBaseTypeSet = this._isBaseTypeSet(this.dataLogic.baseType);

      var isUISettingValid = this._isUISettingValid(this.UISetting);

      return isBaseTypeSet && isUISettingValid ? true : false;
    }
  }, {
    key: "_isUISettingValid",
    value: function _isUISettingValid(UISetting) {
      // if UIrequired is none, only 'none' may be given for field type
      if (UISetting.UIrequired === UIRequired.NONE && UISetting.UIrequiredType !== null) {
        console.error("UIRequired is set to ".concat(UIRequired.NONE, " thus the required type can only be of value ", null));
        return false;
      } // if UIrequired may only be one of certain types defined in UIrequired enum


      if (!Object.values(UIRequired).includes(UISetting.UIrequired)) {
        console.error("UIRequired may only be one of the following types: ".concat(Object.values(UIRequired).toString()));
        return false;
      } // if UIrequiredType may only be one of certain types defined in UIrequiredType enum


      if (UISetting.UIrequiredType !== null && !Object.values(UIRequiredType).includes(UISetting.UIrequiredType)) {
        console.error("UIrequiredType may only be one of the following types: ".concat(Object.values(UIRequiredType).toString(), " or null if UIRequired is set to NONE"));
        return false;
      }

      return true;
    }
  }, {
    key: "_isDataEntryValidForStringList",
    value: function _isDataEntryValidForStringList(dataEntry) {
      var _this3 = this;

      var providedDataEntryList = dataEntry;

      if (!providedDataEntryList.every(function (providedDataEntry) {
        return typeof providedDataEntry === 'string';
      })) {
        console.error("Field ".concat(this.title, " is of type list, but values provided in the array are not of type string. Non-string type lists are currently not supported."));
        return false;
      }

      var providedDataEntryStringList = dataEntry;

      if (!providedDataEntryStringList.every(function (providedDataEntry) {
        return _this3.options.includes(providedDataEntry);
      })) {
        console.error("Values in field ".concat(this.title, " do not match the options provided for this list datafield. Please check and update the values provided or include it into the options for this field."));
        return false;
      }

      return true;
    }
  }, {
    key: "_isBaseTypeOfAllowedListType",
    value: function _isBaseTypeOfAllowedListType(baseType) {
      return baseType === 'specialList' || baseType === 'stringList';
    }
  }]);
  return DataField;
}();

exports.DataField = DataField;

var DataFieldSystemNo = /*#__PURE__*/function (_DataField) {
  (0, _inherits2.default)(DataFieldSystemNo, _DataField);

  var _super = _createSuper(DataFieldSystemNo);

  function DataFieldSystemNo(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    (0, _classCallCheck2.default)(this, DataFieldSystemNo);
    return _super.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
  }

  (0, _createClass2.default)(DataFieldSystemNo, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      var appType = (optionalArgumentsObject === null || optionalArgumentsObject === void 0 ? void 0 : optionalArgumentsObject.hasOwnProperty('appType')) ? optionalArgumentsObject.appType : null;
      var valueObject = this.dataEntry;

      if (Object.prototype.hasOwnProperty.call(valueObject, 'appType') && valueObject['appType'] === appType) {
        return this.dataEntry;
      } else {
        return null;
      }
    }
  }, {
    key: "addDataEntry",
    value: function addDataEntry(dataEntry) {
      if (!this.isDataEntryValid(dataEntry)) {
        //todo: create a notification system whereby me (the user) is notified through UI instead of console
        console.error('Incompatible dataEntry type with provided dataEntry type');
        return;
      }

      this.dataEntry = dataEntry;
    }
  }]);
  return DataFieldSystemNo;
}(DataField);

exports.DataFieldSystemNo = DataFieldSystemNo;

var DataFieldMessages = /*#__PURE__*/function (_DataField2) {
  (0, _inherits2.default)(DataFieldMessages, _DataField2);

  var _super2 = _createSuper(DataFieldMessages);

  function DataFieldMessages(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    var _this4;

    (0, _classCallCheck2.default)(this, DataFieldMessages);
    _this4 = _super2.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
    _this4.needsToBeUpdated = false;
    return _this4;
  }

  (0, _createClass2.default)(DataFieldMessages, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.error(`getValue method called on DataFieldMessages has not yet been inplemented. Please inplement this logic first`);
      // return null;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(DataFieldMessages.prototype), "getValue", this).call(this);
    }
  }, {
    key: "getLastMessage",
    value: function getLastMessage() {
      var messagesListLength = this.dataEntryList.length; //todo: figure out how to do this nicely; inheriting property from base class with a different type

      return messagesListLength > 0 ? this.dataEntryList[messagesListLength - 1] : null;
    }
  }, {
    key: "hasMessages",
    value: function hasMessages() {
      return this.dataEntryList.length > 0 ? true : false;
    }
  }, {
    key: "isNeedsToBeUpdated",
    value: function isNeedsToBeUpdated() {
      return this.needsToBeUpdated;
    }
  }, {
    key: "setNeedsToBeUpdated",
    value: function setNeedsToBeUpdated(needsToBeUpdated) {
      this.needsToBeUpdated = needsToBeUpdated;
    }
  }, {
    key: "updateMessagesList",
    value: function updateMessagesList(updatedMessagesList, forceAdd) {
      var _this5 = this;

      updatedMessagesList = this.removeDuplicateMessages(updatedMessagesList);

      if (updatedMessagesList.length > 0) {
        this.setNeedsToBeUpdated(false);

        if (forceAdd) {
          this.addDataEntry(updatedMessagesList);
        } else {
          if (this.dataEntryList.length < updatedMessagesList.length) {
            this.addDataEntry(updatedMessagesList);
            console.log("WEW, LOOKS LIKE WE GOT A RECORD WHICH CONTAINS FEWER MESSAGES THAN WE GET FROM THE NEW MESSAGES LIST. Should be pretty much everyone INITIALLY?");
            console.log("ALSO; we cannot know for sure if this datarecord will receive the latest messages or not, so let's just simply set this one to needsToBeUpdated true");
            this.setNeedsToBeUpdated(true);
          } else {
            var isAllNewMessagesPresent = updatedMessagesList.every(function (newMessage) {
              var indexNewMessage = _this5.dataEntryList.findIndex(function (dataEntry) {
                return dataEntry.datetime === newMessage.datetime;
              });

              return indexNewMessage !== -1 ? true : false;
            });

            if (!isAllNewMessagesPresent) {
              console.log("OH BOY! LOOKS LIKE WE GOT A RECORD WHICH DOES NOT CONTAIN THE LATEST MESSAGES. WE NEED A TEST SCENARIO FOR THIS");
              this.setNeedsToBeUpdated(true); //todo: 
              // WHAT IF tinder decides to throw away some or all old messages between me and match?
              // and after 5 years i chat to match..
              // thus messagesList is set to updated, and messages are overwritten?
              // (maybe) not relevant now, tinder nicely keeps data from years prior.. but it might happen thus i lose data?
            }
          }
        }
      }
    }
  }, {
    key: "getAllMessages",
    value: function getAllMessages() {
      return this.dataEntryList;
    }
  }, {
    key: "removeDuplicateMessages",
    value: function removeDuplicateMessages(messagesList) {
      var filteredMessageList = [];
      messagesList.forEach(function (message) {
        var indexCurrentMessage = filteredMessageList.findIndex(function (filteredMessage) {
          var isDateTimeEqual = filteredMessage.datetime === message.datetime ? true : false;

          if (isDateTimeEqual) {
            var isAuthorEqual = filteredMessage.author === message.author ? true : false;

            if (isAuthorEqual) {
              var isMessageContentEqual = filteredMessage.message === message.message ? true : false;

              if (isMessageContentEqual) {
                return true;
              } else {
                return false;
              }
            }

            return false;
          }

          return false;
        });

        if (indexCurrentMessage === -1) {
          filteredMessageList.push(message);
        }
      });
      return filteredMessageList;
    }
  }]);
  return DataFieldMessages;
}(DataField);

exports.DataFieldMessages = DataFieldMessages;

var DataFieldReactionSpeedList = /*#__PURE__*/function (_DataField3) {
  (0, _inherits2.default)(DataFieldReactionSpeedList, _DataField3);

  var _super3 = _createSuper(DataFieldReactionSpeedList);

  function DataFieldReactionSpeedList(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    (0, _classCallCheck2.default)(this, DataFieldReactionSpeedList);
    return _super3.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
  }

  (0, _createClass2.default)(DataFieldReactionSpeedList, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.error(`getValue method called on DataFieldMessages has not yet been inplemented. Please inplement this logic first`);
      // return null;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(DataFieldReactionSpeedList.prototype), "getValue", this).call(this);
    }
  }]);
  return DataFieldReactionSpeedList;
}(DataField);

exports.DataFieldReactionSpeedList = DataFieldReactionSpeedList;

var DataFieldReminderList = /*#__PURE__*/function (_DataField4) {
  (0, _inherits2.default)(DataFieldReminderList, _DataField4);

  var _super4 = _createSuper(DataFieldReminderList);

  function DataFieldReminderList(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    (0, _classCallCheck2.default)(this, DataFieldReminderList);
    return _super4.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
  }

  (0, _createClass2.default)(DataFieldReminderList, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.error(`getValue method called on DataFieldMessages has not yet been inplemented. Please inplement this logic first`);
      // return null;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(DataFieldReminderList.prototype), "getValue", this).call(this);
    }
  }]);
  return DataFieldReminderList;
}(DataField);

exports.DataFieldReminderList = DataFieldReminderList;

var DataFieldGhostsList = /*#__PURE__*/function (_DataField5) {
  (0, _inherits2.default)(DataFieldGhostsList, _DataField5);

  var _super5 = _createSuper(DataFieldGhostsList);

  function DataFieldGhostsList(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    (0, _classCallCheck2.default)(this, DataFieldGhostsList);
    return _super5.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
  }

  (0, _createClass2.default)(DataFieldGhostsList, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.error(`getValue method called on DataFieldMessages has not yet been inplemented. Please inplement this logic first`);
      // return null;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(DataFieldGhostsList.prototype), "getValue", this).call(this);
    }
  }, {
    key: "updateMoment",
    value: function updateMoment(updatedTime, updatedStatus) {
      if (this.dataLogic.customCheckClass === null) {
        console.error('Could not update moment; no custom check class was set to check input.');
        return;
      } // if(this.dataLogic.customCheckClass.isValidEntry(updatedTime)){
      // }
      // if(dataGhosted._isValidTimeEntry(updatedTime) && dataGhosted._isValidStatus(updatedStatus)){
      //     this._timeSinceLastMessage = updatedTime;
      //     this._status = updatedStatus;
      // }else{
      //     console.error('Could not update moment. Updated time or updated status invalid');
      // }

    }
  }]);
  return DataFieldGhostsList;
}(DataField);

exports.DataFieldGhostsList = DataFieldGhostsList;

var DataFieldDistances = /*#__PURE__*/function (_DataField6) {
  (0, _inherits2.default)(DataFieldDistances, _DataField6);

  var _super6 = _createSuper(DataFieldDistances);

  function DataFieldDistances(title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic) {
    (0, _classCallCheck2.default)(this, DataFieldDistances);
    return _super6.call(this, title, description, emptyFieldAllowed, UISetting, multipleDataEntry, mustBeUnique, autoGather, onlyGatherOnce, dataLogic);
  }

  (0, _createClass2.default)(DataFieldDistances, [{
    key: "getValue",
    value: function getValue(optionalArgumentsObject) {
      // console.error(`getValue method called on DataFieldMessages has not yet been inplemented. Please inplement this logic first`);
      // return null;
      return (0, _get2.default)((0, _getPrototypeOf2.default)(DataFieldDistances.prototype), "getValue", this).call(this);
    }
  }, {
    key: "containsRecordWithinHours",
    value: function containsRecordWithinHours(hours) {
      var milisecondsInOneHour = 3600000;
      var totalMiliseconds = hours * milisecondsInOneHour;
      var amountInstancesErrorThrown = 0;
      return this.dataEntryList.some(function (dataEntry) {
        if (amountInstancesErrorThrown >= 1) {
          return null;
        } // empty array by default returns false


        if (Object.prototype.hasOwnProperty.call(dataEntry, "dateTime") && typeof dataEntry['dateTime'] === 'string') {
          var amountMSEntryToCurrentDateTime = _dateHelper.DateHelper.getAmountMilisecondesBetweenDates(dataEntry['dateTime'], new Date().toISOString());

          return amountMSEntryToCurrentDateTime && amountMSEntryToCurrentDateTime <= totalMiliseconds ? true : false;
        }

        amountInstancesErrorThrown = amountInstancesErrorThrown + 1;
        console.error("The dateTime keyname for DataFieldDistances entries cannot be found. Please check your datafields & entries on existing records if these still contain the dateTime keyname with a valid datetime.");
      });
    }
  }]);
  return DataFieldDistances;
}(DataField);

exports.DataFieldDistances = DataFieldDistances;
},{"@babel/runtime/helpers/get":"rXSD","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","@babel/runtime/helpers/typeof":"FlpK","@babel/runtime/helpers/toConsumableArray":"I9dH","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/uniqueEntryChecker":"GC7k","../util/dateHelper":"EDRb"}],"udwR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckSimple = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataCheckSimple = /*#__PURE__*/function () {
  function dataCheckSimple() {
    (0, _classCallCheck2.default)(this, dataCheckSimple);
  }

  (0, _createClass2.default)(dataCheckSimple, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      console.warn('No validators set for ???');
      return true;
    }
  }]);
  return dataCheckSimple;
}();

exports.dataCheckSimple = dataCheckSimple;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"WBqD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckDate = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dataCheckSimple2 = require("./dataCheckSimple");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckDate = /*#__PURE__*/function (_dataCheckSimple) {
  (0, _inherits2.default)(dataCheckDate, _dataCheckSimple);

  var _super = _createSuper(dataCheckDate);

  function dataCheckDate() {
    (0, _classCallCheck2.default)(this, dataCheckDate);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(dataCheckDate, [{
    key: "isValidEntry",
    value: function isValidEntry(dateValue) {
      return Date.parse(dateValue) ? true : false; //todo: TEMPORARY SOLUTION, refactor to use momentjs (but typescript version instead!)
    }
  }]);
  return dataCheckDate;
}(_dataCheckSimple2.dataCheckSimple);

exports.dataCheckDate = dataCheckDate;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","./dataCheckSimple":"udwR"}],"GYec":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataAttractiveness = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dataCheckSimple2 = require("./dataCheckSimple");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataAttractiveness = /*#__PURE__*/function (_dataCheckSimple) {
  (0, _inherits2.default)(dataAttractiveness, _dataCheckSimple);

  var _super = _createSuper(dataAttractiveness);

  function dataAttractiveness() {
    (0, _classCallCheck2.default)(this, dataAttractiveness);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(dataAttractiveness, [{
    key: "isValidEntry",
    value: function isValidEntry(score) {
      if (!Number.isInteger(score)) {
        return false;
      }

      return score >= 1 && score <= 10 ? true : false; //todo: test if it accepts 8.5, 7.5 etc.
    }
  }]);
  return dataAttractiveness;
}(_dataCheckSimple2.dataCheckSimple);

exports.dataAttractiveness = dataAttractiveness;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","./dataCheckSimple":"udwR"}],"bgrk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataConversationVibe = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dataCheckSimple2 = require("./dataCheckSimple");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataConversationVibe = /*#__PURE__*/function (_dataCheckSimple) {
  (0, _inherits2.default)(dataConversationVibe, _dataCheckSimple);

  var _super = _createSuper(dataConversationVibe);

  function dataConversationVibe() {
    (0, _classCallCheck2.default)(this, dataConversationVibe);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(dataConversationVibe, [{
    key: "isValidEntry",
    value: function isValidEntry(score) {
      if (!Number.isInteger(score)) {
        return false;
      }

      return score >= 1 && score <= 10 ? true : false; //todo: test if it does not accept any number with decimals, less than 1 or greater than 6.
    }
  }]);
  return dataConversationVibe;
}(_dataCheckSimple2.dataCheckSimple);

exports.dataConversationVibe = dataConversationVibe;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","./dataCheckSimple":"udwR"}],"oD0D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Check = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var moment = _interopRequireWildcard(require("moment"));

require("moment/locale/nl");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

moment.locale('nl');

var Check = /*#__PURE__*/function () {
  function Check() {
    (0, _classCallCheck2.default)(this, Check);
  }

  (0, _createClass2.default)(Check, null, [{
    key: "isValidDate",
    value: function isValidDate(dateString) {
      return moment.default(dateString, true).isValid() ? true : false;
    }
  }, {
    key: "isPositiveNumberEntry",
    value: function isPositiveNumberEntry(numberEntry) {
      return numberEntry >= 0 ? true : false;
    }
  }]);
  return Check;
}();

exports.Check = Check;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","moment":"ZCrj","moment/locale/nl":"Heea"}],"XgYc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GhostStatus = exports.dataItemGhost = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataItemGhost = function dataItemGhost(number, timeSinceLastMessageMS, status) {
  (0, _classCallCheck2.default)(this, dataItemGhost);
  this._number = number;
  this._timeSinceLastMessageMS = timeSinceLastMessageMS;
  this._status = status;
};

exports.dataItemGhost = dataItemGhost;
var GhostStatus;
exports.GhostStatus = GhostStatus;

(function (GhostStatus) {
  GhostStatus["REPLIED"] = "answered";
  GhostStatus["NOT_REPLIED_TO_REMINDER"] = "unanswered-to-reminder";
  GhostStatus["NOT_REPLIED"] = "unanswered";
  GhostStatus["BLOCKED"] = "block";
})(GhostStatus || (exports.GhostStatus = GhostStatus = {}));
},{"@babel/runtime/helpers/classCallCheck":"kUj2"}],"p7H3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheck = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataCheck = /*#__PURE__*/function () {
  function dataCheck() {
    (0, _classCallCheck2.default)(this, dataCheck);
    this.requiredPropertiesList = [];
  }

  (0, _createClass2.default)(dataCheck, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      console.warn("No validations set for ???."); //todo: provide title from dataField?

      return true;
    }
  }, {
    key: "propertyChecker",
    value: function propertyChecker(requiredPropertiesList, listEntry) {
      return requiredPropertiesList.every(function (property) {
        if (!Object.prototype.hasOwnProperty.call(listEntry, property.label)) {
          console.error("Property ".concat(property.label, " is missing from provided value ").concat(listEntry, " for ???."));
          return false;
        }

        return true;
      });
    }
  }, {
    key: "argumentTypeChecker",
    value: function argumentTypeChecker(requiredPropertiesList, listEntry) {
      return requiredPropertiesList.every(function (property) {
        if (!listEntry[property.label]) {
          return true;
        }

        if ((0, _typeof2.default)(listEntry[property.label]) === property.type) {
          return true;
        }

        console.error("Property ".concat(property.label, " value is not of the required type (").concat(property.type, ") but is of type ").concat((0, _typeof2.default)(listEntry[property.label]), ". Value given: ").concat(listEntry[property.label]));
        return false;
      });
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      console.warn("No validations set for values of properties from ???");
      return true;
    }
  }, {
    key: "checkListEntryByPropertiesAndTypes",
    value: function checkListEntryByPropertiesAndTypes(requiredPropertiesList, listEntry) {
      var result = false;
      result = this.propertyChecker(requiredPropertiesList, listEntry);
      result = result ? this.argumentTypeChecker(this.requiredPropertiesList, listEntry) : false;
      return result;
    }
  }, {
    key: "getListEntryAsObjectList",
    value: function getListEntryAsObjectList(listEntry) {
      if (!Array.isArray(listEntry)) {
        console.error("The provided value for ??? is not a list");
        return null;
      }

      return listEntry;
    }
  }]);
  return dataCheck;
}();

exports.dataCheck = dataCheck;
},{"@babel/runtime/helpers/typeof":"FlpK","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"m1NB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckGhosts = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _check = require("../../util/check");

var _dataItemGhost = require("../dataItems/dataItemGhost");

var _dataCheck2 = require("./dataCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckGhosts = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckGhosts, _dataCheck);

  var _super = _createSuper(dataCheckGhosts);

  function dataCheckGhosts() {
    var _this;

    (0, _classCallCheck2.default)(this, dataCheckGhosts);
    _this = _super.apply(this, arguments);
    _this.requiredPropertiesList = [{
      label: 'number',
      type: 'number'
    }, {
      label: 'timeSinceLastMessageMS',
      type: 'number'
    }, {
      label: 'status',
      type: 'string'
    }];
    _this._numberOfInstancesList = [];
    return _this;
  }

  (0, _createClass2.default)(dataCheckGhosts, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      var _this2 = this;

      var objList = this.getListEntryAsObjectList(listEntry);
      var isPropertiesAndArgumentsValid = false;

      if (!objList) {
        return false;
      }

      if (objList.length === 0) {
        return true;
      }

      isPropertiesAndArgumentsValid = objList.every(function (obj) {
        if (_this2.checkListEntryByPropertiesAndTypes(_this2.requiredPropertiesList, obj)) {
          return _this2.argumentChecker(_this2.requiredPropertiesList, obj);
        }

        return false;
      });
      this.resetUniqueNumber();
      return isPropertiesAndArgumentsValid;
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      var isNumberPositiveAndUnique = _check.Check.isPositiveNumberEntry(listEntry[requiredPropertiesList[0].label]) && this._isUniqueNumber(listEntry[requiredPropertiesList[0].label]);

      var isTimeSinceLastMessageMSPositive = _check.Check.isPositiveNumberEntry(listEntry[requiredPropertiesList[1].label]);

      var isStatusValid = this._isValidStatus(listEntry[requiredPropertiesList[2].label]);

      return isNumberPositiveAndUnique && isTimeSinceLastMessageMSPositive && isStatusValid;
    }
  }, {
    key: "_isValidStatus",
    value: function _isValidStatus(statusEntry) {
      return statusEntry === _dataItemGhost.GhostStatus.BLOCKED || statusEntry === _dataItemGhost.GhostStatus.NOT_REPLIED || statusEntry === _dataItemGhost.GhostStatus.REPLIED || statusEntry === _dataItemGhost.GhostStatus.NOT_REPLIED_TO_REMINDER ? true : false;
    }
  }, {
    key: "_isUniqueNumber",
    value: function _isUniqueNumber(no) {
      if (this._numberOfInstancesList.findIndex(function (numberedInstance) {
        return numberedInstance === no;
      }) === -1) {
        this._numberOfInstancesList.push(no);

        return true;
      } else {
        console.error("Number already exists");
        return false;
      }
    }
  }, {
    key: "resetUniqueNumber",
    value: function resetUniqueNumber() {
      this._numberOfInstancesList = [];
    }
  }]);
  return dataCheckGhosts;
}(_dataCheck2.dataCheck);

exports.dataCheckGhosts = dataCheckGhosts;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","../../util/check":"oD0D","../dataItems/dataItemGhost":"XgYc","./dataCheck":"p7H3"}],"rk9e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckReactionSpeed = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dataCheck2 = require("./dataCheck");

var _dateHelper = require("../../util/dateHelper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckReactionSpeed = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckReactionSpeed, _dataCheck);

  var _super = _createSuper(dataCheckReactionSpeed);

  function dataCheckReactionSpeed() {
    var _this;

    (0, _classCallCheck2.default)(this, dataCheckReactionSpeed);
    _this = _super.apply(this, arguments);
    _this.requiredPropertiesList = [{
      label: 'datetimeMyLastMessage',
      type: 'string'
    }, {
      label: 'datetimeTheirResponse',
      type: 'string'
    }, {
      label: 'differenceInMS',
      type: 'number'
    }];
    return _this;
  }

  (0, _createClass2.default)(dataCheckReactionSpeed, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      var _this2 = this;

      var objList = this.getListEntryAsObjectList(listEntry);

      if (!objList) {
        return false;
      }

      if (objList.length === 0) {
        return true;
      }

      return objList.every(function (obj) {
        if (_this2.checkListEntryByPropertiesAndTypes(_this2.requiredPropertiesList, obj)) {
          return _this2.argumentChecker(_this2.requiredPropertiesList, obj);
        }

        return false;
      });
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      var hasRequiredArguments = requiredPropertiesList.every(function (requiredProperty) {
        if (requiredProperty.label === 'datetimeMyLastMessage' || requiredProperty.label === 'datetimeTheirResponse') {
          return _dateHelper.DateHelper.isValidDate(listEntry[requiredProperty.label]);
        } else {
          return typeof listEntry[requiredProperty.label] === 'number';
        }
      });

      var differenceBetweenDates = _dateHelper.DateHelper.getAmountMilisecondesBetweenDates(listEntry[requiredPropertiesList[0].label], listEntry[requiredPropertiesList[1].label]);

      var isDifferenceDatesPositiveNumber = differenceBetweenDates !== undefined && differenceBetweenDates > -1 ? true : false;
      return hasRequiredArguments && isDifferenceDatesPositiveNumber;
    }
  }]);
  return dataCheckReactionSpeed;
}(_dataCheck2.dataCheck);

exports.dataCheckReactionSpeed = dataCheckReactionSpeed;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","./dataCheck":"p7H3","../../util/dateHelper":"EDRb"}],"kFWZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckReminders = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _check = require("../../util/check");

var _dataCheck2 = require("./dataCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckReminders = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckReminders, _dataCheck);

  var _super = _createSuper(dataCheckReminders);

  function dataCheckReminders() {
    var _this;

    (0, _classCallCheck2.default)(this, dataCheckReminders);
    _this = _super.apply(this, arguments);
    _this.requiredPropertiesList = [{
      label: 'number',
      type: 'number'
    }, {
      label: 'datetimeMyLastMessage',
      type: 'string'
    }, {
      label: 'datetimeReminderSent',
      type: 'string'
    }, {
      label: 'textContentReminder',
      type: 'string'
    }, {
      label: 'hasGottenReply',
      type: 'boolean'
    }];
    return _this;
  }

  (0, _createClass2.default)(dataCheckReminders, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      var _this2 = this;

      //const newlistEntry = typeof listEntry === 'object' ?  <Record<string, unknown>>listEntry : {};
      var objList = this.getListEntryAsObjectList(listEntry); // TODO
      // for other files;
      // refactor all listEntry inputs type to Record<string, unknown> (like done here..)
      // ALSO; first check if listEntry is of type object (which may be part of a util type check method, which can also recognize object type a.k.a. record), if so.. continue
      // refactor requiredPropertiesList into objects; key = name of property, value = type of property (string, boolean etc.)
      // make a new method on dataCheck level (propertiestype checker)
      // have the method check if the arguments of the correct type
      // if above is true; return a new (casted or created) record of the listEntry.. NO! CREATE A SEPERATE METHOD FOR THIS. CREATE THE DATAITEM INSTANCE INSTEAD
      // which can be given to argument checker.. which in turns further checks the arguments for like; if the datestring is correct, number is in the correct range etc.
      // refactor the argument checker TO NOT CHECK types.. but only what is mentioned above

      if (!objList) {
        return false;
      }

      if (objList.length === 0) {
        return true;
      }

      return objList.every(function (obj) {
        if (_this2.checkListEntryByPropertiesAndTypes(_this2.requiredPropertiesList, obj)) {
          return _this2.argumentChecker(_this2.requiredPropertiesList, obj);
        }

        return false;
      });
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      var result = false;
      result = _check.Check.isValidDate(listEntry[requiredPropertiesList[0].label]);
      result = _check.Check.isValidDate(listEntry[requiredPropertiesList[1].label]);
      result = String(listEntry[requiredPropertiesList[2].label]).length > 0 ? true : false;
      return result;
    }
  }]);
  return dataCheckReminders;
}(_dataCheck2.dataCheck);

exports.dataCheckReminders = dataCheckReminders;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","../../util/check":"oD0D","./dataCheck":"p7H3"}],"ispI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckSystemId = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataCheckSystemId = /*#__PURE__*/function () {
  function dataCheckSystemId() {
    (0, _classCallCheck2.default)(this, dataCheckSystemId);
    this.allowedPropertiesList = ['tinder', 'happn'];
  }

  (0, _createClass2.default)(dataCheckSystemId, [{
    key: "isValidEntry",
    value: function isValidEntry(value) {
      var isAllowedObject = false;
      var hasAllowedSingleAppType = false;
      var isValueString = false;

      if ((0, _typeof2.default)(value) === 'object') {
        var allowedObject = value;
        isAllowedObject = Object.entries(allowedObject).length === 2 || Object.entries(allowedObject).length === 3 ? true : false;

        if (Object.prototype.hasOwnProperty.call(value, 'appType') && Object.prototype.hasOwnProperty.call(value, 'id') || Object.prototype.hasOwnProperty.call(value, 'tempId')) {
          if (typeof allowedObject['appType'] === 'string') {
            hasAllowedSingleAppType = this.allowedPropertiesList.some(function (allowedProperty) {
              return allowedProperty === allowedObject['appType'];
            });
          } else {
            console.error('Property appType is not set on dataField SystemId');
          }

          if (typeof allowedObject['id'] === 'string' && allowedObject['id'].length > 0 || typeof allowedObject['tempId'] === 'string' && allowedObject['tempId'].length > 0) {
            isValueString = true;
          } else {
            console.error('Property id or tempId is not set on dataField SystemId');
          }
        }
      } else {
        console.error('Provided value is not an object for dataField SystemId');
      }

      return isAllowedObject && hasAllowedSingleAppType && isValueString ? true : false;
    }
  }]);
  return dataCheckSystemId;
}();

exports.dataCheckSystemId = dataCheckSystemId;
},{"@babel/runtime/helpers/typeof":"FlpK","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"qrRP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckMessage = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dateHelper = require("../../util/dateHelper");

var _dataCheck2 = require("./dataCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckMessage = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckMessage, _dataCheck);

  var _super = _createSuper(dataCheckMessage);

  function dataCheckMessage() {
    var _this;

    (0, _classCallCheck2.default)(this, dataCheckMessage);
    _this = _super.apply(this, arguments);
    _this.requiredPropertiesList = [{
      label: 'message',
      type: 'string'
    }, {
      label: 'datetime',
      type: 'string'
    }, {
      label: 'author',
      type: 'string'
    }];
    return _this;
  }

  (0, _createClass2.default)(dataCheckMessage, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      var _this2 = this;

      var objList = this.getListEntryAsObjectList(listEntry);
      var isPropertiesAndArgumentsValid = false;

      if (!objList) {
        return false;
      }

      if (objList.length === 0) {
        return true;
      }

      isPropertiesAndArgumentsValid = objList.every(function (obj) {
        if (_this2.checkListEntryByPropertiesAndTypes(_this2.requiredPropertiesList, obj)) {
          return _this2.argumentChecker(_this2.requiredPropertiesList, obj);
        }

        return false;
      });
      return isPropertiesAndArgumentsValid;
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      if (listEntry[requiredPropertiesList[0].label] === "" && listEntry[requiredPropertiesList[1].label] === "" && listEntry[requiredPropertiesList[2].label] === "") {
        // if all are undefined it means the message is empty/non-existant. No need to check this.
        return true;
      }

      var isMessage = typeof listEntry[requiredPropertiesList[0].label] === 'string' ? true : false;
      var hasTimestamp = typeof listEntry[requiredPropertiesList[1].label] === 'string' && _dateHelper.DateHelper.isValidDate(listEntry[requiredPropertiesList[1].label]) ? true : false;

      var hasAuthor = this._hasAuthor(listEntry[requiredPropertiesList[2].label]);

      return isMessage && hasTimestamp && hasAuthor;
    }
  }, {
    key: "_hasAuthor",
    value: function _hasAuthor(value) {
      if (value === "") {
        return true;
      }

      if (typeof value === 'string') {
        if (value === 'me' || value === 'match') {
          return true;
        }

        console.error('Author field cannot contain any other value than "me" or "match" indicating the author of this message');
        return false;
      }

      return false;
    }
  }]);
  return dataCheckMessage;
}(_dataCheck2.dataCheck);

exports.dataCheckMessage = dataCheckMessage;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","../../util/dateHelper":"EDRb","./dataCheck":"p7H3"}],"cQaC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckDistances = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _check = require("../../util/check");

var _dataCheck2 = require("./dataCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckDistances = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckDistances, _dataCheck);

  var _super = _createSuper(dataCheckDistances);

  function dataCheckDistances() {
    var _this;

    (0, _classCallCheck2.default)(this, dataCheckDistances);
    _this = _super.apply(this, arguments);
    _this.requiredPropertiesList = [{
      label: 'dateTime',
      type: 'string'
    }, {
      label: 'distanceInKM',
      type: 'number'
    }];
    return _this;
  }

  (0, _createClass2.default)(dataCheckDistances, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      var _this2 = this;

      var objList = this.getListEntryAsObjectList(listEntry);
      var isPropertiesAndArgumentsValid = false;

      if (!objList) {
        return false;
      }

      if (objList.length === 0) {
        return true;
      }

      isPropertiesAndArgumentsValid = objList.every(function (obj) {
        if (_this2.checkListEntryByPropertiesAndTypes(_this2.requiredPropertiesList, obj)) {
          return _this2.argumentChecker(_this2.requiredPropertiesList, obj);
        }

        return false;
      });
      return isPropertiesAndArgumentsValid;
    }
  }, {
    key: "argumentChecker",
    value: function argumentChecker(requiredPropertiesList, listEntry) {
      var isValidDate = _check.Check.isValidDate(listEntry[requiredPropertiesList[0].label]);

      var isPositiveNumber = _check.Check.isPositiveNumberEntry(listEntry[requiredPropertiesList[1].label]);

      return isValidDate && isPositiveNumber;
    }
  }]);
  return dataCheckDistances;
}(_dataCheck2.dataCheck);

exports.dataCheckDistances = dataCheckDistances;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","../../util/check":"oD0D","./dataCheck":"p7H3"}],"WdOF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCheckListStrings = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _dataCheck2 = require("./dataCheck");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var dataCheckListStrings = /*#__PURE__*/function (_dataCheck) {
  (0, _inherits2.default)(dataCheckListStrings, _dataCheck);

  var _super = _createSuper(dataCheckListStrings);

  function dataCheckListStrings() {
    (0, _classCallCheck2.default)(this, dataCheckListStrings);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(dataCheckListStrings, [{
    key: "isValidEntry",
    value: function isValidEntry(listEntry) {
      if (Array.isArray(listEntry)) {
        var isEveryListItemEntryString = listEntry.every(function (listEntryItem) {
          return typeof listEntryItem === 'string';
        });

        if (isEveryListItemEntryString) {
          return true;
        }

        console.error("Every value received in ".concat(listEntry, " needs to be a string"));
        return false;
      }

      console.error("Data received: ".concat(listEntry, " is not an array whilst an array was expected."));
      return false;
    }
  }]);
  return dataCheckListStrings;
}(_dataCheck2.dataCheck);

exports.dataCheckListStrings = dataCheckListStrings;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/helpers/inherits":"PhTw","@babel/runtime/helpers/possibleConstructorReturn":"cbGp","@babel/runtime/helpers/getPrototypeOf":"XApn","./dataCheck":"p7H3"}],"RbWp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataRecord = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _dataField = require("./dataField");

var _dataCheckDate = require("./dataCheckLogic/dataCheckDate");

var _dataCheckAttractiveness = require("./dataCheckLogic/dataCheckAttractiveness");

var _dataCheckConversationVibe = require("./dataCheckLogic/dataCheckConversationVibe");

var _dataCheckGhosts = require("./dataCheckLogic/dataCheckGhosts");

var _dataCheckReactionSpeed = require("./dataCheckLogic/dataCheckReactionSpeed");

var _dataCheckReminders = require("./dataCheckLogic/dataCheckReminders");

var _dataCheckSystemId = require("./dataCheckLogic/dataCheckSystemId");

var _dataCheckMessage = require("./dataCheckLogic/dataCheckMessage");

var _dataCheckDistances = require("./dataCheckLogic/dataCheckDistances");

var _dataCheckListStrings = require("./dataCheckLogic/dataCheckListStrings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataRecord = /*#__PURE__*/function () {
  function DataRecord() {
    var _this = this;

    (0, _classCallCheck2.default)(this, DataRecord);

    /*
        Output:
              System-no                   - {appType: 'xxxx', id: 'x6x'}
        No                          - int
        Datum-liket                 - string datetime
        Naam                        - string any
        Leeftijd                    - int
        Heeft-profieltekst          - boolean
        Heeft-zinnige-profieltekst  - boolean
        Geverifieerd                - boolean
        Aantrekkelijkheidsscore     - int
        Liked/disliked              - boolean
        Match                       - boolean
        Datum-match                 - string datetime
        Ander-eerste-bericht        - boolean
        Ander-gereageerd            - boolean
        Gesprek-op-gang             - boolean
        Gevoel-van-gemak-gesprek    - int
        Hoe-vaak-ghost              - [ {'datetime after time expired', 'time passed since my last message'} ]
        Nummer-verkregen            - boolean
        Reactie-snelheid            - [ {'time passed between my message to person and their first response'} ]
        Blocked-of-geen-contact     - string 'blocked' |  'said-no-contact' | 'available'
        Geinteresseerd-sex          - boolean
        Potentiele-klik             - boolean
        Notities                    - string any
        */
    //todo: to ensure proper nesting without errors; ensure the datafield labels / headers ONLY contain alphanumeric characters AND dashes.. nothing else
    //todo: maybe needs a systemNo or something? Just like No but specifically for the system
    this.usedDataFields = [//Mandatory data fields
    new _dataField.DataFieldSystemNo('System-no', 'The number the system of the datingapp assigned this person to', false, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, true, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckSystemId.dataCheckSystemId()
    }), new _dataField.DataField('No', 'The number of the person for my app internaly', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, true, false, true, {
      baseType: 'number',
      customCheckClass: null
    }), new _dataField.DataFieldMessages('Messages', 'The messages sent between me and my match', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckMessage.dataCheckMessage()
    }), new _dataField.DataField('Last-updated', 'The datetime this record has been last updated (including messages)', false, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'string',
      customCheckClass: new _dataCheckDate.dataCheckDate()
    }), // need to keep track of this myself, but since I'M swiping/liking this will not be a problem 
    new _dataField.DataField('Date-liked-or-passed', 'The datetime when I gave the like/sent my first message/disliked/counsiously ignored this potential person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, true, {
      baseType: 'string',
      customCheckClass: new _dataCheckDate.dataCheckDate()
    }), new _dataField.DataField('Name', 'The name of the person', true, {
      UIrequired: _dataField.UIRequired.SELECT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.ALPHANUMERIC_INPUT
    }, false, false, true, true, {
      baseType: 'string',
      customCheckClass: null
    }), new _dataField.DataField('Age', 'The age of the person', true, {
      UIrequired: _dataField.UIRequired.SELECT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.NUMERIC_INPUT
    }, false, false, true, true, {
      baseType: 'number',
      customCheckClass: null
    }), new _dataField.DataField('City', 'The city this person lives in claimed by themself or tinder', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.ALPHANUMERIC_INPUT
    }, false, false, true, false, {
      baseType: 'string',
      customCheckClass: null
    }), new _dataField.DataField('Job', 'The claimed job title this person holds', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.ALPHANUMERIC_INPUT
    }, false, false, true, false, {
      baseType: 'string',
      customCheckClass: null
    }), new _dataField.DataField('Has-profiletext', 'Wether or not this person has some text on the profile', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, true, true, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Has-usefull-profiletext', 'Wether or not this person has some usefull text on the profile', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Seems-fake', 'If a profile just seems too good to be true or is a pornstar quality of sorts', false, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Seems-empty', 'If a profile appear to have no identifying info whatsoever, maybe even simply a blank picture', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Seems-obese', 'If a profile seems to be very overweight to obese to worse than obese', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Seems-toppick', 'If a profile seems to be very attractive a normal person would never match with (i.e. instagram model like)', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Is-uitblinker-for-Me', 'If a match is very physically attractive and/or has a great personality to a degree that I (the creator of this app) would normally never dream of matching with such a hot & cool person', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Liked-me-first-is-instant-match', 'If this person liked me first thus resulting in an instant match upon me liking this person. Must set this field manually, if the match is not instant then I liked the person first', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Is-gold-match', 'If a match is thanks to Tinder gold or not', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Needs-profile-update', 'If a match profile details need to be updated for this record', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Needs-messages-update', 'If a match messages need to be updated for this record', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Needs-reminder', 'If a match did not respond thus needs a reminder', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataFieldDistances('Distance-in-km', 'The reported distance of this person relative to me on a given datetime', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, true, false, true, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckDistances.dataCheckDistances()
    }), new _dataField.DataField('School', 'The claimed school this person attends/attended', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, true, true, {
      baseType: 'string',
      customCheckClass: null
    }), new _dataField.DataField('Gender', 'The gender of this person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, true, {
      baseType: 'string',
      customCheckClass: null
    }), new _dataField.DataField('Interests', 'The interests of this person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, true, false, true, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }), new _dataField.DataField('Type-of-match-or-like', 'The type of match or like me and my match might have exchanged', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, true, false, false, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }), new _dataField.DataField('Is-verified', 'Wether or not this person is verified', true, {
      UIrequired: _dataField.UIRequired.SELECT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, true, true, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Amount-of-pictures', 'The amount of pictures this person uses on their profile at the time of matching', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, true, true, {
      baseType: 'number',
      customCheckClass: null
    }), new _dataField.DataField('Attractiveness-score', 'The attractiveness-level for this person', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.SLIDER
    }, false, false, false, false, {
      baseType: 'number',
      customCheckClass: new _dataCheckAttractiveness.dataAttractiveness()
    }), new _dataField.DataField('Height', 'The (estimated) height of this person', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.MULTISELECT
    }, false, false, false, false, {
      baseType: 'stringList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }, ['seems-short < 1.60m', 'is-short < 1.60m', 'seems-normal >= 1.60-1.70m', 'is-normal >= 1.60-1.70m', 'seems-tall > 1.70-1.80m', 'is-tall > 1.70-1.80m', 'seems-very-tall > 1.80m', 'is-very-tall > 1.80m', 'indetermineable-height']), new _dataField.DataField('Details-tags', 'Details I assume or know about this person to be true', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.MULTISELECT
    }, false, false, false, false, {
      baseType: 'stringList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }, ['seems-mom', 'is-mom', 'seems-prettier-in-real-life', 'is-prettier-in-real-life', 'has-big-*****-not-obese', 'unclear-or-no-fullbody', 'seems-chubby', 'is-chubby', 'seems-has-humor', 'has-humor', 'seems-has-MY-humor', 'has-MY-humor', 'is-tourist', 'is-immigrant-or-expat', 'non-caucasian-but-Dutch', 'interested-in-ons', 'interested-in-fwb', 'interested-in-relationship-only', 'interested-in-friends-only', 'does-not-want-(more)-children', 'has-multiple-children', 'has-kid']), new _dataField.DataField('Vibe-tags', 'The vibe or feeling I get from this person judging from their pictures & chat', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.MULTISELECT
    }, false, false, false, false, {
      baseType: 'stringList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }, ['seems-bitchy', 'is-bitchy', 'seems-awesome-personality', 'has-awesome-personality', 'seems-travelfreak', 'is-travelfreak', 'seems-boring', 'is-boring', 'seems-nerdy', 'is-nerdy', 'seems-sweet', 'is-sweet', 'seems-tokkie', 'is-tokkie', 'seems-airhead', 'is-airhead', 'seems-toughgirl', 'is-toughgirl', 'seems-interested-in-ons-fwb-etc']), new _dataField.DataField('Seems-to-be-active', 'Wether a match showed signs of being active/online (i.e. updating pictures, updating profileText, etc.) despite potentially not responding', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), //todo: track wether the like given (or received?) is a normal like, superlike etc. Since the same concept also applies to toher dating apps,.. find a universal format for this.
    new _dataField.DataField('Did-i-like', 'Wether I liked/showed interest in this person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Is-match', 'Wether we have a match/can talk/person liked me back or not', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Date-match', 'The datetime when I and the person had a match/ability to talk', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'string',
      customCheckClass: new _dataCheckDate.dataCheckDate()
    }), new _dataField.DataField('Match-sent-first-message', 'If this person sent me a first message', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Match-responded', 'If this person responded to my first message', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Conversation-exists', 'If this person responded to each of my first 3 messages to this person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Vibe-conversation', 'The feeling of how easy & fun it is to have a conversation with this person ranging from 1 (very responsive & fun) to 6 (hardly responsive & teeth pulling)', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SLIDER
    }, false, false, false, false, {
      baseType: 'number',
      customCheckClass: new _dataCheckConversationVibe.dataConversationVibe()
    }), new _dataField.DataFieldGhostsList('How-many-ghosts', 'How many times this person did respond in a certain timeframe', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckGhosts.dataCheckGhosts()
    }), new _dataField.DataField('Acquired-number', 'Did I get further contact details (e.g. phone number) from this person?', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Date-of-acquired-number', 'The datetime I received contact details from this person', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'string',
      customCheckClass: new _dataCheckDate.dataCheckDate()
    }), new _dataField.DataFieldReactionSpeedList('Response-speed', 'The moments of time between each response', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckReactionSpeed.dataCheckReactionSpeed()
    }), new _dataField.DataFieldReminderList('Reminders-amount', 'The amount of reminders I sent and if they worked', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'specialList',
      customCheckClass: new _dataCheckReminders.dataCheckReminders()
    }), new _dataField.DataField('Match-wants-no-contact', 'If this person indicated they did not wish further contact', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Blocked-or-removed', 'If this person certainly blocked my profile/removed us as match', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Date-of-unmatch', 'The datetime the match was removed', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'string',
      customCheckClass: new _dataCheckDate.dataCheckDate()
    }), new _dataField.DataField('Seemingly-deleted-profile', 'If this person seemingly (i.e. request to match profile returns a 404) deleted their profile', true, {
      UIrequired: _dataField.UIRequired.NONE,
      UIrequiredType: null
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Interested-in-sex', 'Wether this person has indicated to be interested in a hookup or not', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Potential-click', 'Wether the vibe of the conversation was good enough to say "we clicked"', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Why-i-removed', 'The reason why I removed or cancelled the (match) connection with this person', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.MULTISELECT
    }, false, false, false, false, {
      baseType: 'stringList',
      customCheckClass: new _dataCheckListStrings.dataCheckListStrings()
    }, ['got-number', 'match-never-responded', 'too-far-away', 'nasty-person', 'recognized-or-dated-previously', 'matched-previously-on-datingapp-same-number', 'is-scammer', 'is-catfish', 'accidental-like', 'not-attracted-anymore', 'old-match-before-app-no-longer-attracted', 'old-match-before-app-match-never-responded', 'is-empty', 'has-(multiple)-children', 'does-not-want-(more)-children']), new _dataField.DataField('Did-i-unmatch', 'If i am going to/have unmatched an existing match', true, {
      UIrequired: _dataField.UIRequired.CHAT_ONLY,
      UIrequiredType: _dataField.UIRequiredType.SWITCH
    }, false, false, false, false, {
      baseType: 'boolean',
      customCheckClass: null
    }), new _dataField.DataField('Notes', 'Any interesting notes on this person', true, {
      UIrequired: _dataField.UIRequired.ALL,
      UIrequiredType: _dataField.UIRequiredType.TEXTAREA
    }, false, false, false, false, {
      baseType: 'string',
      customCheckClass: null
    })];
    var mandatoryFieldsTitleList = ['System-no', 'No', 'Messages', 'Last-updated'];
    var isAllMandatoryFieldsPresent = mandatoryFieldsTitleList.every(function (mandatoryFieldTitle) {
      return _this.getIndexOfDataFieldByTitle(mandatoryFieldTitle) !== -1;
    });

    if (!isAllMandatoryFieldsPresent) {
      console.error("Some data fields are missing or their title do not match the mandatory data fields title list. Please check the mandatory data fields list & the data fields which are present in dataRecord class.");
    }
  } // why do this instead of simply creating object instances?

  /*
  1. I can check if all data is present simply by using a method before i even need to create a class (or it creates an empty data class because the params did not pass the check)
  2. This is very usefull for checking the fields before i parse the entire thing in popup! I do not need instances of everything right away! (only one instance needed from dataRecord)
  3. Much like the usedDataFields; I can have a list of those without being tightly coupled with their respective classes; otherwise this class would need to know
  */


  (0, _createClass2.default)(DataRecord, [{
    key: "addDataToDataFields",
    value: function addDataToDataFields(dataRecordValues) {
      var _this2 = this;

      // check if all values in array match dataField names
      if (this.isAllDataFieldsPresent(dataRecordValues)) {
        //if so, add data by label, value pairs, value can be entered by using the add method on the corresponding dataField
        dataRecordValues.forEach(function (dataRecordValue) {
          _this2.usedDataFields[_this2.getIndexOfDataFieldByTitle(dataRecordValue.label)].addDataEntry(dataRecordValue.value);
        });
        return true;
      } else {
        console.error('Missing some required data fields. Cannot add dataRecord');
        return false;
      }
    } // public getRecordPersonSystemId(appType: string, onlyTempId?: boolean): string | null {

  }, {
    key: "getRecordPersonSystemId",
    value: function getRecordPersonSystemId(appType, onlyTempId) {
      var labelPersonSystemid = 'System-no';
      var valueDataField = this.getValueOfDataFieldByTitle(labelPersonSystemid, {
        'appType': appType.toString()
      });

      if (valueDataField !== null && (0, _typeof2.default)(valueDataField) === 'object') {
        for (var _i = 0, _Object$entries = Object.entries(valueDataField); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              value = _Object$entries$_i[1];

          if (key === 'id' && value && !onlyTempId) {
            return value;
          }

          if (key === 'tempId' && value) {
            return value;
          }
        }

        return null;
      }

      return null;
    }
  }, {
    key: "getNoDataRecord",
    value: function getNoDataRecord() {
      var currentRecordNumberValue = this.getValueOfDataFieldByTitle('No');

      if (typeof currentRecordNumberValue === 'number') {
        return currentRecordNumberValue;
      } else {
        return null;
      }
    }
  }, {
    key: "setNoDataRecord",
    value: function setNoDataRecord(no) {
      if (no && typeof no === 'number') {
        if (no <= 0) {
          console.error("Provided numbner cannot be 0 or less");
          return;
        }

        this.usedDataFields[this.getIndexOfDataFieldByTitle('No')].addDataEntry(no);
        return;
      } else {
        console.error("No (valid) number provided to set No for this data record: ".concat(this));
        return;
      }
    }
  }, {
    key: "getDataRecordDataFields",
    value: function getDataRecordDataFields() {
      return this.usedDataFields.length > 0 ? this.usedDataFields : null;
    }
  }, {
    key: "setUpdateMessages",
    value: function setUpdateMessages(isToBeUpdated) {
      var dataMessagesField = this.usedDataFields[this.getIndexOfDataFieldByTitle('Messages')];
      dataMessagesField.setNeedsToBeUpdated(isToBeUpdated);
    }
  }, {
    key: "isNeedFieldMessagesBeUpdated",
    value: function isNeedFieldMessagesBeUpdated() {
      var dataMessagesField = this.usedDataFields[this.getIndexOfDataFieldByTitle('Messages')];
      return dataMessagesField.isNeedsToBeUpdated();
    }
  }, {
    key: "getLatestMessage",
    value: function getLatestMessage() {
      var dataFieldMessages = this.usedDataFields[this.getIndexOfDataFieldByTitle('Messages')];
      var lastMessage = dataFieldMessages.getLastMessage();
      return lastMessage && lastMessage ? lastMessage : null;
    }
  }, {
    key: "hasMessages",
    value: function hasMessages() {
      var dataFieldMessages = this.usedDataFields[this.getIndexOfDataFieldByTitle('Messages')];
      return dataFieldMessages.hasMessages();
    }
  }, {
    key: "getIfProfileDetailsNeedsUpdate",
    value: function getIfProfileDetailsNeedsUpdate() {
      // Created due to the need to be able to determine on record (match)-level if the profile details need to be updated or not
      // Which in turn can be:
      // - Not set due to a (single accidental) HTTP failure, in which case it would be preferable to try getting the details again in the future
      // - Need to be reset according to the wishes of the user by setting it in the screenhelper panel (slider to true)
      return this.usedDataFields[this.getIndexOfDataFieldByTitle('Needs-profile-update')].getValue();
    }
  }, {
    key: "getIfMessagesNeedsUpdate",
    value: function getIfMessagesNeedsUpdate() {
      // Created due to the need to be able to determine on record (match)-level if the profile details need to be updated or not
      // Which in turn can be:
      // - Not set due to a (single accidental) HTTP failure, in which case it would be preferable to try getting the details again in the future
      // - Need to be reset according to the wishes of the user by setting it in the screenhelper panel (slider to true)
      return this.usedDataFields[this.getIndexOfDataFieldByTitle('Needs-messages-update')].getValue();
    }
    /**
     * Checks wether all data record values array provided in the param exist in the data record
     * @param {DataRecordValues[]} dataRecordValueList
     * @returns {boolean}
     */

  }, {
    key: "isAllDataFieldsPresent",
    value: function isAllDataFieldsPresent(dataRecordValueList) {
      var _this3 = this;

      return dataRecordValueList.every(function (dataRecordValue) {
        var indexDataFieldTitleInDataRecord = _this3.usedDataFields.findIndex(function (usedDataField) {
          return usedDataField.title === dataRecordValue.label;
        });

        if (indexDataFieldTitleInDataRecord !== -1) {
          return true;
        } else {
          console.error("Cannot find data record value: ".concat(dataRecordValue.label, ". Please ensure the app is up to date and all fields from imported profile exist in dataRecord usedDataFields list"));
          return false;
        }
      });
    }
  }, {
    key: "getIndexOfDataFieldByTitle",
    value: function getIndexOfDataFieldByTitle(title) {
      return this.usedDataFields.findIndex(function (usedDataField) {
        return usedDataField.title === title;
      });
    }
  }, {
    key: "getValueOfDataFieldByTitle",
    value: function getValueOfDataFieldByTitle(title, optionalArgumentsObject) {
      // check if 'system-no' exists
      var indexDataField = this.getIndexOfDataFieldByTitle(title);

      if (indexDataField >= 0) {
        return this.usedDataFields[indexDataField].getValue(optionalArgumentsObject);
      } else {
        console.error("Data field with title: \"".concat(title, "\" not found"));
      }
    }
  }, {
    key: "getRecordValueObject",
    value: function getRecordValueObject(appType) {
      var result = {};
      this.usedDataFields.forEach(function (usedDataField) {
        if (usedDataField instanceof _dataField.DataFieldSystemNo) {
          // result[usedDataField.title] = usedDataField.getValue({appType: 'tinder'});
          result[usedDataField.title] = usedDataField.getValue({
            appType: appType
          });
        } else {
          // since JSON.stringify() removes any object key-value which contains undefined, it's better to set these values as null
          result[usedDataField.title] = usedDataField.getValue() === undefined ? null : usedDataField.getValue();
        }
      });
      return result;
    }
  }, {
    key: "getValueLastUpdated",
    value: function getValueLastUpdated() {
      var indexLastUpdatedDataField = this.getIndexOfDataFieldByTitle('Last-updated');

      if (indexLastUpdatedDataField !== -1) {
        return this.usedDataFields[indexLastUpdatedDataField].getValue();
      } else {
        console.error("Last updated field does not exist.");
        return '';
      }
    }
    /*  ZET HIER WELKE TAGS IK MOMENTEEL WEL GA ONDERSTEUNEN EN WELKE NIET! BEGIN KLEIN!
      'show-average-number-matches-to-go' // maybe handy tool, not for logging data, but for comparing how many potential matches i can get with 1 profile (as done by my own research) and thus how many 'to-go' for my region etc. This 'visual indicator' might just help me get more of a grasp on how large/small my 'potential datingpool' really is.. which is exactly what i need (cause; abundance mindset)
      'how-many-times-i-ghosted' // because i get slacky and dont redspond?
    'gaf-mij-compliment', // because maybe I want to keep track of how many compliments (physical? or about the personality?) this profile gets..
    'vibe-tags', // because I want to keep track of the characteristics // vibe i get from this person; religious, professional, posh, trashy, into-sports, outdoorsy, nerdy, dominant, submissive, sexual, etc.
        ZET HIER WELKE TAGS IK MOMENTEEL WEL GA ONDERSTEUNEN EN WELKE NIET! BEGIN KLEIN! */
    //todo: maybe it would be better to put all the check logic inside the DataField classes and subclasses anyway?

  }, {
    key: "getDataFields",
    value: function getDataFields(allowedFieldsOnly, requiredUIFieldsOnly, requiredUiScreen) {
      return this.usedDataFields.filter(function (dataField) {
        if (allowedFieldsOnly) {
          if (dataField.updateValueAllowed()) {
            return true;
          }

          return false;
        } //todo: logic below is a huge mess, fix!


        if (requiredUIFieldsOnly) {
          if (dataField.UISetting.UIrequired !== _dataField.UIRequired.NONE) {
            if (dataField.UISetting.UIrequired === _dataField.UIRequired.ALL) {
              return true;
            }

            if (requiredUiScreen !== undefined) {
              return dataField.UISetting.UIrequired === requiredUiScreen ? true : false;
            }

            return true;
          }

          return false;
        } // default returns all data fields


        return true;
      });
    }
  }, {
    key: "getAllAutoGatherDataFields",
    value: function getAllAutoGatherDataFields() {
      return this.usedDataFields.filter(function (dataField) {
        return dataField.autoGather;
      });
    }
  }]);
  return DataRecord;
}();

exports.DataRecord = DataRecord;
},{"@babel/runtime/helpers/slicedToArray":"xkYc","@babel/runtime/helpers/typeof":"FlpK","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","./dataField":"LTXP","./dataCheckLogic/dataCheckDate":"WBqD","./dataCheckLogic/dataCheckAttractiveness":"GYec","./dataCheckLogic/dataCheckConversationVibe":"bgrk","./dataCheckLogic/dataCheckGhosts":"m1NB","./dataCheckLogic/dataCheckReactionSpeed":"rk9e","./dataCheckLogic/dataCheckReminders":"kFWZ","./dataCheckLogic/dataCheckSystemId":"ispI","./dataCheckLogic/dataCheckMessage":"qrRP","./dataCheckLogic/dataCheckDistances":"cQaC","./dataCheckLogic/dataCheckListStrings":"WdOF"}],"mNpB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenNavStateComboTinder = void 0;
var ScreenNavStateComboTinder;
exports.ScreenNavStateComboTinder = ScreenNavStateComboTinder;

(function (ScreenNavStateComboTinder) {
  ScreenNavStateComboTinder["UnknownScreen"] = "UNKNOWN";
  ScreenNavStateComboTinder["Swipe"] = "SWIPE";
  ScreenNavStateComboTinder["SwipeGold"] = "SWIPEGOLD";
  ScreenNavStateComboTinder["SwipeExplore"] = "SWIPEEXPLORE";
  ScreenNavStateComboTinder["Chat"] = "CHAT";
  ScreenNavStateComboTinder["SwipeExploreDetail"] = "SWIPEEXPLOREDETAIL";
  ScreenNavStateComboTinder["SwipeDetail"] = "SWIPEDETAIL";
})(ScreenNavStateComboTinder || (exports.ScreenNavStateComboTinder = ScreenNavStateComboTinder = {}));
},{}],"ioSm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubmitType = void 0;
var SubmitType;
exports.SubmitType = SubmitType;

(function (SubmitType) {
  SubmitType["LIKED"] = "liked";
  SubmitType["PASSED"] = "passed";
  SubmitType["SUPERLIKED"] = "superliked";
  SubmitType["SENDMESSAGE"] = "sendMessage";
})(SubmitType || (exports.SubmitType = SubmitType = {}));
},{}],"phX9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOMHelper = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DOMHelper = /*#__PURE__*/function () {
  function DOMHelper() {
    (0, _classCallCheck2.default)(this, DOMHelper);
  }

  (0, _createClass2.default)(DOMHelper, null, [{
    key: "getFirstDOMNodeByJquerySelector",
    value: function getFirstDOMNodeByJquerySelector(jquerySelector) {
      var DOMNode = $(jquerySelector);

      if (DOMNode && DOMNode.length > 0) {
        return DOMNode.first()[0];
      } else {
        return null;
      }
    }
  }, {
    key: "getJqueryElementsByJquerySelector",
    value: function getJqueryElementsByJquerySelector(jquerySelector) {
      var JqueryElements = $(jquerySelector);

      if (JqueryElements && JqueryElements.length > 0) {
        return JqueryElements;
      } else {
        return null;
      }
    }
  }, {
    key: "getJqueryElementsByFindingInJqueryElement",
    value: function getJqueryElementsByFindingInJqueryElement($baseElement, searchElementPath) {
      var baseElement = $($baseElement);
      var JqueryElements = $(searchElementPath);

      if (baseElement.length > 0 && JqueryElements.length > 0) {
        var foundElements = $($baseElement).find(searchElementPath);

        if (foundElements.length > 0) {
          return foundElements;
        }

        return null;
      } else {
        return null;
      }
    }
  }]);
  return DOMHelper;
}();

exports.DOMHelper = DOMHelper;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"mcS9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CategoryStatus = void 0;
var CategoryStatus;
exports.CategoryStatus = CategoryStatus;

(function (CategoryStatus) {
  CategoryStatus[CategoryStatus["START"] = 0] = "START";
  CategoryStatus[CategoryStatus["END"] = 1] = "END";
})(CategoryStatus || (exports.CategoryStatus = CategoryStatus = {}));
},{}],"QvSI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogColors = void 0;
var LogColors;
exports.LogColors = LogColors;

(function (LogColors) {
  LogColors["RED"] = "#ff0000";
  LogColors["YELLOW"] = "#ffff00";
  LogColors["GREEN"] = "#00cc00";
  LogColors["BLUE"] = "#0099ff";
  LogColors["LIGHTGREY"] = "#e0e0e0";
  LogColors["NONE"] = "none";
})(LogColors || (exports.LogColors = LogColors = {}));
},{}],"XbQV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsoleColorLog = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _CategoryStatus = require("./CategoryStatus");

var _LogColors = require("./LogColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConsoleColorLog =
/** @class */
function () {
  var ConsoleColorLog = /*#__PURE__*/function () {
    function ConsoleColorLog() {
      (0, _classCallCheck2.default)(this, ConsoleColorLog);
    }

    (0, _createClass2.default)(ConsoleColorLog, null, [{
      key: "singleLog",
      value: function singleLog(message, value) {
        var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _LogColors.LogColors.LIGHTGREY;

        var colorValue = this._getValueColor(value);

        if (typeof value === "string" && value.length === 0) {
          value = "EMPTY STRING";
        }

        console.log("%c" + message + " : " + "%c" + value, "color:" + color + "; font-weight:bold; background-color: " + this.currentActiveCategoryColor + ";", "color:" + colorValue);
      }
    }, {
      key: "multiLog",
      value: function multiLog(message, value) {
        var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _LogColors.LogColors.LIGHTGREY;
        var hasUnderline = arguments.length > 3 ? arguments[3] : undefined;

        var colorValue = this._getValueColor(value); // eslint-disable-next-line no-console


        console.log("%c" + message + " :", "color:" + color + "; font-weight:bold; background-color: " + this.currentActiveCategoryColor + ";"); // eslint-disable-next-line no-console

        console.dir(value);

        if (hasUnderline) {
          // eslint-disable-next-line no-console
          console.log("%c ================================================", "color:" + color + ";");
        }
      }
    }, {
      key: "startCategorizedLogs",
      value: function startCategorizedLogs(categoryStatus) {
        var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _LogColors.LogColors.LIGHTGREY;

        // starting multiple categories at the same time is not yet supported!
        if (categoryStatus === _CategoryStatus.CategoryStatus.START && this.currentCategoryStatus === _CategoryStatus.CategoryStatus.START) {
          throw Error("A currently started category cannot be started again. End the current category first.");
        }

        if (categoryStatus === _CategoryStatus.CategoryStatus.END && this.currentCategoryStatus === _CategoryStatus.CategoryStatus.END) {
          throw Error("A currently ended category cannot be ended again. Start a new category first.");
        }

        if (categoryStatus === _CategoryStatus.CategoryStatus.START) {
          this.currentCategoryStatus = _CategoryStatus.CategoryStatus.START;
          this.currentActiveCategoryColor = color;
        } else {
          this.currentCategoryStatus = _CategoryStatus.CategoryStatus.END;
          this.currentActiveCategoryColor = _LogColors.LogColors.NONE;
        }
      }
    }, {
      key: "_getValueColor",
      value: function _getValueColor(value) {
        var result = _LogColors.LogColors.LIGHTGREY;

        switch ((0, _typeof2.default)(value)) {
          case "boolean":
            result = value ? _LogColors.LogColors.GREEN : _LogColors.LogColors.RED;
            break;

          case null:
          case "undefined":
            result = _LogColors.LogColors.RED;
            break;

          default:
            result = _LogColors.LogColors.LIGHTGREY;
        }

        return result;
      }
    }]);
    return ConsoleColorLog;
  }();

  ConsoleColorLog.currentActiveCategoryColor = _LogColors.LogColors.NONE;
  ConsoleColorLog.currentCategoryStatus = _CategoryStatus.CategoryStatus.END;
  return ConsoleColorLog;
}();
/*
HINT: MULTIPLE COLORS IN 1 LINE IS POSSIBLE:
console.log(
  'Nothing here %cHi Cat %cHey Bear', // Console Message
  'color: blue',
  'color: red', // CSS Style
);
*/


exports.ConsoleColorLog = ConsoleColorLog;
},{"@babel/runtime/helpers/typeof":"FlpK","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","./CategoryStatus":"mcS9","./LogColors":"QvSI"}],"SBm3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UIFieldsRenderer = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _dataField = require("../data/dataField");

var _SubmitType = require("../../../SubmitType.enum");

var _DOMHelper = require("../util/DOMHelper");

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UIFieldsRenderer = /*#__PURE__*/function () {
  function UIFieldsRenderer(screenList) {
    var _this = this;

    (0, _classCallCheck2.default)(this, UIFieldsRenderer);
    this.decoratedSubmitEventsDOMElementsList = [];
    this.templatesList = [{
      name: 'sliderBootstrap',
      label: _dataField.UIRequiredType.SLIDER,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'INPUT') {
          htmlElement = htmlElement;
          return htmlElement.valueAsNumber;
        }

        console.error("Event target nog set");
        return NaN;
      },
      template: function template(id, label, dataType, defaultValue) {
        defaultValue = defaultValue === null || defaultValue === undefined ? '' : defaultValue;
        return "\n                <div class=\"fieldContainer fieldContainer--slider\">\n                    <label for=\"".concat(id, "\" class=\"form-label\">").concat(label, "</label>\n                    <input type=\"range\" class=\"form-range\" min=\"1\" max=\"10\" step=\"1\" id=\"").concat(id, "\" value=\"").concat(defaultValue, "\" data-type=\"").concat(dataType, "\" data-templatename=\"sliderBootstrap\" data-recordref=\"").concat(label, "\">\n                    <div class=\"rangeNumberDisplayContainer\">\n                        <div class=\"rangeNumberDisplay\">1</div>\n                        <div class=\"rangeNumberDisplay\">2</div>\n                        <div class=\"rangeNumberDisplay\">3</div>\n                        <div class=\"rangeNumberDisplay\">4</div>\n                        <div class=\"rangeNumberDisplay\">5</div>\n                        <div class=\"rangeNumberDisplay\">6</div>\n                        <div class=\"rangeNumberDisplay\">7</div>\n                        <div class=\"rangeNumberDisplay\">8</div>\n                        <div class=\"rangeNumberDisplay\">9</div>\n                        <div class=\"rangeNumberDisplay\">10</div>\n                    </div>\n                </div>");
      }
    }, {
      name: 'switchBootstrap',
      label: _dataField.UIRequiredType.SWITCH,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'INPUT') {
          htmlElement = htmlElement;
          return htmlElement.checked ? true : false;
        }

        console.error("Event target not (correctly) set");
        return false;
      },
      template: function template(id, label, dataType, defaultValue) {
        defaultValue = defaultValue === null || defaultValue === undefined ? false : defaultValue;
        return "\n                <div class=\"fieldContainer fieldContainer--switch\">\n                    <div class=\"form-check form-switch\">\n                        <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"".concat(id, "\" ").concat(defaultValue ? 'checked' : '', " data-type=\"").concat(dataType, "\" data-templatename=\"switchBootstrap\" data-recordref=\"").concat(label, "\">\n                        <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">").concat(label, "</label>\n                    </div>\n                </div>");
      }
    }, {
      name: 'inputBootstrap',
      label: _dataField.UIRequiredType.ALPHANUMERIC_INPUT,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'INPUT') {
          htmlElement = htmlElement;
          return htmlElement.value;
        }

        console.error("Event target not set");
        return '';
      },
      template: function template(id, label, dataType, defaultValue) {
        defaultValue = defaultValue === null || defaultValue === undefined ? '' : defaultValue;
        return "\n                <div class=\"fieldContainer fieldContainer--input\">\n                    <div class=\"input-group mb-12\">\n                        <input id=\"".concat(id, "\" value=\"").concat(defaultValue, "\" data-type=\"").concat(dataType, "\" data-templatename=\"inputBootstrap\" type=\"text\" class=\"form-control\" placeholder=\"").concat(label, "\" aria-recordref=\"").concat(label, "\" data-recordref=\"").concat(label, "\" aria-describedby=\"basic-addon1\">\n                    </div>\n                </div>");
      }
    }, {
      name: 'inputBootstrapNumeric',
      label: _dataField.UIRequiredType.NUMERIC_INPUT,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'INPUT') {
          htmlElement = htmlElement;

          if (isNaN(parseInt(htmlElement.value))) {
            console.error("Inserted value: ".concat(htmlElement.value, " cannot be converted to a number. please check the input."));
          }

          return htmlElement.valueAsNumber;
        }

        console.error("Event target not set");
        return NaN;
      },
      template: function template(id, label, dataType, defaultValue) {
        defaultValue = defaultValue === null || defaultValue === undefined ? '' : defaultValue;
        return "\n                <div class=\"fieldContainer fieldContainer--input\">\n                    <div class=\"input-group mb-12\">\n                        <input id=\"".concat(id, "\" value=\"").concat(defaultValue, "\" data-type=\"").concat(dataType, "\" data-templatename=\"inputBootstrapNumeric\" type=\"number\" class=\"form-control\" placeholder=\"").concat(label, "\" aria-recordref=\"").concat(label, "\" data-recordref=\"").concat(label, "\" aria-describedby=\"basic-addon1\">\n                    </div>\n                </div>");
      }
    }, {
      name: 'multiselectBootstrap',
      label: _dataField.UIRequiredType.MULTISELECT,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'SELECT') {
          htmlElement = htmlElement;
          var selectedOptionsList = $(htmlElement).select2('data');
          var currentSelectedOptions = selectedOptionsList.map(function (data) {
            return data.text;
          });
          console.log("My current selected options are: ".concat(currentSelectedOptions.join(', ')));
          return currentSelectedOptions;
        }

        console.error("Event target (HTML Select Element) nog set");
        return [];
      },
      template: function template(id, label, dataType, selectedValues, values) {
        if (!Array.isArray(selectedValues)) {
          console.error("Incorrect data value provided. Provided selectedValues is not an array");
          return "";
        }

        values = values && values.length > 0 ? values : [];
        var multiSelectOptionsHTML = '';
        values.forEach(function (value) {
          multiSelectOptionsHTML += "<option value=\"".concat(value, "\" ").concat(selectedValues.includes(value) ? "selected" : "", ">").concat(value, "</option>");
        });
        return "\n                <div class=\"fieldContainer fieldContainer--multiselect\">\n                    <label class=\"form-label select-label\">".concat(label, "</label> \n                    <br/>       \n                    <select id=\"").concat(id, "\" data-type=\"").concat(dataType, "\" data-templatename=\"multiselectBootstrap\" data-recordref=\"").concat(label, "\" class=\"select2\" multiple=\"multiple\">\n                                ").concat(multiSelectOptionsHTML, "\n                    </select>\n                </div>");
      }
    }, {
      name: 'textareaBootstrap',
      label: _dataField.UIRequiredType.TEXTAREA,
      getValueMethod: function getValueMethod(htmlElement) {
        if (htmlElement && htmlElement.tagName === 'TEXTAREA') {
          htmlElement = htmlElement;
          return htmlElement.value;
        }

        console.error("Event target nog set");
        return '';
      },
      template: function template(id, label, dataType, defaultValue) {
        defaultValue = defaultValue === null || defaultValue === undefined ? '' : defaultValue;
        return "\n                <div class=\"fieldContainer fieldContainer--textarea\">\n                    <div class=\"form-floating\">\n                        <textarea id=\"".concat(id, "\" data-type=\"").concat(dataType, "\" data-templatename=\"textareaBootstrap\" data-recordref=\"").concat(label, "\" class=\"form-control\" id=\"floatingTextarea\">").concat(defaultValue, "</textarea>\n                        <label for=\"floatingTextarea\">").concat(label, "</label>\n                    </div>\n                </div>");
      }
    }];
    this.dataFields = [];

    this.valuesEventHandler = function (event) {
      var dataType = _this._getDataType(event.currentTarget);

      var templateName = _this._getTemplateName(event.currentTarget);

      var UIRecordRef = _this._getUIRecordRef(event.currentTarget);

      if (dataType && templateName && UIRecordRef) {
        var value = _this._getValueByTemplateName(templateName, event.currentTarget); //todo: use label instead of dataType for getting the value?


        var newDataRecordValue = {
          'label': UIRecordRef,
          'value': value
        };

        if (_this.valuesCallback) {
          _this.valuesCallback(newDataRecordValue);
        } else {
          console.error("Callback method was not set");
        }
      } else {
        console.error("Could not get data type. Please ensure it is set.");
      }
    };

    this.submitEventHandler = function (event) {
      var submitType = _this._getSubmitType(event.currentTarget);

      if (_this.preSubmitCallback && _this.submitCallback && submitType) {
        if (event.type === "mousedown" && _this.preSubmitCallback) {
          _this.preSubmitCallback(submitType);

          return;
        }

        _this.submitCallback(submitType);
      } else {
        console.error("Could not submit type. Please ensure it is set.");
      }
    };

    this.screenList = screenList;
    console.log("UIRenderer init");
  }

  (0, _createClass2.default)(UIFieldsRenderer, [{
    key: "_getSubmitType",
    value: function _getSubmitType(currentTarget) {
      switch (true) {
        case currentTarget.id.replace('submitAction_', '') === 'liked':
          return _SubmitType.SubmitType.LIKED;

        case currentTarget.id.replace('submitAction_', '') === 'superliked':
          return _SubmitType.SubmitType.SUPERLIKED;

        case currentTarget.id.replace('submitAction_', '') === 'passed':
          return _SubmitType.SubmitType.PASSED;

        case currentTarget.id.replace('submitAction_', '') === 'sendMessage':
          return _SubmitType.SubmitType.SENDMESSAGE;

        default:
          return undefined;
      }
    }
  }, {
    key: "_getValueByTemplateName",
    value: function _getValueByTemplateName(templateName, HTMLInputElement) {
      var indexTemplateByDataType = this.templatesList.findIndex(function (template) {
        return template.name === templateName;
      });

      if (indexTemplateByDataType !== -1) {
        return this.templatesList[indexTemplateByDataType].getValueMethod(HTMLInputElement);
      }

      console.error("Could not get value of template with label: ".concat(templateName));
      return undefined;
    }
  }, {
    key: "_getTemplateName",
    value: function _getTemplateName(currentTarget) {
      if (!currentTarget) {
        console.error("Event target was not set for getting data type");
        return undefined;
      }

      return currentTarget && Object.prototype.hasOwnProperty.call(currentTarget.dataset, "templatename") ? currentTarget.dataset.templatename : undefined;
    }
  }, {
    key: "_getUIRecordRef",
    value: function _getUIRecordRef(currentTarget) {
      if (!currentTarget) {
        console.error("Event target was not set for getting data type");
        return undefined;
      }

      return currentTarget && Object.prototype.hasOwnProperty.call(currentTarget.dataset, "recordref") ? currentTarget.dataset.recordref : undefined;
    }
  }, {
    key: "_getDataType",
    value: function _getDataType(currentTarget) {
      if (!currentTarget) {
        console.error("Event target was not set for getting data type");
        return undefined;
      }

      return currentTarget && Object.prototype.hasOwnProperty.call(currentTarget.dataset, "type") ? currentTarget.dataset.type : undefined;
    }
  }, {
    key: "renderFieldsContainerForScreen",
    value: function renderFieldsContainerForScreen(screenController, additionalScreenAdjustments, collectProfileDataFromDOMCallback) {
      var _this2 = this;

      this._collectProfileDataFromDOMCallback = collectProfileDataFromDOMCallback;

      if (screenController.isSwipeScreen()) {
        $('body').prepend("\n                <div id=\"uiHelperFields\" class=\"uiHelperFieldsContainer uiHelperFieldsContainer--select\">\n                <div id=\"uiHelperFieldsCollectData\">\n                    <button id=\"uiHelperFieldsCollectDataButton\">Collect Data</button>\n                </div>\n                <div id=\"uiHelperFieldsHide\">\n                        <button id=\"uiHelperFieldsHideButton\">Hide</button>\n                    </div>\n                    <form id=\"uiHelperFieldsForm\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div id=\"uiHelperFieldsContainer\" class=\"col-12\">\n                                    <p class=\"h5\">T-Helper fields</p>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div id=\"uiHelperFieldsShow\">\n                    <button id=\"uiHelperFieldsShowButton\">show</button>\n                </div>\n            ");
      }

      if (screenController.isChatScreen()) {
        $('body').prepend("\n            <div id=\"uiHelperFields\" class=\"uiHelperFieldsContainer uiHelperFieldsContainer--chat\">\n                <div id=\"uiHelperFieldsHide\">\n                    <button id=\"uiHelperFieldsHideButton\">Hide</button>\n                </div>\n                <form id=\"uiHelperFieldsForm\">\n                    <div class=\"container\">\n                        <div class=\"row\">\n                            <div id=\"uiHelperFieldsContainer\" class=\"col-12\">\n                                <p class=\"h5\">T-Helper fields</p>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div id=\"uiHelperFieldsShow\">\n                <button id=\"uiHelperFieldsShowButton\">show</button>\n            </div>\n        ");
      }

      if ($("#uiHelperFields").length === 0) {
        var errUiHelperFields = "Container with id uiHelperFields was not set. Please check the logic for rendering the fields container";

        _ConsoleColorLog.ConsoleColorLog.singleLog(errUiHelperFields, null, _LogColors.LogColors.RED);

        throw new Error(errUiHelperFields);
      }

      this._setSubmitEventHandlers(screenController);

      if (additionalScreenAdjustments) {
        additionalScreenAdjustments();
      }

      $("body").on("blur", '#uiHelperFieldsContainer [id^="datafieldUI_"]', this.valuesEventHandler);
      $("body").on("change", '#uiHelperFieldsContainer .select2', this.valuesEventHandler);
      $("body").on("mouseup", '[id^="submitAction_"]', this.submitEventHandler);
      $("body").on("mousedown", '[id^="submitAction_"]', this.submitEventHandler); // NOTE: Due to my mouse or otherwise; the mouseup/mousedown fires 5-6 times in short succession

      $("body").on("click", '[id="uiHelperFieldsCollectDataButton"]', function () {
        if (_this2._collectProfileDataFromDOMCallback) {
          _this2._collectProfileDataFromDOMCallback();
        } else {
          alert("Whoops! Seems like ");
        }
      });
      $("body").on("click", '[id="uiHelperFieldsShowButton"]', function () {
        $("#uiHelperFields").show();
        $("#uiHelperFieldsShowButton").hide();
      });
      $("body").on("click", '[id="uiHelperFieldsHideButton"]', function () {
        $("#uiHelperFields").hide();
        $("#uiHelperFieldsShowButton").show();
      });
    }
  }, {
    key: "_setSubmitEventHandlers",
    value: function _setSubmitEventHandlers(screenController) {
      if (screenController.isSwipeScreen()) {
        // const submitButtonDOMType_pass = $(".recsCardboard__cards div[class*=c-pink] button").first();
        var submitButtonDOMType_pass = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector(screenController.getCurrentScreen().getScreenActionActionDOMRefByActionName('pass'));

        if (submitButtonDOMType_pass !== null) {
          $(submitButtonDOMType_pass).attr('id', 'submitAction_passed');
          this.decoratedSubmitEventsDOMElementsList.push(submitButtonDOMType_pass);
        } else {
          console.error("submitAction_passed could not be set! submit button not found. Please update the selector.");
        }

        var submitButtonDOMType_superlike = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector( // this.screenList.getActionDOMRef(ScreenNavStateComboTinder.Swipe, 'superlike')
        screenController.getCurrentScreen().getScreenActionActionDOMRefByActionName('superlike'));

        if (submitButtonDOMType_superlike !== null) {
          $(submitButtonDOMType_superlike).attr('id', 'submitAction_superliked');
          this.decoratedSubmitEventsDOMElementsList.push(submitButtonDOMType_superlike);
        } else {
          console.error("submitAction_superliked could not be set! submit button not found. Please update the selector.");
        }

        var submitButtonDOMType_like = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector( // this.screenList.getActionDOMRef(ScreenNavStateComboTinder.Swipe, 'like')
        screenController.getCurrentScreen().getScreenActionActionDOMRefByActionName('like'));

        if (submitButtonDOMType_like !== null) {
          $(submitButtonDOMType_like).attr('id', 'submitAction_liked');
          this.decoratedSubmitEventsDOMElementsList.push(submitButtonDOMType_like);
        } else {
          console.error("submitAction_pass could not be set! submit button not found. Please update the selector.");
        }
      }

      if (screenController.getCurrentScreen().getScreenIsChatScreen()) {
        // const submitButtonDOMType_sendMessage = $("div.BdT > form > button[type='submit']").first();
        var submitButtonDOMType_sendMessage = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector(screenController.getCurrentScreen().getScreenActionActionDOMRefByActionName('sendMessage'));

        if (submitButtonDOMType_sendMessage !== null) {
          $(submitButtonDOMType_sendMessage).attr('id', 'submitAction_sendMessage');
          this.decoratedSubmitEventsDOMElementsList.push(submitButtonDOMType_sendMessage);
        } else {
          console.error("submitAction_sendMessage could not be set! submit button not found. Please update the selector.");
        }
      }
    }
  }, {
    key: "renderFieldsFromDataFields",
    value: function renderFieldsFromDataFields(dataFields, valuesCallback, preSubmitCallback, submitCallback) {
      this.dataFields = this.dataFields.concat(dataFields);

      if (!$('body').find('#uiHelperFieldsContainer').first()[0]) {
        console.error("Could not place helper fields because helper container with id ".concat('uiHelperFieldsContainer', " does not exist."));
      }

      if (!dataFields.every(function (dataFieldType) {
        return dataFieldType.UISetting.UIrequiredType !== null;
      })) {
        console.error("Provided datafields do not have a requiredFieldType: ".concat(dataFields));
      }

      if (!valuesCallback || !submitCallback || !preSubmitCallback) {
        console.error("Callback method for values or (pre-)submit was not set");
      }

      this.valuesCallback = valuesCallback;
      this.preSubmitCallback = preSubmitCallback;
      this.submitCallback = submitCallback;
      this.updateDataFieldValues();
    }
  }, {
    key: "updateDataFieldValues",
    value: function updateDataFieldValues() {
      var _this3 = this;

      $('body').find('#uiHelperFieldsContainer').empty();
      $('body').find('#uiHelperFieldsContainer').append('<p class="h5">T-Helper fields</p>');
      this.dataFields.forEach(function (dataField, index) {
        var requiredTemplateIndex = _this3.templatesList.findIndex(function (template) {
          return template.label === dataField.UISetting.UIrequiredType;
        });

        var dataFieldValue = dataField.getValue(); // console.log(`RENDERING UI FIELD. DEFAULT VALUE FOR ${dataField.title} SHOULD BE: ${dataField.getValue()}`);

        $('body').find('#uiHelperFieldsContainer').first().append(_this3.templatesList[requiredTemplateIndex].template("datafieldUI_".concat(index), dataField.title, dataField.dataLogic.baseType, dataFieldValue, dataField.options));
      });
      this.activateMultiSelectDropdown();
    }
  }, {
    key: "activateMultiSelectDropdown",
    value: function activateMultiSelectDropdown() {
      $(".select2").select2({
        placeholder: 'Select an option',
        closeOnSelect: false,
        width: '100%'
      });
    }
  }, {
    key: "removeAllUIHelpers",
    value: function removeAllUIHelpers() {
      this.resetExistingFields();
      $("body").off("blur", '#uiHelperFieldsContainer [id^="datafieldUI_"]');
      $("body").off("click", '[id="uiHelperFieldsCollectDataButton"]');
      $("body").off("click", '[id="uiHelperFieldsHideButton"]');
      $("#uiHelperFieldsContainer").remove();
      $("body").off("mouseup", '[id^="submitAction_"]');
      $("body").off("mousedown", '[id^="submitAction_"]');
      $("body").off("click", '[id="uiHelperFieldsShowButton"]');
      $("#uiHelperFieldsShow").remove();

      for (var i = 0; i <= this.decoratedSubmitEventsDOMElementsList.length - 1; i = i + 1) {
        $(this.decoratedSubmitEventsDOMElementsList[i]).removeAttr('id');
      }

      this.valuesCallback = undefined;
      this.preSubmitCallback = undefined;
      this.submitCallback = undefined;
      this._collectProfileDataFromDOMCallback = undefined;
      this.dataFields = [];
      var helperFieldsContainer = $("#uiHelperFields");

      if (helperFieldsContainer.length > 0) {
        helperFieldsContainer.toArray().forEach(function (element) {
          $(element).remove();
        });
      }
    }
  }, {
    key: "resetExistingFields",
    value: function resetExistingFields() {
      var HTMLFormElement = $("#uiHelperFieldsForm").first();

      if (HTMLFormElement.length > 0 && HTMLFormElement[0].tagName === 'FORM') {
        //todo: there must be a better way to do this?
        HTMLFormElement.trigger("reset"); //todo: also; this is done to exclusively set the value of all textarea's to empty? There must be a better way?

        HTMLFormElement.find('textarea').each(function () {
          this.value = '';
        });
      }
    }
  }]);
  return UIFieldsRenderer;
}();

exports.UIFieldsRenderer = UIFieldsRenderer;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../data/dataField":"LTXP","../../../SubmitType.enum":"ioSm","../util/DOMHelper":"phX9","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI"}],"wbUO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestHandlerTinder = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RequestHandlerTinder = /*#__PURE__*/function () {
  function RequestHandlerTinder(xAuthToken) {
    (0, _classCallCheck2.default)(this, RequestHandlerTinder);
    this.xAuthToken = xAuthToken;
  }

  (0, _createClass2.default)(RequestHandlerTinder, [{
    key: "getRandomCoupleHunderdMS",
    value: function getRandomCoupleHunderdMS() {
      // for some reason,.. private classes dont work?
      return Math.floor(Math.random() * 100) + 100;
    }
  }, {
    key: "getMatches",
    value: function () {
      var _getMatches = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(auth_token, next_page_token_num) {
        var next_page_token, getMatches;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.dir("ik ga tindermatches ophalen, oh en de nextpagetokenis: ".concat(next_page_token_num));
                next_page_token = next_page_token_num ? '&page_token=' + next_page_token_num : '';

                if (!auth_token) {
                  console.error("Provided auth_token invalid!");
                } //todo: inplement check to see if matches data structure? something like a throw catch to check if the value can be reached and if not.. throw a nice error


                getMatches = new Promise(function (resolve, reject) {
                  // NOTE: Tinder gives you the 'next page of results' by providing the "next_page_token" provided with the previous request response if present
                  // note 2: "message=0" if no messages have been exchanged yet, "message=1" if messages have been exchanged yet
                  var ms = Math.floor(Math.random() * 100) + 100;
                  setTimeout(function () {
                    // console.log(`I delayed at: ${ms}`); //todo: figure out why i cannot call the this.getRandomCoupleHunderdMS method here
                    fetch("https://api.gotinder.com/v2/matches?locale=nl&count=100".concat(next_page_token), {
                      method: 'GET',
                      credentials: 'include',
                      headers: {
                        'Content-Type': 'application/json',
                        'X-Auth-Token': auth_token
                      }
                    }).then(function (result) {
                      return result.json(); // the result of the fetch is a promise, but calling .json on this result also returns a promise!
                      // the first .then return the json representation of the result, which is also a promise..
                    }).catch(function (error) {
                      console.log("tindermatches error! Error is:");
                      console.dir(error);
                      reject(error);
                    }).then(function (resultJSON) {
                      // console.log(`tindermatches JSON result is: ${resultJSON}`);
                      resolve(resultJSON);
                    });
                  }, ms);
                });
                return _context.abrupt("return", getMatches);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getMatches(_x, _x2) {
        return _getMatches.apply(this, arguments);
      }

      return getMatches;
    }() // public getMessagesFromMatch(auth_token: string, match_id: string, next_page_token_num?:string):Promise<ParsedResultMessages>{

  }, {
    key: "getMessagesFromMatch",
    value: function getMessagesFromMatch(auth_token, match_id, next_page_token_num) {
      var next_page_token = next_page_token_num ? '&page_token=' + next_page_token_num : '';
      console.log('2a'); // const getMatchMessages = new Promise<ParsedResultMessages>((resolve, reject) => {

      var getMatchMessages = new Promise(function (resolve, reject) {
        var ms = Math.floor(Math.random() * 100) + 100;
        setTimeout(function () {
          // console.log(`I delayed at: ${ms}`); //todo: figure out why i cannot call the this.getRandomCoupleHunderdMS method here
          //https://api.gotinder.com/v2/matches/528ce2770640a14b0f00007c601a943026064201006f6133/messages?locale=nl&count=100&page_token=MjAyMS0wNi0wNlQxOTo0Nzo0Ni4xMzJa
          fetch("https://api.gotinder.com/v2/matches/".concat(match_id, "/messages?locale=nl&count=100").concat(next_page_token), {
            method: 'GET',
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json',
              'X-Auth-Token': auth_token
            }
          }).then(function (result) {
            console.log('2b');
            return result.json();
          }).catch(function (error) {
            console.log("tindermatchmessage error! Error is:");
            console.dir(error);
            reject(error);
          }).then(function (resultJSON) {
            console.log('2c');
            console.log("tindermatch message JSON result is:");
            console.dir(resultJSON);
            resolve(resultJSON);
          });
        }, ms);
      });
      return getMatchMessages; // example response (note: messages are from most recent to first, so the first few messageobjects in array are the most recent ones!):
      // data: {
      //     messages: [{
      //     created_date: "2021-06-06T19:47:36.682Z"
      //     from: "528ce2770640a14b0f00007c"
      //     match_id: "528ce2770640a14b0f00007c601a943026064201006f6133"
      //     message: "I added your number but i do not see support for whatsapp"
      //     sent_date: "2021-06-06T19:47:36.682Z"
      //     timestamp: 1623008856682
      //     to: "601a943026064201006f6133"
      //     _id: "60bd2658b38e7e0100ec2f0f"
      // }],
      //     next_page_token: "MjAyMS0wNi0wMlQwNTo1Mjo0My4wNjha"
      // }
    } //todo: code below gets the conversation with one of my old matches i had of which deleted me as a match, but apparantly the conversation is still there!
    // this means that the conversation still exists even if a match is no longer valid, thus i really need to check the data retrieved by my api's to ensure no false positives (like a 'ongoing'-conversation with a non-existing match)
    // NOTE like/not like user:
    // https://api.gotinder.com/like/61aa9d0aa4ea490100ca143a?locale=nl
    // this sends a like to the user by that id
    // private getMatchesStart = (fn:(Function)):Promise<ParsedResultMatch[]> => {

  }, {
    key: "getMatchesStart",
    value: function getMatchesStart() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var results = [];

        var attempt = function attempt(next_page_token) {
          next_page_token = next_page_token ? next_page_token : '';

          _this.getMatches(_this.xAuthToken, next_page_token).then(function (parsedResult) {
            var _parsedResult$data;

            if (parsedResult === null || parsedResult === void 0 ? void 0 : (_parsedResult$data = parsedResult.data) === null || _parsedResult$data === void 0 ? void 0 : _parsedResult$data.matches) {
              var _parsedResult$data2;

              parsedResult === null || parsedResult === void 0 ? void 0 : (_parsedResult$data2 = parsedResult.data) === null || _parsedResult$data2 === void 0 ? void 0 : _parsedResult$data2.matches.forEach(function (match) {
                results.push({
                  match: match,
                  matchMessages: []
                });
              });
            }

            if (parsedResult.data.next_page_token) {
              attempt(parsedResult.data.next_page_token);
            } else {
              console.log("Finished getting results:");
              console.dir(results);
              resolve(results);
            }
          }).catch(function (e) {
            console.log("Error retrieving matches:");
            console.dir(e);
            var error = e;
            reject(error);
          });
        };

        attempt();
      });
    }
  }, {
    key: "getMatchesMessagesStart",
    value: function getMatchesMessagesStart(id) {
      var _this2 = this;

      console.log("STARTED - GETTING MESSAGES FOR: ".concat(id));
      return new Promise(function (resolve, reject) {
        console.log(2);
        var resultsMessages = [];

        var attempt = /*#__PURE__*/function () {
          var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(next_page_token) {
            return _regenerator.default.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    next_page_token = next_page_token ? next_page_token : '';
                    _context3.next = 3;
                    return _this2.getMessagesFromMatch(_this2.xAuthToken, id, next_page_token).then( /*#__PURE__*/function () {
                      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(messages) {
                        var _messages$data$next_p;

                        return _regenerator.default.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                console.log(3);
                                resultsMessages = [].concat((0, _toConsumableArray2.default)(resultsMessages), (0, _toConsumableArray2.default)(messages.data.messages));

                                if (!(messages.data.next_page_token && ((_messages$data$next_p = messages.data.next_page_token) === null || _messages$data$next_p === void 0 ? void 0 : _messages$data$next_p.length) > 0)) {
                                  _context2.next = 8;
                                  break;
                                }

                                console.log("START CONTINUE: Got a page token so need to get more messages for ".concat(id));
                                _context2.next = 6;
                                return attempt(messages.data.next_page_token);

                              case 6:
                                _context2.next = 10;
                                break;

                              case 8:
                                console.log("ENDED - Getting MESSAGES FOR: ".concat(id, " && i got a next_page_token: ").concat(next_page_token));
                                return _context2.abrupt("return", resolve(resultsMessages));

                              case 10:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      }));

                      return function (_x4) {
                        return _ref2.apply(this, arguments);
                      };
                    }()).catch(function (e) {
                      console.log(4);
                      console.log("ENDED (ERROR) - Getting MESSAGES FOR: ".concat(id));
                      return reject([]);
                      console.log("Error retrieving match messages:");
                      console.dir(e);
                      var error = e;
                      reject(error);
                    });

                  case 3:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));

          return function attempt(_x3) {
            return _ref.apply(this, arguments);
          };
        }();

        attempt();
      });
    }
  }, {
    key: "getProfileDetailsStart",
    value: function () {
      var _getProfileDetailsStart = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(personId) {
        var _this3 = this;

        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", new Promise(function (resolve, reject) {
                  var attempt = /*#__PURE__*/function () {
                    var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
                      return _regenerator.default.wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              _context5.next = 2;
                              return _this3.getProfileDetails(_this3.xAuthToken, personId).then( /*#__PURE__*/function () {
                                var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(profileData) {
                                  return _regenerator.default.wrap(function _callee4$(_context4) {
                                    while (1) {
                                      switch (_context4.prev = _context4.next) {
                                        case 0:
                                          // console.log(profileData);
                                          resolve(profileData);

                                        case 1:
                                        case "end":
                                          return _context4.stop();
                                      }
                                    }
                                  }, _callee4);
                                }));

                                return function (_x6) {
                                  return _ref4.apply(this, arguments);
                                };
                              }()).catch(function (e) {
                                // console.log(e);
                                reject(e);
                              });

                            case 2:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    }));

                    return function attempt() {
                      return _ref3.apply(this, arguments);
                    };
                  }();

                  attempt();
                }));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function getProfileDetailsStart(_x5) {
        return _getProfileDetailsStart.apply(this, arguments);
      }

      return getProfileDetailsStart;
    }()
  }, {
    key: "getProfileDetails",
    value: function getProfileDetails(xAuthToken, id) {
      return new Promise(function (resolve, reject) {
        var ms = Math.floor(Math.random() * 100) + 100;
        setTimeout(function () {
          fetch("https://api.gotinder.com/user/".concat(id), {
            method: 'GET',
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json',
              'X-Auth-Token': xAuthToken
            }
          }).then(function (result) {
            if (!result.ok && result.status === 404) {
              console.info("Match with id: ".concat(id, " returned a 404. Likely match has removed profile and as a result the match along with it."));
              return resolve(result.json());
            }

            if (result.ok && result.status === 200) {
              return resolve(result.json());
            }

            console.error("Unknown response for ".concat(id, ". Please check the network logs."));
            return reject();
          }).catch(function (error) {
            return reject(error);
          });
        }, ms);
      });
    }
  }, {
    key: "getMatchDetails",
    value: function getMatchDetails(xAuthToken, systemId) {
      return new Promise(function (resolve, reject) {
        var ms = Math.floor(Math.random() * 100) + 100;
        setTimeout(function () {
          fetch("https://api.gotinder.com/v2/matches/".concat(systemId, "?locale=nl"), {
            method: 'GET',
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json',
              'X-Auth-Token': xAuthToken
            }
          }).then(function (result) {
            // debugger; 
            return resolve(result.json()); // if(!result.ok && result.status === 404){ 
            //     return resolve(404) 
            // } 
            // if(result.ok && result.status === 200){ 
            //     return resolve(result.json()) 
            // } 
            // return reject(); 
          }).catch(function (error) {
            return reject(error);
          });
        }, ms);
      });
    }
  }, {
    key: "getMatchDetailsStart",
    value: function () {
      var _getMatchDetailsStart = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9(systemId) {
        var _this4 = this;

        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", new Promise(function (resolve, reject) {
                  var attempt = /*#__PURE__*/function () {
                    var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
                      return _regenerator.default.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              _context8.next = 2;
                              return _this4.getMatchDetails(_this4.xAuthToken, systemId).then( /*#__PURE__*/function () {
                                var _ref6 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(matchData) {
                                  return _regenerator.default.wrap(function _callee7$(_context7) {
                                    while (1) {
                                      switch (_context7.prev = _context7.next) {
                                        case 0:
                                          if (!(matchData.meta.status === 200 && matchData.data)) {
                                            _context7.next = 4;
                                            break;
                                          }

                                          return _context7.abrupt("return", resolve(matchData.data));

                                        case 4:
                                          if (!(matchData.meta.status === 404)) {
                                            _context7.next = 6;
                                            break;
                                          }

                                          return _context7.abrupt("return", resolve(404));

                                        case 6:
                                          console.log("Unexpected response in getMatchDetailsStart: ".concat(matchData));
                                          return _context7.abrupt("return", resolve(500));

                                        case 8:
                                        case "end":
                                          return _context7.stop();
                                      }
                                    }
                                  }, _callee7);
                                }));

                                return function (_x8) {
                                  return _ref6.apply(this, arguments);
                                };
                              }()).catch(function (e) {
                                // console.log(e);
                                return reject(e);
                              });

                            case 2:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8);
                    }));

                    return function attempt() {
                      return _ref5.apply(this, arguments);
                    };
                  }();

                  attempt();
                }));

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function getMatchDetailsStart(_x7) {
        return _getMatchDetailsStart.apply(this, arguments);
      }

      return getMatchDetailsStart;
    }()
  }, {
    key: "postReminderList",
    value: function () {
      var _postReminderList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(reminderHttpList, progressCallBack) {
        var i, result, errorText;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < reminderHttpList.length)) {
                  _context10.next = 13;
                  break;
                }

                console.log("%cPOSTLIST - Now sending reminder to: ".concat(i, " - ").concat(reminderHttpList[i].getTempId()), "color: red");
                _context10.next = 5;
                return this.postReminderWithTimeout(reminderHttpList[i]);

              case 5:
                result = _context10.sent;

                if (!result) {
                  errorText = "";
                  reminderHttpList[i].setReminderSentError(errorText);
                }

                reminderHttpList[i].setReminderSent();

                if (progressCallBack) {
                  progressCallBack(i, reminderHttpList.length, "Sent reminder to ".concat(reminderHttpList[i].getName()));
                }

                console.log("%cPOSTLIST - Reminder has been sent, going to send a new one now!", "color: red");

              case 10:
                i++;
                _context10.next = 1;
                break;

              case 13:
                console.log("%cPOSTLIST - this probably returns earlier than the reminders are actually sent", "color: red; background: white");
                return _context10.abrupt("return", reminderHttpList);

              case 15:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function postReminderList(_x9, _x10) {
        return _postReminderList.apply(this, arguments);
      }

      return postReminderList;
    }()
  }, {
    key: "postReminderWithTimeout",
    value: function () {
      var _postReminderWithTimeout = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11(reminderHttp) {
        var _this5 = this;

        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", new Promise(function (resolve, reject) {
                  console.log("POSTTIMEOUT - Going to send reminder with a delay for: ".concat(reminderHttp.getTempId(), "! Brace yourselves!"));
                  var ms = Math.floor(Math.random() * 100) + 100;
                  setTimeout(function () {
                    _this5.postReminder(reminderHttp).then(function (result) {
                      return resolve(true);
                    }).catch(function (error) {
                      reminderHttp.setReminderSentError(error);
                      return reject(error);
                    });

                    console.log("POSTTIMEOUT - Reminder with delay sent!");
                  }, ms);
                }));

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function postReminderWithTimeout(_x11) {
        return _postReminderWithTimeout.apply(this, arguments);
      }

      return postReminderWithTimeout;
    }()
  }, {
    key: "postReminder",
    value: function () {
      var _postReminder = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12(reminderHttp) {
        var result_2;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                console.log("POSTFETCH - Actually sending reminder now!");
                _context12.prev = 1;
                _context12.next = 4;
                return fetch("https://api.gotinder.com/user/matches/".concat(reminderHttp.getCompleteId(), "?locale=nl"), {
                  method: 'POST',
                  credentials: 'include',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Auth-Token': this.xAuthToken
                  },
                  body: JSON.stringify({
                    "userId": reminderHttp.getMyId(),
                    "otherId": reminderHttp.getTempId(),
                    "matchId": reminderHttp.getCompleteId(),
                    "message": reminderHttp.getMessage()
                  })
                });

              case 4:
                result_2 = _context12.sent;
                console.dir(result_2.json());
                console.log("POSTFETCH - Reminder for: ".concat(reminderHttp.getTempId(), " has been sent succesfully!"));
                return _context12.abrupt("return", true);

              case 10:
                _context12.prev = 10;
                _context12.t0 = _context12["catch"](1);
                console.log("POSTFETCH - Reminder for: ".concat(reminderHttp.getTempId(), " got error!"));
                return _context12.abrupt("return", _context12.t0);

              case 14:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[1, 10]]);
      }));

      function postReminder(_x12) {
        return _postReminder.apply(this, arguments);
      }

      return postReminder;
    }()
  }]);
  return RequestHandlerTinder;
}();

exports.RequestHandlerTinder = RequestHandlerTinder;
},{"@babel/runtime/helpers/toConsumableArray":"I9dH","@babel/runtime/helpers/asyncToGenerator":"Ittk","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/regenerator":"y2KZ"}],"m5GD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PersonAction = void 0;
var PersonAction;
exports.PersonAction = PersonAction;

(function (PersonAction) {
  PersonAction["LIKED_PERSON"] = "likedPerson";
  PersonAction["SUPER_LIKED_PERSON"] = "superLikedPerson";
  PersonAction["PASSED_PERSON"] = "passedPersonId";
})(PersonAction || (exports.PersonAction = PersonAction = {}));
},{}],"kRs2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageAuthorEnum = void 0;
var MessageAuthorEnum;
exports.MessageAuthorEnum = MessageAuthorEnum;

(function (MessageAuthorEnum) {
  MessageAuthorEnum["Me"] = "me";
  MessageAuthorEnum["Match"] = "match";
})(MessageAuthorEnum || (exports.MessageAuthorEnum = MessageAuthorEnum = {}));
},{}],"wjdh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reminder = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _message = require("../../../message.interface");

var _dateHelper = require("./dateHelper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Reminder = /*#__PURE__*/function () {
  function Reminder(messages, dateAcquiredNumber, dateBlockedOrRemoved, currentDateTimeNumber) {
    (0, _classCallCheck2.default)(this, Reminder);
    this.maxNumberReminders = 3; // if I sent a match a maximum of 3 reminder over a long period of time, EVEN IF she responded at some point, do not send any more reminders

    this.minDaysBetweenReminders = 2;
    this.minDaysForSendingReminder = 4;
    this.reminderAmountItem = [];
    this.dateAcquiredNumber = null;
    this.dateBlockedOrRemoved = null;
    this.reminderAmountItem = this._getReminderAmount(messages, dateAcquiredNumber, dateBlockedOrRemoved);
    this.dateAcquiredNumber = dateAcquiredNumber;
    this.dateBlockedOrRemoved = dateBlockedOrRemoved;
    this.currentDateTimeNumber = currentDateTimeNumber;
  }

  (0, _createClass2.default)(Reminder, [{
    key: "getNeedsReminder",
    value: function getNeedsReminder(messages) {
      if (messages === undefined) {
        console.error("Could not read tinder messages for this match. Expected an array of tinder messages but received: ".concat(messages));
        return false;
      } // match does not need a reminder IF we did not exchange any messages, i acquired the number, the match has been blocked or removed, the amount of reminders is greater than or equal to the max amount of reminders


      if (messages.length <= 0 || this.dateAcquiredNumber || this.dateBlockedOrRemoved || this.reminderAmountItem.length >= this.maxNumberReminders) {
        return false;
      }

      if (!this.isLastMessageUnanswered(messages)) {
        return false;
      } // if has total of 3 reminders/messages EACH seperated by at least 2-3 days, return false


      if (this.isLastReminderOverdue(messages)) {
        return true;
      }

      return false;
    }
  }, {
    key: "getReminderAmountItems",
    value: function getReminderAmountItems() {
      return this.reminderAmountItem;
    }
  }, {
    key: "isLastReminderOverdue",
    value: function isLastReminderOverdue(messages) {
      var lastReminder = this.getMostRecentMessages(messages);

      if (_dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(new Date(lastReminder.datetime).getTime(), this.currentDateTimeNumber, this.minDaysForSendingReminder)) {
        return true;
      }

      return false;
    }
  }, {
    key: "getMostRecentMessages",
    value: function getMostRecentMessages(messages) {
      var mostRecentMessage = messages[messages.length - 1];

      for (var i = 0; i < messages.length; i++) {
        if (!_dateHelper.DateHelper.isDateLaterThanDate(mostRecentMessage.datetime, messages[i].datetime)) {
          mostRecentMessage = messages[i];
        }
      }

      return mostRecentMessage;
    }
  }, {
    key: "isLastMessageUnanswered",
    value: function isLastMessageUnanswered(messages) {
      if (messages.length > 0 && messages[messages.length - 1].author === _message.MessageAuthorEnum.Me) {
        if (_dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(new Date(messages[messages.length - 1].datetime).getTime(), this.currentDateTimeNumber, this.minDaysForSendingReminder)) {
          return true;
        }

        return false;
      }

      return false;
    }
  }, {
    key: "_getReminderAmount",
    value: function _getReminderAmount(matchMessages, dateAcquiredNumber, dateBlockedOrRemoved) {
      var _this = this;

      var reminderAmountList = [];
      var reminderAmount = 0;
      var previousMessage;

      if (matchMessages.length <= 0) {
        return reminderAmountList;
      }

      matchMessages.forEach(function (message, index, list) {
        var isMessagePreviousLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(message.datetime, dateAcquiredNumber) : false;
        var isMessagePreviousLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(message.datetime, dateBlockedOrRemoved) : false;

        if (isMessagePreviousLaterThanAcquiredNumberDate || isMessagePreviousLaterThanBlockedDate) {
          // date is later than acquired number date OR blocked or removed match date, thus should no longer add reminder item.
          return;
        }

        if (index === 0) {
          previousMessage = message;
        } else {
          if (_dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(new Date(previousMessage.datetime).getTime(), new Date(message.datetime).getTime(), _this.minDaysBetweenReminders)) {
            if (previousMessage.author === _message.MessageAuthorEnum.Me && message.author === _message.MessageAuthorEnum.Me) {
              var _list;

              reminderAmountList.push({
                number: reminderAmount,
                datetimeMyLastMessage: previousMessage.datetime,
                datetimeReminderSent: message.datetime,
                textContentReminder: message.message,
                hasGottenReply: ((_list = list[index + 1]) === null || _list === void 0 ? void 0 : _list.author) === _message.MessageAuthorEnum.Match ? true : false
              });
              reminderAmount = reminderAmount + 1;
            }
          }

          previousMessage = message;
        }
      });
      return reminderAmountList;
    }
  }]);
  return Reminder;
}();

exports.Reminder = Reminder;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../../../message.interface":"kRs2","./dateHelper":"EDRb"}],"Vug9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Overlay = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Overlay = /*#__PURE__*/function () {
  function Overlay() {
    (0, _classCallCheck2.default)(this, Overlay);
  }

  (0, _createClass2.default)(Overlay, null, [{
    key: "setLoadingOverlay",

    /**
     * Checks wether all data record values array provided in the param exist in the data record
     * @param {string} uniqueId
     * @param {boolean} visibility
     * @returns {void}
     */
    value: function setLoadingOverlay(uniqueId, visibility) {
      if (!uniqueId || uniqueId.length === 0) {
        console.error("uniqueId is not set");
        return;
      }

      if (visibility === undefined) {
        console.error("visibility is not provided");
        return;
      }

      if (visibility) {
        // if loadingOverlay with the same name already exists, do nothing
        if ($("#".concat(uniqueId)).length > 0) {
          return;
        }

        $("body").append("\n            <div id=\"".concat(uniqueId, "\" class=\"loadingOverlay\">\n                <div class=\"loadingOverlayContainer\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                        <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            </div>"));
      } else {
        $("body #".concat(uniqueId, ".loadingOverlay")).remove();
      }
    }
  }, {
    key: "setLoadingOverlayProgress",
    value: function setLoadingOverlayProgress(uniqueId, currentNumber, totalNumber, statusText) {
      if (!uniqueId || uniqueId.length === 0) {
        console.error("uniqueId is not set");
        return;
      }

      if ($("#".concat(uniqueId)).length === 0) {
        // if loader is not found, do nothing
        return;
      }

      if (currentNumber < 0 || totalNumber < 0) {
        console.error("CurrentNumber or totalNumber input may not be less than 0");
        return;
      }

      if (totalNumber < currentNumber) {
        console.error("TotalNumber ".concat(totalNumber, " cannot be less than currentNumber: ").concat(currentNumber));
      }

      if ($("#".concat(uniqueId, " .loadingOverlayContainer .progress")).length === 0) {
        $("body #".concat(uniqueId, " .loadingOverlayContainer")).append("\n                <div class=\"status-container\">\n                    <div class=\"status-text-container\">\n                        <p class=\"status-text\">".concat(statusText, "</p>\n                    </div>\n                    <div class=\"progress\">\n                        <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" style=\"width: ").concat(this.getPercentageOfTotal(currentNumber, totalNumber), "%\" aria-valuenow=\"").concat(this.getPercentageOfTotal(currentNumber, totalNumber), "\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                    </div>\n                </div>\n            "));
      } else {
        $("#".concat(uniqueId, " .loadingOverlayContainer .status-text")).text(statusText);
        $("#".concat(uniqueId, " .loadingOverlayContainer .progress-bar")).css("width", "".concat(this.getPercentageOfTotal(currentNumber, totalNumber), "%"));
      }
    }
  }, {
    key: "getPercentageOfTotal",
    value: function getPercentageOfTotal(currentValue, totalValue) {
      // return totalValue / 100 * currentValue;
      return currentValue / totalValue * 100;
    }
  }]);
  return Overlay;
}();

exports.Overlay = Overlay;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"lntC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenController = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _screenStateComboTinder = require("./screenStateComboTinder.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ScreenController = /*#__PURE__*/function () {
  function ScreenController(screenList) {
    (0, _classCallCheck2.default)(this, ScreenController);
    this.screenList = [];
    this.currentScreen = _screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen;
    this.previousScreen = _screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen;
    this.screenList = screenList;
  }

  (0, _createClass2.default)(ScreenController, [{
    key: "updateCurrentScreen",
    value: function updateCurrentScreen(newScreen) {
      this.previousScreen = this.currentScreen;
      this.currentScreen = newScreen;
    }
  }, {
    key: "isChatScreen",
    value: function isChatScreen() {
      var _this = this;

      // Gets if the UiHelpers need to be re-added after a single swipe on this screen.
      // e.g. in tinder on screens swipe & explore, you stay on the screen and get ready for another new swipe.
      // e.g. in tinder on screen swipegold, you open said screen, swipe, and you're back on the swipegold overview
      var currentScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this.currentScreen;
      });

      if (!currentScreen) {
        throw new Error("Could not get screen ".concat(this.currentScreen, " in screen list. Please check the set screen list."));
      }

      return currentScreen.getScreenIsChatScreen();
    }
  }, {
    key: "isSwipeScreen",
    value: function isSwipeScreen() {
      var _this2 = this;

      // Gets if the UiHelpers need to be re-added after a single swipe on this screen.
      // e.g. in tinder on screens swipe & explore, you stay on the screen and get ready for another new swipe.
      // e.g. in tinder on screen swipegold, you open said screen, swipe, and you're back on the swipegold overview
      var currentScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this2.currentScreen;
      });

      if (!currentScreen) {
        throw new Error("Could not get screen ".concat(this.currentScreen, " in screen list. Please check the set screen list."));
      }

      return currentScreen.getScreenIsSwipeScreen();
    }
  }, {
    key: "isCurrentScreenMultiSwipe",
    value: function isCurrentScreenMultiSwipe() {
      var _this3 = this;

      // Gets if the UiHelpers need to be re-added after a single swipe on this screen.
      // e.g. in tinder on screens swipe & explore, you stay on the screen and get ready for another new swipe.
      // e.g. in tinder on screen swipegold, you open said screen, swipe, and you're back on the swipegold overview
      var currentScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this3.currentScreen;
      });

      if (!currentScreen) {
        throw new Error("Could not get screen ".concat(this.currentScreen, " in screen list. Please check the set screen list."));
      }

      return currentScreen.getScreenIsMultiSwipe();
    }
  }, {
    key: "isCurrentScreenNeedsUIAdjustments",
    value: function isCurrentScreenNeedsUIAdjustments() {
      var _this4 = this;

      // Gets if the screen needs UI adjustments
      // e.g. in tinder on the swipe screen it is preferable to take away a little bit of space on the right side of the screen
      var currentScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this4.currentScreen;
      });

      if (!currentScreen) {
        throw new Error("Could not get screen ".concat(this.currentScreen, " in screen list. Please check the set screen list."));
      }

      return currentScreen.getScreenNeedsUiAdjustments();
    } // public getCurrentScreen(): ScreenNavStateComboTinder {
    //     return this.currentScreen;
    // }

  }, {
    key: "getCurrentScreen",
    value: function getCurrentScreen() {
      var _this5 = this;

      var currentScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this5.currentScreen;
      });

      if (!currentScreen) {
        throw new Error("Could not get screen ".concat(this.currentScreen, " in screen list. Please check the set screen list."));
      }

      return currentScreen;
    }
  }, {
    key: "getPreviousScreen",
    value: function getPreviousScreen() {
      var _this6 = this;

      var previousScreen = this.screenList.find(function (screen) {
        return screen.getScreenName() === _this6.previousScreen;
      });

      if (!previousScreen) {
        throw new Error("Could not get screen ".concat(this.previousScreen, " in screen list. Please check the set screen list."));
      }

      return previousScreen;
    }
  }, {
    key: "getScreenByScreenName",
    value: function getScreenByScreenName(screenName) {
      var screenAction = this.screenList.find(function (screen) {
        return screen.getScreenName() === screenName;
      });

      if (!screenAction) {
        throw new Error("Screen action: ".concat(screenName, " was not found"));
      }

      return screenAction;
    }
  }]);
  return ScreenController;
}();

exports.ScreenController = ScreenController;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","./screenStateComboTinder.enum":"mNpB"}],"N6SU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenType = void 0;
var ScreenType;
exports.ScreenType = ScreenType;

(function (ScreenType) {
  ScreenType["SWIPE"] = "swipe";
  ScreenType["CHAT"] = "chat";
  ScreenType["OTHER"] = "other";
})(ScreenType || (exports.ScreenType = ScreenType = {}));
},{}],"vWGR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Screen = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ScreenTypeEnum = require("./ScreenTypeEnum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Screen = /*#__PURE__*/function () {
  function Screen(screenName, screenActionsList, screenElementsList, screenType, isMultiSwipeScreen, isNeedsUIAdjustments) {
    (0, _classCallCheck2.default)(this, Screen);
    this.screenName = null;
    this.screenActionsList = [];
    this.screenElementsList = [];
    this.isSwipeScreen = _ScreenTypeEnum.ScreenType.OTHER;
    this.isMultiSwipeScreen = false;
    this.isNeedsUIAdjustments = false;
    this.screenName = screenName;
    this.screenActionsList = screenActionsList;
    this.screenElementsList = screenElementsList;
    this.isSwipeScreen = this._setScreenType(screenType);
    this.isMultiSwipeScreen = isMultiSwipeScreen;
    this.isNeedsUIAdjustments = isNeedsUIAdjustments;
  }

  (0, _createClass2.default)(Screen, [{
    key: "getScreenName",
    value: function getScreenName() {
      if (this.screenName) {
        return this.screenName;
      }

      return null;
    }
  }, {
    key: "getScreenActionActionDOMRefByActionName",
    value: function getScreenActionActionDOMRefByActionName(screenActionName) {
      var screenAction = this.screenActionsList.find(function (screenAction) {
        return screenAction.getScreenActionName() === screenActionName;
      });

      if (!screenAction) {
        throw new Error("Screen action: ".concat(screenActionName, " was not found"));
      }

      return screenAction.getScreenActionDOMRef();
    }
  }, {
    key: "clearValuesScreenElements",
    value: function clearValuesScreenElements() {
      this.screenElementsList.forEach(function (screenElement) {
        screenElement.clearValue();
      });
    }
  }, {
    key: "getScreenIsChatScreen",
    value: function getScreenIsChatScreen() {
      return this.isSwipeScreen === _ScreenTypeEnum.ScreenType.CHAT;
    }
  }, {
    key: "getScreenIsSwipeScreen",
    value: function getScreenIsSwipeScreen() {
      return this.isSwipeScreen === _ScreenTypeEnum.ScreenType.SWIPE;
    }
  }, {
    key: "getScreenIsMultiSwipe",
    value: function getScreenIsMultiSwipe() {
      return this.isMultiSwipeScreen;
    }
  }, {
    key: "getScreenNeedsUiAdjustments",
    value: function getScreenNeedsUiAdjustments() {
      return this.isNeedsUIAdjustments;
    }
  }, {
    key: "getScreenElements",
    value: function getScreenElements() {
      return this.screenElementsList;
    }
  }, {
    key: "_setScreenType",
    value: function _setScreenType(screenType) {
      switch (screenType) {
        case _ScreenTypeEnum.ScreenType.SWIPE:
          return _ScreenTypeEnum.ScreenType.SWIPE;

        case _ScreenTypeEnum.ScreenType.CHAT:
          return _ScreenTypeEnum.ScreenType.CHAT;

        case _ScreenTypeEnum.ScreenType.OTHER:
          return _ScreenTypeEnum.ScreenType.OTHER;

        default:
          throw new Error("ScreenType: ".concat(screenType, " was not recognized. Please make sure the provided screenType is a recognized screen type as defined in the screen type enum."));
      }
    }
  }]);
  return Screen;
}(); // this class can contain logic for (attempting) to get DOM elements & check validity/existence of said elements


exports.Screen = Screen;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","./ScreenTypeEnum":"N6SU"}],"mUYg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenAction = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ConsoleColorLog = require("../ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../ConsoleColorLog/LogColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ScreenAction = /*#__PURE__*/function () {
  function ScreenAction(screenActionName, screenActionDOMRef) {
    (0, _classCallCheck2.default)(this, ScreenAction);
    this.screenActionName = "";
    this.screenActionDOMRef = "";

    if (screenActionName.length === 0 || screenActionDOMRef.length === 0) {
      throw new Error("Provided Screen Action with name ".concat(screenActionName, " and action DOM ref ").concat(screenActionDOMRef, " cannot be empty"));
    }

    this.screenActionName = screenActionName;
    this.screenActionDOMRef = screenActionDOMRef;
    this.isJquerySelectorValid(screenActionName, screenActionDOMRef);
  }

  (0, _createClass2.default)(ScreenAction, [{
    key: "getScreenActionName",
    value: function getScreenActionName() {
      return this.screenActionName;
    }
  }, {
    key: "getScreenActionDOMRef",
    value: function getScreenActionDOMRef() {
      return this.screenActionDOMRef;
    }
  }, {
    key: "isJquerySelectorValid",
    value: function isJquerySelectorValid(screenActionName, screenActionDOMRef) {
      try {
        $(screenActionDOMRef);
      } catch (err) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("The Jquery selector set for ScreenAction: ".concat(screenActionName, " is not valid: "), screenActionDOMRef, _LogColors.LogColors.RED);
      }
    }
  }]);
  return ScreenAction;
}();

exports.ScreenAction = ScreenAction;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../ConsoleColorLog/ConsoleColorLog":"XbQV","../ConsoleColorLog/LogColors":"QvSI"}],"wCII":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenRetrievalMethod = void 0;
var ScreenRetrievalMethod;
exports.ScreenRetrievalMethod = ScreenRetrievalMethod;

(function (ScreenRetrievalMethod) {
  ScreenRetrievalMethod["GET_TEXT_ELEMENT"] = "getTextFromElement";
  ScreenRetrievalMethod["GET_ELEMENT_EXISTS"] = "getElementExists";
  ScreenRetrievalMethod["GET_ELEMENTS_AMOUNT"] = "getElementsAmount";
})(ScreenRetrievalMethod || (exports.ScreenRetrievalMethod = ScreenRetrievalMethod = {}));
},{}],"MLi3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenElement = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _DOMHelper = require("../DOMHelper");

var _ConsoleColorLog = require("../ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../ConsoleColorLog/LogColors");

var _ScreenRetrievalMethod = require("./ScreenRetrievalMethod.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ScreenElement = /*#__PURE__*/function () {
  function ScreenElement(name, DOMPath, DOMPathLastElement, errorIfNotFound, DOMRetrievalMethod, preManipulateValue) {
    (0, _classCallCheck2.default)(this, ScreenElement);
    this.name = "";
    this.DOMPath = "";
    this.DOMPathLastElement = "";
    this.errorIfNotFound = false;
    this.preManipulateValue = null;
    this.name = name;
    this.DOMPath = DOMPath;
    this.DOMPathLastElement = DOMPathLastElement;
    this.errorIfNotFound = errorIfNotFound;
    this.DOMRetrievalMethod = DOMRetrievalMethod;
    this.preManipulateValue = preManipulateValue ? preManipulateValue : null;

    this._isConfigDataValid();

    this._isErrorNotFoundIncorrect();

    this._isPreManipulateValueSet();

    if (typeof DOMPath === 'string') {
      this.isJquerySelectorValid(name, DOMPath);
    }

    this.isJquerySelectorValid(name, DOMPathLastElement);
  }

  (0, _createClass2.default)(ScreenElement, [{
    key: "collectData",
    value: function collectData() {
      var elementPrePath = null;

      if (typeof this.DOMPath === 'string') {
        elementPrePath = _DOMHelper.DOMHelper.getJqueryElementsByJquerySelector(this.DOMPath);
      } else if (typeof this.DOMPath === 'function') {
        var domPath = this.DOMPath();

        if (domPath) {
          elementPrePath = $(domPath);
        }
      }

      if (elementPrePath !== null) {
        switch (this.DOMRetrievalMethod) {
          case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT:
            this.currentValue = this._getTextFromElement(elementPrePath, this.DOMPathLastElement);
            return typeof this.currentValue === 'string' ? true : false;

          case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS:
            this.currentValue = this._getIfElementExists(elementPrePath, this.DOMPathLastElement);
            return typeof this.currentValue === 'boolean' ? true : false;

          case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT:
            this.currentValue = this.getAmountOfElements(elementPrePath, this.DOMPathLastElement);
            return typeof this.currentValue === 'number' ? true : false;

          default:
            _ConsoleColorLog.ConsoleColorLog.singleLog("No implementation method configured for retrieval method: ".concat(this.DOMRetrievalMethod), false, _LogColors.LogColors.RED);

            return false;
        }
      }

      var errorMessage = "".concat(this.name, " - Could not find element by DOMPath/Function: ").concat(this.DOMPath ? typeof this.DOMPath === 'string' : 'CHECK FUNCTION', ". Please check the DOMpath/function.");

      if (this.errorIfNotFound) {
        alert(errorMessage);
        throw new Error(errorMessage);
      } else {
        _ConsoleColorLog.ConsoleColorLog.singleLog(errorMessage, false, _LogColors.LogColors.YELLOW);

        return false;
      }
    }
  }, {
    key: "getValueAsString",
    value: function getValueAsString() {
      if (!this._isCurrentValueValid()) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Could not return currentValue as it is falsy: ".concat(this.currentValue), false, _LogColors.LogColors.RED);

        return undefined;
      }

      return this.currentValue;
    }
  }, {
    key: "getValueAsNumber",
    value: function getValueAsNumber() {
      if (!this._isCurrentValueValid()) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Could not return currentValue as it is falsy: ".concat(this.currentValue), false, _LogColors.LogColors.RED);

        return undefined;
      }

      var currentValueNumber = parseInt(this.currentValue);

      if (currentValueNumber) {
        return currentValueNumber;
      }

      _ConsoleColorLog.ConsoleColorLog.singleLog("Could not convert currentValue: ".concat(this.currentValue, " to number, attempted result is: ").concat(currentValueNumber), false, _LogColors.LogColors.RED);

      return undefined;
    }
  }, {
    key: "getValueAsBoolean",
    value: function getValueAsBoolean() {
      if (!this._isCurrentValueValid()) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Could not return currentValue as it is falsy: ".concat(this.currentValue), false, _LogColors.LogColors.RED);

        return undefined;
      }

      return this.currentValue;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "clearValue",
    value: function clearValue() {
      this.currentValue = null;
    }
  }, {
    key: "_isConfigDataValid",
    value: function _isConfigDataValid() {
      switch (true) {
        case !this.name || this.name.length === 0:
          throw new Error("Provided property name: ".concat(this.name, " is not valid"));

        case typeof this.DOMPath === 'string' && this.DOMPath.length === 0 || !this.DOMPath:
          throw new Error("Provided property name: ".concat(this.DOMPath, " is not valid"));

        case !this.DOMRetrievalMethod ? true : false:
          throw new Error("Provided property name: ".concat(this.DOMRetrievalMethod, " is not valid"));
      }
    }
  }, {
    key: "_isErrorNotFoundIncorrect",
    value: function _isErrorNotFoundIncorrect() {
      if (this.errorIfNotFound && this.DOMRetrievalMethod === _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS || this.errorIfNotFound && this.DOMRetrievalMethod === _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT) {
        throw new Error("The setting to throw an error if element is not found (errorIfNotFound) cannot be ".concat(this.errorIfNotFound, " if the DOM retrieval method is set to ").concat(this.DOMRetrievalMethod));
      }
    }
  }, {
    key: "_isCurrentValueValid",
    value: function _isCurrentValueValid() {
      switch (this.DOMRetrievalMethod) {
        case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT:
          return typeof this.currentValue === 'string' ? true : false;

        case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS:
          return typeof this.currentValue === 'boolean' ? true : false;

        case _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT:
          return typeof this.currentValue === 'number' ? true : false;

        default:
          throw new Error("Unexpected ScreenRetrievalMethod which is not included in checking if the currentValue is valid.");
      }
    }
  }, {
    key: "_getIfElementExists",
    value: function _getIfElementExists($element, lastElementPath) {
      if (this.isLastElementPathEmpty(lastElementPath)) {
        return $element.length > 0 ? true : false;
      }

      return this._lastElementExists($element, lastElementPath);
    }
  }, {
    key: "_isPreManipulateValueSet",
    value: function _isPreManipulateValueSet() {
      if (this.preManipulateValue && this.DOMRetrievalMethod !== _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT) {
        throw new Error("preManipulateValue is set on screenElement: ".concat(this.name, ", but DOMRetrievalMethod is not set to GET_TEXT_ELEMENT. Only the GET_TEXT_ELEMENT can have a preManipulateValue."));
      }
    }
  }, {
    key: "_getTextFromElement",
    value: function _getTextFromElement($element, lastElementPath) {
      var resultText = '';

      if (!this.isLastElementPathEmpty(lastElementPath)) {
        if (!this._lastElementExists($element, lastElementPath)) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Could not find element: ".concat(lastElementPath, ", tried to find it in DOMPath: ").concat(this.DOMPath), false, _LogColors.LogColors.RED);
        }

        var result = _DOMHelper.DOMHelper.getJqueryElementsByFindingInJqueryElement($element, lastElementPath);

        resultText = result && result.length > 0 ? result.last().text() : '';
      } else {
        resultText = $element.last().text();
      }

      if (this.preManipulateValue) {
        resultText = this.preManipulateValue(resultText);
      }

      return resultText;
    }
  }, {
    key: "getAmountOfElements",
    value: function getAmountOfElements($element, lastElementPath) {
      if (this.isLastElementPathEmpty(lastElementPath)) {
        return $element.length;
      }

      if (!this._lastElementExists($element, lastElementPath)) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Could not find element: ".concat(lastElementPath, ", tried to find it in DOMPath: ").concat(this.DOMPath), false, _LogColors.LogColors.RED);
      }

      var result = _DOMHelper.DOMHelper.getJqueryElementsByFindingInJqueryElement($element, lastElementPath);

      return result ? result.length : NaN;
    }
  }, {
    key: "_lastElementExists",
    value: function _lastElementExists($element, lastElementPath) {
      var lastElement = _DOMHelper.DOMHelper.getJqueryElementsByFindingInJqueryElement($element, lastElementPath);

      if (!lastElement || lastElement.length === 0) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Could not find element: ".concat(lastElementPath, ", tried to find it in DOMPath: ").concat(this.DOMPath), false, _LogColors.LogColors.RED);

        return false;
      }

      return true;
    }
  }, {
    key: "isLastElementPathEmpty",
    value: function isLastElementPathEmpty(lastElementPath) {
      // if last element path is empty, then only the first element should be used to retrieve data from
      return lastElementPath.length === 0 ? true : false;
    }
  }, {
    key: "isJquerySelectorValid",
    value: function isJquerySelectorValid(screenActionName, screenActionDOMRef) {
      try {
        $(screenActionDOMRef);
      } catch (err) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("The Jquery selector set for ScreenAction: ".concat(screenActionName, " is not valid: "), screenActionDOMRef, _LogColors.LogColors.RED);
      }
    }
  }]);
  return ScreenElement;
}();

exports.ScreenElement = ScreenElement;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../DOMHelper":"phX9","../ConsoleColorLog/ConsoleColorLog":"XbQV","../ConsoleColorLog/LogColors":"QvSI","./ScreenRetrievalMethod.enum":"wCII"}],"uFvV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.screensTinder = void 0;

var _Screen = require("../../util/Screen/Screen");

var _ScreenAction = require("../../util/Screen/ScreenAction");

var _ScreenElement = require("../../util/Screen/ScreenElement");

var _ScreenRetrievalMethod = require("../../util/Screen/ScreenRetrievalMethod.enum");

var _screenStateComboTinder = require("../../util/Screen/screenStateComboTinder.enum");

var screensTinder = [new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.Swipe, [new _ScreenAction.ScreenAction('like', '.recsCardboard__cards div[class*="Bdc\\($c-ds-border-gamepad-like-default\\)"] button'), new _ScreenAction.ScreenAction('pass', '.recsCardboard__cards div[class*="Bdc\\($c-ds-border-gamepad-nope-default\\)"] button'), new _ScreenAction.ScreenAction('superlike', '.recsCardboard__cards div[class*="Bdc\\($c-ds-border-gamepad-super-like-default\\)"] button')], [new _ScreenElement.ScreenElement('Name', '.recsCardboard__cards div[aria-hidden="false"] div.Ell', 'span[itemprop="name"]', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', '.recsCardboard__cards div[aria-hidden="false"] div[class*="Animn"]', 'span[itemprop="age"]', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Job', getDOMPathForJob, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getDOMPathForSchool, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('City', getDOMPathForCity, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace("Woont in", "");
}), new _ScreenElement.ScreenElement('Has-profiletext', '.recsCardboard__cards div[aria-hidden="false"] div.BreakWord', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'div.recsCardboard__cards > div[aria-hidden="false"] title:contains("Geverifieerd!")', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', '.recsCardboard__cards div[aria-hidden="false"]', 'button.bullet', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT), new _ScreenElement.ScreenElement('Distance-in-km', getDOMPathForDistance, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(" km uit de buurt", "");
})], 'swipe', true, true), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.SwipeDetail, [new _ScreenAction.ScreenAction('like', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Like"):not(:contains("Super"))'), new _ScreenAction.ScreenAction('pass', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Nope")'), new _ScreenAction.ScreenAction('superlike', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Super Like")')], [new _ScreenElement.ScreenElement('Name', 'h1.Typs\\(display-1-strong\\)', '', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', 'span.Typs\\(display-2-strong\\)', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Job', getDOMPathForJob, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getDOMPathForSchool, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('City', getDOMPathForCity, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace("Woont in", "");
}), new _ScreenElement.ScreenElement('Has-profiletext', 'div.profileCard__card div[class*="$c-ds-background-primary"] div.BreakWord div', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'div.profileCard__card title:contains("Geverifieerd!")', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', 'div.profileCard__slider', 'span.keen-slider__slide', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT), new _ScreenElement.ScreenElement('Distance-in-km', getDOMPathForDistance, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(" km uit de buurt", "");
})], 'swipe', true, true), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.SwipeGold, [new _ScreenAction.ScreenAction('like', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Like"):not(:contains("Super"))'), new _ScreenAction.ScreenAction('pass', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Nope")'), new _ScreenAction.ScreenAction('superlike', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Super Like")')], [new _ScreenElement.ScreenElement('Name', 'h1.Typs\\(display-1-strong\\)', '', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', 'span.Typs\\(display-2-strong\\)', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Job', getDOMPathForJob, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getDOMPathForSchool, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('City', getDOMPathForCity, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace("Woont in", "");
}), new _ScreenElement.ScreenElement('Has-profiletext', 'div.profileCard__card div[class*="$c-ds-background-primary"] div.BreakWord div', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'div.profileCard__card title:contains("Geverifieerd!")', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', 'div.profileCard__slider', 'span.keen-slider__slide', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT), new _ScreenElement.ScreenElement('Distance-in-km', getDOMPathForDistance, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(" km uit de buurt", "");
})], 'swipe', false, false), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore, [new _ScreenAction.ScreenAction('like', 'div[class*="Bdc\\($c-ds-border-gamepad-like-default\\)"] button:contains("Like"):not(:contains("Super"))'), new _ScreenAction.ScreenAction('pass', 'div[class*="Bdc\\($c-ds-border-gamepad-nope-default\\)"] button:contains("Nope")'), new _ScreenAction.ScreenAction('superlike', 'div[class*="Bdc\\($c-ds-border-gamepad-super-like-default\\)"] button:contains("Super Like")')], [new _ScreenElement.ScreenElement('Name', '.recsCardboard__cards div[aria-hidden="false"] div.Ell', 'span[itemprop="name"]', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', '.recsCardboard__cards div[aria-hidden="false"] div[class*="Animn"]', 'span[itemprop="age"]', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Job', getDOMPathForJob, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getDOMPathForSchool, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('City', getDOMPathForCity, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace("Woont in", "");
}), new _ScreenElement.ScreenElement('Has-profiletext', '.recsCardboard__cards div[aria-hidden="false"] div.BreakWord', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'div.recsCardboard__cards > div[aria-hidden="false"] title:contains("Geverifieerd!")', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', '.recsCardboard__cards div[aria-hidden="false"]', 'button.bullet', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT), new _ScreenElement.ScreenElement('Distance-in-km', getDOMPathForDistance, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(" km uit de buurt", "");
})], 'swipe', true, false), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.SwipeExploreDetail, [new _ScreenAction.ScreenAction('like', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Like"):not(:contains("Super"))'), new _ScreenAction.ScreenAction('pass', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Nope")'), new _ScreenAction.ScreenAction('superlike', 'div[class*="Bgi\\($g-ds-overlay-profile-button-gamepad\\)"] button:contains("Super Like")')], [new _ScreenElement.ScreenElement('Name', 'h1.Typs\\(display-1-strong\\)', '', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', 'span.Typs\\(display-2-strong\\)', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Job', getDOMPathForJob, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getDOMPathForSchool, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('City', getDOMPathForCity, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace("Woont in", "");
}), new _ScreenElement.ScreenElement('Has-profiletext', 'div.profileCard__card div[class*="$c-ds-background-primary"] div.BreakWord div', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'div.profileCard__card title:contains("Geverifieerd!")', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', 'div.profileCard__slider', 'span.keen-slider__slide', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT), new _ScreenElement.ScreenElement('Distance-in-km', getDOMPathForDistance, 'div:last', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(" km uit de buurt", "");
})], 'swipe', true, false), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.Chat, [new _ScreenAction.ScreenAction('sendMessage', "div.BdT > form > button[type='submit']")], [], 'chat', false, false), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen, [], [], 'other', false, false)];
exports.screensTinder = screensTinder;

function getDOMPathForJob() {
  var jobSVG_D_properties = "M7.15 3.434h5.7V1.452a.728.728 0 0 0-.724-.732H7.874a.737.737 0 0 0-.725.732v1.982z";
  var jobDOMRow_SWIPEGOLD_SWIPEDETAIL = $("div.profileCard__card path[d='" + jobSVG_D_properties + "']");
  var jobDOMRow_SWIPE_EXPLORE = $("div.recsCardboard__cards div[aria-hidden='false'] path[d='" + jobSVG_D_properties + "']");
  var jobDOMRow = undefined;

  if (jobDOMRow_SWIPEGOLD_SWIPEDETAIL.length > 0) {
    jobDOMRow = $(jobDOMRow_SWIPEGOLD_SWIPEDETAIL).first().parents('div.Row').get(0);
  }

  if (jobDOMRow_SWIPE_EXPLORE.length > 0) {
    jobDOMRow = $(jobDOMRow_SWIPE_EXPLORE).first().parents('div.Row').get(0);
  }

  if (jobDOMRow) {
    return jobDOMRow;
  }

  return null;
}

function getDOMPathForSchool() {
  var schoolSVG_D_properties = "M11.87 5.026L2.186 9.242c-.25.116-.25.589 0 .705l.474.204v2.622a.78.78 0 0 0-.344.657c0 .42.313.767.69.767.378 0 .692-.348.692-.767a.78.78 0 0 0-.345-.657v-2.322l2.097.921a.42.42 0 0 0-.022.144v3.83c0 .45.27.801.626 1.101.358.302.842.572 1.428.804 1.172.46 2.755.776 4.516.776 1.763 0 3.346-.317 4.518-.777.586-.23 1.07-.501 1.428-.803.355-.3.626-.65.626-1.1v-3.83a.456.456 0 0 0-.022-.145l3.264-1.425c.25-.116.25-.59 0-.705L12.13 5.025c-.082-.046-.22-.017-.26 0v.001zm.13.767l8.743 3.804L12 13.392 3.257 9.599l8.742-3.806zm-5.88 5.865l5.75 2.502a.319.319 0 0 0 .26 0l5.75-2.502v3.687c0 .077-.087.262-.358.491-.372.29-.788.52-1.232.68-1.078.426-2.604.743-4.29.743s-3.212-.317-4.29-.742c-.444-.161-.86-.39-1.232-.68-.273-.23-.358-.415-.358-.492v-3.687z";
  var schoolDOMRow_SWIPEGOLD_SWIPEDETAIL = $("div.profileCard__card path[d='" + schoolSVG_D_properties + "']");
  var schoolDOMRow_SWIPE_EXPLORE = $("div.recsCardboard__cards div[aria-hidden='false'] path[d='" + schoolSVG_D_properties + "']");
  var schoolDOMRow = undefined;

  if (schoolDOMRow_SWIPEGOLD_SWIPEDETAIL.length > 0) {
    schoolDOMRow = $(schoolDOMRow_SWIPEGOLD_SWIPEDETAIL).first().parents('div.Row').get(0);
  }

  if (schoolDOMRow_SWIPE_EXPLORE.length > 0) {
    schoolDOMRow = $(schoolDOMRow_SWIPE_EXPLORE).first().parents('div.Row').get(0);
  }

  if (schoolDOMRow) {
    return schoolDOMRow;
  }

  return null;
}

function getDOMPathForCity() {
  var citySVG_D_properties = "M19.695 9.518H4.427V21.15h15.268V9.52zM3.109 9.482h17.933L12.06 3.709 3.11 9.482z";
  var cityDOMRow_SWIPEGOLD_SWIPEDETAIL = $("div.profileCard__card path[d='" + citySVG_D_properties + "']");
  var cityDOMRow_SWIPE_EXPLORE = $("div.recsCardboard__cards div[aria-hidden='false'] path[d='" + citySVG_D_properties + "']");
  var cityDOMRow = undefined;

  if (cityDOMRow_SWIPEGOLD_SWIPEDETAIL.length > 0) {
    cityDOMRow = $(cityDOMRow_SWIPEGOLD_SWIPEDETAIL).first().parents('div.Row').get(0);
  }

  if (cityDOMRow_SWIPE_EXPLORE.length > 0) {
    cityDOMRow = $(cityDOMRow_SWIPE_EXPLORE).first().parents('div.Row').get(0);
  }

  if (cityDOMRow) {
    return cityDOMRow;
  }

  return null;
}

function getDOMPathForDistance() {
  var distanceSVG_D_properties = "M11.436 21.17l-.185-.165a35.36 35.36 0 0 1-3.615-3.801C5.222 14.244 4 11.658 4 9.524 4 5.305 7.267 2 11.436 2c4.168 0 7.437 3.305 7.437 7.524 0 4.903-6.953 11.214-7.237 11.48l-.2.167zm0-18.683c-3.869 0-6.9 3.091-6.9 7.037 0 4.401 5.771 9.927 6.897 10.972 1.12-1.054 6.902-6.694 6.902-10.95.001-3.968-3.03-7.059-6.9-7.059h.001z";
  var distanceDOMRow_SWIPEGOLD_SWIPEDETAIL = $("div.profileCard__card path[d='" + distanceSVG_D_properties + "']");
  var distanceDOMRow_SWIPE_EXPLORE = $("div.recsCardboard__cards div[aria-hidden='false'] path[d='" + distanceSVG_D_properties + "']");
  var distanceDOMRow = undefined;

  if (distanceDOMRow_SWIPEGOLD_SWIPEDETAIL.length > 0) {
    distanceDOMRow = $(distanceDOMRow_SWIPEGOLD_SWIPEDETAIL).first().parents('div.Row').get(0);
  }

  if (distanceDOMRow_SWIPE_EXPLORE.length > 0) {
    distanceDOMRow = $(distanceDOMRow_SWIPE_EXPLORE).first().parents('div.Row').get(0);
  }

  if (distanceDOMRow) {
    return distanceDOMRow;
  }

  return null;
}
},{"../../util/Screen/Screen":"vWGR","../../util/Screen/ScreenAction":"mUYg","../../util/Screen/ScreenElement":"MLi3","../../util/Screen/ScreenRetrievalMethod.enum":"wCII","../../util/Screen/screenStateComboTinder.enum":"mNpB"}],"HH1H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PortAction = void 0;
var PortAction;
exports.PortAction = PortAction;

(function (PortAction) {
  PortAction["INIT"] = "INIT";
  PortAction["SWIPED_PERSON_ACTION_START"] = "SWIPED-PERSON-ACTION-START";
  PortAction["SWIPED_PERSON_ACTION_PROCESS"] = "SWIPED-PERSON-ACTION-PROCESS";
  PortAction["SWIPED_PERSON_ACTION_END"] = "SWIPED-PERSON-ACTION-END";
  PortAction["SUBMIT_ACTION"] = "SUBMIT-ACTION";
  PortAction["GET_NETWORK_LOGS"] = "GET-NETWORK-LOGS";
  PortAction["FILENAME"] = "FILENAME";
  PortAction["KEEP_ALIVE"] = "KEEP-ALIVE";
})(PortAction || (exports.PortAction = PortAction = {}));
},{}],"LiO7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatingAppType = void 0;
var DatingAppType;
exports.DatingAppType = DatingAppType;

(function (DatingAppType) {
  DatingAppType["TINDER"] = "tinder";
  DatingAppType["HAPPN"] = "happn";
  DatingAppType["UNKNOWN"] = "unknown-datingapp-type";
})(DatingAppType || (exports.DatingAppType = DatingAppType = {}));
},{}],"QRmc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TinderController = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _dataRecord44 = require("../data/dataRecord");

var _dateHelper = require("../util/dateHelper");

var _dataItemGhost = require("../data/dataItems/dataItemGhost");

var _screenStateComboTinder = require("../util/Screen/screenStateComboTinder.enum");

var _UIFieldsRenderer = require("./UIFieldsRenderer");

var _requestHandlerTinder = require("../http-requests/requestHandlerTinder");

var _dataField = require("../data/dataField");

var _personAction = require("../../../personAction.enum");

var _DOMHelper = require("../util/DOMHelper");

var _message = require("./../../../message.interface");

var _NeedsReminder = require("../util/NeedsReminder");

var _Overlay = require("../serrvices/Overlay");

var _ScreenList = require("../util/Screen/ScreenList");

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

var _Screens = require("../tinder/config/Screens");

var _PortAction = require("../../../PortAction.enum");

var _datingAppType = require("../../../datingAppType.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// todo: had to move this to top level AND make a relative path.. but since ALL components (content, background, popup) share the same interfaces/enums etc. why not move everything to top lvl for importing? ALSO; why did an error occur when i tried to relative import this?
var TinderController = /*#__PURE__*/function () {
  function TinderController(dataRetrievalMethod, dataTable, dataStorage, dataPort) {
    var _this = this;

    (0, _classCallCheck2.default)(this, TinderController);
    // private nameController = 'tinder';
    this.nameController = _datingAppType.DatingAppType.TINDER;
    this.hasCredentials = false;
    this.dataRetrievalMethod = null;
    this.screenList = new _ScreenList.ScreenController(_Screens.screensTinder);
    this.uiRenderer = new _UIFieldsRenderer.UIFieldsRenderer(this.screenList);
    this.xAuthToken = '';
    this.matches = [];
    this.currentScreenTimeoutId = null;
    this.currentMatchIdByUrlChat = null;
    this.amountOfUnmessagedMatches = 0;
    this.matchesListTimeoutId = null;
    this.dataTableNeedsToBeUpdated = false;
    this.watchersUIList = [];
    this.currentExploreCategory = null;
    this.currentDataRecordSwipe = new _dataRecord44.DataRecord();
    this.dataRetrievalMethod = dataRetrievalMethod;
    this.dataTable = dataTable;
    this.dataStorage = dataStorage;
    this.dataPort = dataPort;

    if (this.dataRetrievalMethod === 'api' || this.dataRetrievalMethod === 'dom') {
      if (this.dataRetrievalMethod === 'api') {
        //todo: update this to actually get the getCredentials, put in a constant, and check if the constant is filled with a correct string value
        this.hasCredentials = this.setCredentials();

        if (this.hasCredentials) {
          //todo: test to see if auth token works by using a simple request first?
          this.requestHandler = new _requestHandlerTinder.RequestHandlerTinder(this.xAuthToken);

          _Overlay.Overlay.setLoadingOverlay('initApp', true);

          this.refreshDataTableMatchesAndMatchMessages(this.requestHandler).then(function () {
            //todo: 4 Inplement add tinder UI support overlay (e.g. add icon/color to match who hasn't replied in a week)
            _this.setSwipeHelperOnScreen(); // HINT: In order to scroll to the very bottom of the messageList in tinder;

            /*
            Use
            $0.children[$0.children.length-1].scrollIntoView()
            and a few ms after use;
            $0.scrollIntoView()
            .. and repeat again, again and again untill you have the full list
            */

          }).catch(function (error) {
            console.dir(error);
            console.error("Something went wrong");
          }).finally(function () {
            _Overlay.Overlay.setLoadingOverlay('initApp', false);

            _this.setScreenWatcher();

            _this.setMessageListWatcherOnScreen();

            _this.setMatchesListWatcher();
          });
        } else {
          console.error("Could not get credentials for tinder");
        }
      }

      if (this.dataRetrievalMethod === 'dom') {
        console.error("Data retrieveMethod DOM is not yet supported");
      }
    } else {
      console.error("Unknown data retrievelMethod for ".concat(this.nameController));
    }
  }

  (0, _createClass2.default)(TinderController, [{
    key: "refreshDataTableMatchesAndMatchMessages",
    value: function refreshDataTableMatchesAndMatchMessages(requestHandler) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var _this2$getMatches;

        // Gather data (by api's OR (less preferably) DOM)
        (_this2$getMatches = _this2.getMatches()) === null || _this2$getMatches === void 0 ? void 0 : _this2$getMatches.then(function (matches) {
          console.log("Matches & match messages:");
          console.dir(matches); // eslint-disable-next-line no-debugger
          // debugger;

          if (matches === null) {
            console.error("Could not retrieve matches");
            return reject();
          }

          _this2.updateDataTable(matches);

          _this2.setUnupdatedMatchesToBlocked(matches, _this2.dataTable).finally(function () {
            var dataRecordsWhereMessagesNeedToBeUpdated = _this2.dataTable.getAllDataRecordsWhereMessageNeedTobeUpdated();

            if (dataRecordsWhereMessagesNeedToBeUpdated.length === 0) {
              return resolve();
            }

            _this2.updateMessagesDataRecords(requestHandler, dataRecordsWhereMessagesNeedToBeUpdated, matches).then(function (hasMessagesBeenRetrieved) {
              if (!hasMessagesBeenRetrieved) {
                console.error("Something went wrong with getting messages! Check the network logs.");
                return reject();
              } // eslint-disable-next-line no-debugger
              // debugger;


              var dataRecords = _this2.dataTable.getAllDataRecords();

              dataRecords.forEach(function (dataRecord) {
                var dataFields = dataRecord.getDataFields();
                var systemId = dataRecord.getRecordPersonSystemId(_this2.nameController);

                if (!systemId) {
                  console.warn("Could not update messages because systemid for this record was: ".concat(systemId));
                } else {
                  var matchRecordIndex = _this2.dataTable.getRecordIndexBySystemId(systemId, _this2.nameController);

                  var tinderMatchDataRecordValues = _this2.parseMatchDataToDataRecordValues(dataFields, undefined, systemId);

                  _this2.dataTable.updateDataRecordByIndex(matchRecordIndex, tinderMatchDataRecordValues);
                }
              }); // eslint-disable-next-line no-debugger
              // debugger;

              return resolve();
            }).catch(function (error) {
              console.dir(error);
              console.error("Error occured getting matchMessages");
            }).finally(function () {
              console.log("And here is my data table:");
              console.dir(_this2.dataTable);
            });
          }); // debugger;

        }).catch(function (error) {
          console.dir(error);
          console.error("An error occured getting matches");
        });
      });
    }
  }, {
    key: "setScreenWatcher",
    value: function setScreenWatcher() {
      var _this3 = this;

      // main & aside container (with this class) is always present as far as i know, so should always work.
      var swipeOrChatContainerIdentifier = '.App__body > .desktop > main.BdStart';
      var $SOCcontainer = $('body').find(swipeOrChatContainerIdentifier).first()[0];

      if (!$SOCcontainer) {
        console.error("Element with identifier not found: ".concat(swipeOrChatContainerIdentifier, ". Please update identifiers."));
        return;
      } // Only need to observe the swipe-or-chat container. The matches & messageList container are always present (though not visible) anyway!
      // Thus I can always apply DOM manipulations on them when needed!


      var mutationObv = new MutationObserver(function (mutations) {
        // ConsoleColorLog.singleLog(`Screen: `, this.getCurrentScreenByUrlAndDOM(), LogColors.BLUE);
        if (_this3.currentScreenTimeoutId !== null) {
          // if timeout below is already set once, prevent it from setting it again untill it finishes to save resources
          return;
        }

        if (_this3.screenList.getCurrentScreen().getScreenIsChatScreen()) {
          var newMatchIdFromUrl = _this3.getMatchIdFromMessageHrefSDtring(window.location.href);

          if (_this3.currentMatchIdByUrlChat === null || _this3.currentMatchIdByUrlChat !== newMatchIdFromUrl) {
            console.log("%c Switched CHAT from match with id ".concat(_this3.currentMatchIdByUrlChat, " to match with id: ").concat(newMatchIdFromUrl), "color: green");
            _this3.currentMatchIdByUrlChat = newMatchIdFromUrl;
          } else {
            return;
          } // } else if (this.screenList.getCurrentScreen().getScreenName() === ScreenNavStateComboTinder.SwipeExplore) {

        } else if (_this3.getCurrentScreenByUrlAndDOM() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore) {
          var urlPartsList = window.location.href.split('/');
          var newExploreCategory = urlPartsList[urlPartsList.length - 1] === 'explore' ? null : urlPartsList[urlPartsList.length - 1]; // todo: REFACTOR LOGIC TO GETSCREENBYURL&DOM BECAUSE THIS IS GETTING RIDICULOUS;
          // THAT METHOD GETS & SETS chat url extension AND category extension for screen in a different "special set properties to check" and MAYBE a different method on screenList like screenList.screenisDifferentBecauseWeOnDifferentcategoryOrChatSoNeedsUpdate()
          // if we are on swipeexplore, 
          // was the app on swipeexploredetail? 
          // if yes, refresh because we need to recognize the correct screen we are on for the collect data button
          // is no (so the app was on swipeexplore) continue.. 
          // are we on swipeexplore same category? 
          // if so do nothing to prevent thousands of overlays
          // if not, we want a refresh

          if (_this3.screenList.getCurrentScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore && _this3.currentExploreCategory === newExploreCategory) {
            return;
          }

          console.log("Switched from SWIPEEXPLORE page: ".concat(_this3.currentExploreCategory, " to page: ").concat(newExploreCategory));
          _this3.currentExploreCategory = newExploreCategory;
        } else if (_this3.screenList.getCurrentScreen().getScreenName() === _this3.getCurrentScreenByUrlAndDOM()) {
          return;
        }

        _Overlay.Overlay.setLoadingOverlay('switchScreen', true);

        _this3.uiRenderer.removeAllUIHelpers();

        _this3.currentScreenTimeoutId = setTimeout(function () {
          _this3.screenList.updateCurrentScreen(_this3.getCurrentScreenByUrlAndDOM());

          console.log("Current screen: ".concat(_this3.screenList.getCurrentScreen()));
          _this3.currentScreenTimeoutId = null;
          console.log("execute add UI helpers for screen: ".concat(_this3.screenList.getCurrentScreen()));
          _this3.currentDataRecordSwipe = _this3._getCorrectNewDataRecord();

          if (_this3.dataTableNeedsToBeUpdated) {
            _this3.refreshDataTableMatchesAndMatchMessages(_this3.requestHandler).then(function () {
              _this3.setRefreshDataTable(false);

              _this3.screenList.updateCurrentScreen(_this3.getCurrentScreenByUrlAndDOM());

              _this3.addUIHelpers(_this3.screenList, _this3.currentDataRecordSwipe);
            }).finally(function () {
              _Overlay.Overlay.setLoadingOverlay('switchScreen', false);
            });
          } else {
            _this3.addUIHelpers(_this3.screenList, _this3.currentDataRecordSwipe);

            _Overlay.Overlay.setLoadingOverlay('switchScreen', false);
          }
        }, 500);
      });
      mutationObv.observe($SOCcontainer, {
        childList: true,
        subtree: true,
        characterDataOldValue: true
      });
      this.watchersUIList.push(mutationObv);
    }
  }, {
    key: "_getCorrectNewDataRecord",
    value: function _getCorrectNewDataRecord() {
      // if previous screen is swipe & current screen is swipe detail, keep the same dataRecord AND if is vice-versa
      // if previous screen is swipeexplore & current screen is swipeexploredetail, keep the same dataRecord AND if is vice-versa
      if (this.currentDataRecordSwipe === null) {
        this.currentDataRecordSwipe = new _dataRecord44.DataRecord();
      }

      switch (true) {
        case this.screenList.getPreviousScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.Swipe && this.screenList.getCurrentScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeDetail:
        case this.screenList.getPreviousScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeDetail && this.screenList.getCurrentScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.Swipe:
        case this.screenList.getPreviousScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore && this.screenList.getCurrentScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExploreDetail:
        case this.screenList.getPreviousScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExploreDetail && this.screenList.getCurrentScreen().getScreenName() === _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore:
          return this.currentDataRecordSwipe;

        default:
          return new _dataRecord44.DataRecord();
      }
    }
  }, {
    key: "setMessageListWatcherOnScreen",
    value: function setMessageListWatcherOnScreen() {
      var _this4 = this;

      var messageListIdentifier = '.messageList';
      var $MessageListContainer = $('body').find(messageListIdentifier).first()[0];

      if (!$MessageListContainer) {
        console.error("Element with identifier not found: ".concat(messageListIdentifier, ". Please update identifiers."));
        return;
      }

      var mutationObv = new MutationObserver(function (mutations) {
        // ensures that only descandt nodes of the (div) node with class 'messageList' will be passed
        var mutationsOnMessageItem = mutations.filter(function (mutation) {
          var mutatedElement = mutation.target;

          if (mutatedElement.nodeName === "DIV") {
            if (!mutatedElement.classList.contains('messageList')) {
              return mutatedElement;
            }
          } else {
            return mutatedElement;
          }
        });

        if (mutationsOnMessageItem.length === 0) {
          return;
        } // check if mutation are from receiving a new message, if so update the dataRecord to set 'needsTobeUpdated' to true


        var matchId = _this4.getMatchIdFromMutations(mutationsOnMessageItem); //Known flase positives (but does not matter, since all it does will be refetching the messages anyway);
        // 'bug 1'; profile Aniek last message was a ANIMATED GIF sent to her.. this shows up as a hyperlink in the messages.. thus the last message ('You sent a GIF..') does INDEED NOT EQUAL the last message known by the dataRecord (the hyperlink to the gif)


        if (matchId !== null) {
          // const dataRecord = this.dataTable.getRecordByRecordIndex(this.dataTable.getRecordIndexBySystemId(matchId, 'tinder'));
          var dataRecord = _this4.dataTable.getRecordByRecordIndex(_this4.dataTable.getRecordIndexBySystemId(matchId, _this4.nameController));

          if (dataRecord === null) {
            console.error("Observed last message from unknown match. Please check match in mutations: ".concat(mutationsOnMessageItem, " and check the datatable manually"));
            return;
          }

          if (_this4.hasReceivedNewMessagesFromMatch(mutationsOnMessageItem, dataRecord)) {
            // eslint-disable-next-line no-debugger
            // debugger;
            dataRecord.setUpdateMessages(true);

            _this4.setRefreshDataTable(true);

            console.log("%c ".concat(console.count(), " (2)I just set profile: ").concat(dataRecord.usedDataFields[5].getValue(), " with id: ").concat(matchId, " with recordIndex: ").concat(_this4.dataTable.getRecordIndexBySystemId(matchId, _this4.nameController), " to true.. for this person sent me a new message thus my messages list for her should be reviewed"), "color: orange");
            return;
          }
        } // if not, then mutations are from switching match conversation

      });
      mutationObv.observe($MessageListContainer, {
        childList: true,
        subtree: true,
        characterDataOldValue: false
      });
      this.watchersUIList.push(mutationObv);
    }
  }, {
    key: "setMatchesListWatcher",
    value: function setMatchesListWatcher() {
      var _this5 = this;

      var matchesListIdentifier = 'a.matchListItem';

      var matchesListElement = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector(matchesListIdentifier);

      var matchesListContainer = null;

      if (matchesListElement !== null) {
        matchesListContainer = $(matchesListElement).parents('[role="tabpanel"]').first()[0] ? $(matchesListElement).parents('[role="tabpanel"]').first()[0] : null;

        if (matchesListContainer !== null) {
          this.amountOfUnmessagedMatches = this.getUnmessagedMatchesAmount(matchesListContainer);
          var mutationObv = new MutationObserver(function (mutations) {
            if (matchesListContainer !== null) {
              var currentUnmessagedMatchesAmount = _this5.getUnmessagedMatchesAmount(matchesListContainer);

              console.log("Did the UI get updated so I can NOW get the number of unmessaged matches after one or more has been added/deleted?");
              console.log("Old number: ".concat(_this5.amountOfUnmessagedMatches, ", current/new number: ").concat(currentUnmessagedMatchesAmount));

              if (_this5.amountOfUnmessagedMatches !== currentUnmessagedMatchesAmount) {
                _this5.amountOfUnmessagedMatches = currentUnmessagedMatchesAmount;

                _this5.setRefreshDataTable(true);
              }
            } else {
              console.error("Could not find matchesListContainer. Please update the identifier.");
              return;
            }
          });
          mutationObv.observe(matchesListContainer, {
            childList: true,
            subtree: true,
            characterDataOldValue: false
          });
          this.watchersUIList.push(mutationObv);
        } else {
          console.error("Could not find matchesListContainer. Please update the identifier.");
          return;
        }
      } else {
        console.error("Could not find matchesListElement. Please update the identifier.");
        return;
      }
    }
  }, {
    key: "setRefreshDataTable",
    value: function setRefreshDataTable(shouldDataTableBeRefreshed) {
      this.dataTableNeedsToBeUpdated = shouldDataTableBeRefreshed;
    }
  }, {
    key: "getUnmessagedMatchesAmount",
    value: function getUnmessagedMatchesAmount(matchesListContainerElement) {
      var matchListItemsAmount = $(matchesListContainerElement).find('a.matchListItem').length; // I assume the 'likes you' and 'sent-likes' will always be present, thus accounting for at least 2 elements with class matchListItem

      if (matchListItemsAmount >= 1) {
        return matchListItemsAmount;
      } else {
        console.error("Unable to find matchListItems. Please update selectors.");
        return 0;
      }
    }
  }, {
    key: "getLatestMessageFromMutations",
    value: function getLatestMessageFromMutations(mutations) {
      var latestMessageFromUI = null;
      mutations.forEach(function (mutation) {
        if (mutation.target) {
          var element$ = $(mutation.target).hasClass('messageListItem') ? $(mutation.target).first() : $(mutation.target).parents('.messageListItem').first();

          if (element$.length > 0) {
            latestMessageFromUI = element$.find('.messageListItem__message').text();
          } else {
            console.error("Jquery node not found with class \"messageListItem__message\"");
            return null;
          }
        }
      });
      return latestMessageFromUI;
    }
  }, {
    key: "getMatchIdFromMutations",
    value: function getMatchIdFromMutations(mutations) {
      var _this6 = this;

      var matchId = null;
      mutations.forEach(function (mutation) {
        if ($(mutation.target).hasClass('messageList')) {
          return;
        }

        var element$ = $(mutation.target).hasClass('messageListItem') ? $(mutation.target).first() : $(mutation.target).parents('.messageListItem').first();

        if (element$.length > 0) {
          matchId = _this6.getMatchIdFromMessageListItem(element$[0]);
        } else {
          console.error("Jquery node not found with class \"messageListItem__message\"");
          return null;
        }
      });
      return matchId;
    }
  }, {
    key: "hasReceivedNewMessagesFromMatch",
    value: function hasReceivedNewMessagesFromMatch(mutations, dataRecord) {
      var latestMessageFromUI = this.getLatestMessageFromMutations(mutations);
      var latestMessageFromMatchInDataTable;

      if (dataRecord.hasMessages()) {
        var _dataRecord$getLatest;

        latestMessageFromMatchInDataTable = dataRecord.getLatestMessage() ? (_dataRecord$getLatest = dataRecord.getLatestMessage()) === null || _dataRecord$getLatest === void 0 ? void 0 : _dataRecord$getLatest.message : null;
      } else {
        latestMessageFromMatchInDataTable = "";
      }

      if (!latestMessageFromUI) {
        console.error("Unable to get new message from match. The value for from the UI is: \"".concat(latestMessageFromUI, "\". Please update the selectors."));
        return false;
      }

      if (latestMessageFromUI !== latestMessageFromMatchInDataTable) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "getMatchIdFromMessageListItem",
    value: function getMatchIdFromMessageListItem(latestMessageElement) {
      if (!$(latestMessageElement).hasClass('messageListItem')) {
        console.error("latestMessageElement received is  not a messageListItem element. Please update the selectors.");
        return null;
      }

      var matchIdHref = $(latestMessageElement).attr('href');
      var matchId;

      if (matchIdHref && matchIdHref.length > 0) {
        matchId = matchIdHref.substring(matchIdHref.lastIndexOf('/') + 1);

        if (matchId && matchId.length > 0) {
          return matchId;
        }
      }

      console.error("Unable to get match id from message list item. Please update the DOM selectors.");
      return null;
    }
  }, {
    key: "parseMatchDataToDataRecordValues",
    value: function parseMatchDataToDataRecordValues(dataFields, match, systemId) {
      var _dataFields$find,
          _dataFields$find2,
          _this7 = this;

      //todo: refactor code to use dataFields directly (similair to dataFieldMessages) instead of creating & adding fields to the seperate list below
      var dataRecordValuesList = [];
      var messagesDataField = dataFields[2]; // todo: refactor this to nicely get dataRecord, and from dataRecord (write a method to?) retrieve messages DataField

      if (match && match.match.messages.length > 0 || match && match.matchMessages.length > 0) {
        var retrievedMessagesFromMatch = match.matchMessages.length > 0 ? match.matchMessages : match.match.messages;
        messagesDataField.updateMessagesList(this._convertTinderMessagesForDataRecord(retrievedMessagesFromMatch, match.match.person._id));
      }

      var dateAcquiredNumber = (_dataFields$find = dataFields.find(function (dataField) {
        return dataField.title === 'Date-of-acquired-number';
      })) === null || _dataFields$find === void 0 ? void 0 : _dataFields$find.getValue();
      var dateBlockedOrRemoved = (_dataFields$find2 = dataFields.find(function (dataField) {
        return dataField.title === 'Date-of-unmatch';
      })) === null || _dataFields$find2 === void 0 ? void 0 : _dataFields$find2.getValue();
      var reminder = new _NeedsReminder.Reminder(messagesDataField.getAllMessages(), dateAcquiredNumber, dateBlockedOrRemoved, new Date().getTime());
      dataFields.forEach(function (dataField, index, dataFields) {
        var _match$match2;

        switch (dataField.title) {
          case 'System-no':
            {
              var _match$match, _match$match$person;

              if (!match) {
                break;
              }

              dataRecordValuesList.push({
                'label': 'System-no',
                'value': {
                  'appType': _this7.nameController,
                  'id': match && match.match && match.match.id ? match.match.id : systemId,
                  'tempId': (match === null || match === void 0 ? void 0 : (_match$match = match.match) === null || _match$match === void 0 ? void 0 : (_match$match$person = _match$match.person) === null || _match$match$person === void 0 ? void 0 : _match$match$person._id) ? match.match.person._id : ''
                }
              });
              break;
            }

          case 'No':
            //todo: ensure providing null increments the number in dataTable instead of throwing error
            dataRecordValuesList.push({
              'label': 'No',
              'value': dataField.getValue() ? dataField.getValue() : undefined
            });
            break;

          case 'Last-updated':
            dataRecordValuesList.push({
              'label': 'Last-updated',
              'value': new Date().toISOString()
            });
            break;

          case 'Date-liked-or-passed':
            // does not get logged by tinder, thus can only be logged by me, thus should be undefined
            dataRecordValuesList.push({
              'label': 'Date-liked-or-passed',
              'value': dataField.getValue() ? dataField.getValue() : null
            });
            break;

          case 'Name':
            dataRecordValuesList.push({
              'label': 'Name',
              'value': match ? match.match.person.name : dataField.getValue()
            });
            break;

          case 'Age':
            dataRecordValuesList.push({
              'label': 'Age',
              'value': match ? _dateHelper.DateHelper.getAgeFromBirthDate(match.match.person.birth_date) : dataField.getValue()
            });
            break;

          case 'City':
            dataRecordValuesList.push({
              'label': 'City',
              'value': dataField.getValue() ? dataField.getValue() : null
            });
            break;

          case 'Job':
            dataRecordValuesList.push({
              'label': 'Job',
              'value': dataField.getValue() ? dataField.getValue() : null
            });
            break;

          case 'Seems-fake':
            dataRecordValuesList.push({
              'label': 'Seems-fake',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'Seems-empty':
            dataRecordValuesList.push({
              'label': 'Seems-empty',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'Has-profiletext':
            {
              dataRecordValuesList.push({
                'label': 'Has-profiletext',
                'value': match ? match.match.person.bio && match.match.person.bio.length > 0 ? true : false : dataField.getValue()
              });
              break;
            }

          case 'Has-usefull-profiletext':
            dataRecordValuesList.push({
              'label': 'Has-usefull-profiletext',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Gender':
            dataRecordValuesList.push({
              'label': 'Gender',
              'value': (match === null || match === void 0 ? void 0 : match.match.person.gender) ? _this7._getGender(match === null || match === void 0 ? void 0 : match.match.person.gender) : dataField.getValue()
            });
            break;

          case 'Is-verified':
            {
              // ensure that if Is-verified has been set once, it will not be overwritten again. 
              // todo: Maybe make a field setting for this?
              dataRecordValuesList.push({
                'label': 'Is-verified',
                'value': match ? match.match.person.badges ? _this7._isVerifiedMatch(match.match.person.badges) : false : dataField.getValue()
              });
              break;
            }

          case 'Type-of-match-or-like':
            {
              dataRecordValuesList.push({
                'label': 'Type-of-match-or-like',
                'value': (match === null || match === void 0 ? void 0 : match.match) ? _this7._getTypeOfMatchAndLike(match.match) : dataField.getValue()
              });
              break;
            }

          case 'Liked-me-first-is-instant-match':
            {
              dataRecordValuesList.push({
                'label': 'Liked-me-first-is-instant-match',
                'value': dataField.getValue() || dataField.getValue() === null ? dataField.getValue() : false
              });
              break;
            }

          case 'Is-gold-match':
            {
              dataRecordValuesList.push({
                'label': 'Is-gold-match',
                'value': dataField.getValue() || dataField.getValue() === null ? dataField.getValue() : false
              });
              break;
            }

          case 'Needs-profile-update':
            {
              dataRecordValuesList.push({
                'label': 'Needs-profile-update',
                'value': dataField.getValue() ? dataField.getValue() : false
              });
              break;
            }

          case 'Needs-messages-update':
            {
              dataRecordValuesList.push({
                'label': 'Needs-messages-update',
                'value': dataField.getValue() ? dataField.getValue() : false
              });
              break;
            }

          case 'Needs-reminder':
            {
              dataRecordValuesList.push({
                'label': 'Needs-reminder',
                'value': messagesDataField.hasMessages() ? reminder.getNeedsReminder(messagesDataField.getAllMessages()) : false
              });
              break;
            }

          case 'Amount-of-pictures':
            dataRecordValuesList.push({
              'label': 'Amount-of-pictures',
              'value': dataField.getValue() === null && (match === null || match === void 0 ? void 0 : match.match.person) !== undefined ? _this7.getAmountOfPictures(match === null || match === void 0 ? void 0 : match.match.person) : null
            });
            break;

          case 'Attractiveness-score':
            dataRecordValuesList.push({
              'label': 'Attractiveness-score',
              'value': dataField.getValue() || dataField.getValue() === 0 ? dataField.getValue() : null
            });
            break;

          case 'Details-tags':
            {
              var currentValue = dataField.getValue();
              dataRecordValuesList.push({
                'label': 'Details-tags',
                'value': currentValue && currentValue.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Vibe-tags':
            {
              var _currentValue = dataField.getValue();

              dataRecordValuesList.push({
                'label': 'Vibe-tags',
                'value': _currentValue && _currentValue.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Seems-to-be-active':
            {
              var hasMatchGivenResponse = _this7._hasMatchGivenResponse(messagesDataField.getAllMessages());

              dataRecordValuesList.push({
                'label': 'Seems-to-be-active',
                'value': dataField.getValue() || hasMatchGivenResponse ? true : false
              });
              break;
            }

          case 'Did-i-like':
            dataRecordValuesList.push({
              'label': 'Did-i-like',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Is-match':
            // if match.match.person is valid, then it is obviously a match, if not it's probably false thus use the value this field already has.
            dataRecordValuesList.push({
              'label': 'Is-match',
              'value': (match === null || match === void 0 ? void 0 : (_match$match2 = match.match) === null || _match$match2 === void 0 ? void 0 : _match$match2.person) ? true : dataField.getValue()
            });
            break;

          case 'Date-match':
            dataRecordValuesList.push({
              'label': 'Date-match',
              'value': match ? match.match.created_date : dataField.getValue()
            });
            break;

          case 'Match-sent-first-message':
            {
              dataRecordValuesList.push({
                'label': 'Match-sent-first-message',
                'value': messagesDataField.hasMessages() ? _this7._hasMatchSentFirstMessage(messagesDataField.getAllMessages()) : null
              });
              break;
            }

          case 'Match-responded':
            dataRecordValuesList.push({
              'label': 'Match-responded',
              'value': messagesDataField.hasMessages() ? _this7._hasMatchGivenResponse(messagesDataField.getAllMessages()) : null
            });
            break;

          case 'Conversation-exists':
            dataRecordValuesList.push({
              'label': 'Conversation-exists',
              'value': messagesDataField.hasMessages() ? _this7._hasConversation(messagesDataField.getAllMessages()) : null
            });
            break;

          case 'Vibe-conversation':
            dataRecordValuesList.push({
              'label': 'Vibe-conversation',
              'value': dataField.getValue() || dataField.getValue() === 0 ? dataField.getValue() : null
            });
            break;

          case 'How-many-ghosts':
            {
              // const dateAcquiredNumber: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-acquired-number')?.getValue() as string | null;
              // const dateBlockedOrRemoved: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-unmatch')?.getValue() as string | null;
              dataRecordValuesList.push({
                'label': 'How-many-ghosts',
                'value': messagesDataField.hasMessages() ? _this7._getNumberOfGhosting(messagesDataField.getAllMessages(), match && match.match ? match.match : undefined, dateAcquiredNumber, dateBlockedOrRemoved) : []
              });
              break;
            }

          case 'Acquired-number':
            dataRecordValuesList.push({
              'label': 'Acquired-number',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Response-speed':
            dataRecordValuesList.push({
              'label': 'Response-speed',
              'value': messagesDataField.hasMessages() ? _this7._getResponseSpeedMoments(messagesDataField.getAllMessages()) : []
            });
            break;

          case 'Reminders-amount':
            {
              // const dateAcquiredNumber: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-acquired-number')?.getValue() as string | null;
              // const dateBlockedOrRemoved: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-unmatch')?.getValue() as string | null;
              dataRecordValuesList.push({
                'label': 'Reminders-amount',
                // 'value': messagesDataField.hasMessages() ? this._getReminderAmount(messagesDataField.getAllMessages(), dateAcquiredNumber, dateBlockedOrRemoved) : []
                'value': messagesDataField.hasMessages() ? reminder.getReminderAmountItems() : []
              });
            }
            break;

          case 'Match-wants-no-contact':
            dataRecordValuesList.push({
              'label': 'Match-wants-no-contact',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Interested-in-sex':
            dataRecordValuesList.push({
              'label': 'Interested-in-sex',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Potential-click':
            dataRecordValuesList.push({
              'label': 'Potential-click',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Why-i-removed':
            {
              var _currentValue2 = dataField.getValue();

              dataRecordValuesList.push({
                'label': 'Why-i-removed',
                'value': _currentValue2 && _currentValue2.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Did-i-unmatch':
            dataRecordValuesList.push({
              'label': 'Did-i-unmatch',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'Notes':
            dataRecordValuesList.push({
              'label': 'Notes',
              'value': dataField.getValue() ? dataField.getValue() : ''
            });
            break;

          default:
            if (!dataField.emptyFieldAllowed) {
              console.warn("DataField: ".concat(dataField.title, " does not have an inplementation in TinderController thus could not be resolved"));
            }

            break;
        }
      });
      return dataRecordValuesList;
    }
  }, {
    key: "_convertTinderMessagesForDataRecord",
    value: function _convertTinderMessagesForDataRecord(matchMessages, matchPersonId) {
      //todo: why can't i set the interface to {message: string, timestamp: number, author: 'me' | 'match'}[] ?
      var messagesForDataRecord = [];
      matchMessages.forEach(function (matchMessage) {
        var datetime = function datetime(matchMessage) {
          if (_dateHelper.DateHelper.isValidDate(matchMessage.sent_date)) {
            return matchMessage.sent_date;
          }

          if (_dateHelper.DateHelper.isValidDate(matchMessage.created_date)) {
            return matchMessage.created_date;
          }

          if (_dateHelper.DateHelper.isValidDate(new Date(matchMessage.timestamp).toISOString())) {
            return new Date(matchMessage.timestamp).toISOString();
          }

          console.error("Failed to get proper datetime for message");
          return '';
        };

        messagesForDataRecord.push({
          message: matchMessage.message,
          datetime: datetime(matchMessage),
          author: matchMessage.from === matchPersonId ? _message.MessageAuthorEnum.Match : _message.MessageAuthorEnum.Me
        });
      });
      return messagesForDataRecord;
    }
  }, {
    key: "_getResponseSpeedMoments",
    value: function _getResponseSpeedMoments(matchMessages) {
      var responseSpeedMoments = []; // if there are no messages from the other person at all, return 0

      if (!matchMessages.some(function (message) {
        return message.author === _message.MessageAuthorEnum.Match;
      })) {
        return responseSpeedMoments;
      }

      matchMessages.forEach(function (currentMessage, index, messagesList) {
        var nextMessage = index + 1 < messagesList.length - 1 ? messagesList[index + 1] : undefined; // if the first message is from me, and the second message is from the other person
        // total messagesList (existing items) is 89
        // if 88, index + 1 = 89, messageList (90)-1 = 89 = gets the 89th message
        // if 89 (last item) + 1 = 90, messageList is (90)-1 = 89, item is NOT less than messageList, thus undefined

        if (!nextMessage) {
          return;
        }

        if (currentMessage.author !== _message.MessageAuthorEnum.Match && nextMessage.author === _message.MessageAuthorEnum.Match) {
          // get the difference between these two moments in datetime
          // add this datetime to the list
          responseSpeedMoments.push({
            datetimeMyLastMessage: currentMessage.datetime,
            datetimeTheirResponse: nextMessage.datetime,
            // get the difference in MS between the following received message received from my match and my previously sent message
            differenceInMS: new Date(nextMessage.datetime).getTime() - new Date(currentMessage.datetime).getTime()
          });
        }
      });
      return responseSpeedMoments;
    }
  }, {
    key: "_getNumberOfGhosting",
    value: function _getNumberOfGhosting(matchMessages, match, dateAcquiredNumber, dateBlockedOrRemoved) {
      var amountOfGhosts = 0;
      var ghostsList = []; // if there are no messages from the other person at all, return 0

      if (!matchMessages.some(function (message) {
        return message.author === _message.MessageAuthorEnum.Match;
      })) {
        return ghostsList;
      }

      matchMessages.reduce(function (formerMessage, laterMessage) {
        // 1. is there 2 days or more in between my last message and her reply message? = ghost moment
        // if(myMessage.from !== matchPersonId && matchMessageReply.from === matchPersonId){
        var isMatchMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(formerMessage.datetime, dateAcquiredNumber) : false;
        var isMyMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(laterMessage.datetime, dateAcquiredNumber) : false;

        if (isMatchMessageLaterThanAcquiredNumberDate || isMyMessageLaterThanAcquiredNumberDate) {
          // date is later thasn acquired number date, thus should no longer add ghostMoments.
          return laterMessage;
        }

        var isMatchMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(formerMessage.datetime, dateBlockedOrRemoved) : false;
        var isMyMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(laterMessage.datetime, dateBlockedOrRemoved) : false;

        if (isMatchMessageLaterThanBlockedDate || isMyMessageLaterThanBlockedDate) {
          // date is later than blocked or removed date, thus should no longer add ghostMoments.
          return laterMessage;
        }

        var matchMessageReplyTimeStamp = new Date(laterMessage.datetime).getTime();
        var myMessageTimeStamp = new Date(formerMessage.datetime).getTime();

        var isGhostMoment = _dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(myMessageTimeStamp, matchMessageReplyTimeStamp, 2); //todo: What if I ghost her!? she sends me message after message.. will get registered as a ghost moment..


        if (isGhostMoment) {
          ghostsList.push({
            number: amountOfGhosts,
            timeSinceLastMessageMS: matchMessageReplyTimeStamp - myMessageTimeStamp,
            status: laterMessage.author === _message.MessageAuthorEnum.Match ? _dataItemGhost.GhostStatus.REPLIED : _dataItemGhost.GhostStatus.NOT_REPLIED_TO_REMINDER
          });
          amountOfGhosts = amountOfGhosts + 1;
        }

        return laterMessage;
      }); // 2. is the last message sent from me AND is it older or equal than 2 days?  = ghost moment

      var lastMessage = matchMessages[matchMessages.length - 1];
      var lastMessageTimeStamp = new Date(lastMessage.datetime).getTime();
      var isLastMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(lastMessage.datetime, dateAcquiredNumber) : false;
      var isLastMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(lastMessage.datetime, dateBlockedOrRemoved) : false;

      if (dateBlockedOrRemoved && dateBlockedOrRemoved.length > 0) {
        var lastGhostMoment = ghostsList.pop();

        if (lastGhostMoment && lastGhostMoment.status === _dataItemGhost.GhostStatus.NOT_REPLIED_TO_REMINDER) {
          lastGhostMoment.status = _dataItemGhost.GhostStatus.BLOCKED;
          ghostsList.push(lastGhostMoment);
        }
      }

      if (isLastMessageLaterThanAcquiredNumberDate || isLastMessageLaterThanBlockedDate) {
        // lastMessage date is later than blocked or removed date, thus should no longer add ghostMoments.
        return ghostsList;
      }

      if (lastMessage.author !== _message.MessageAuthorEnum.Match && _dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(lastMessageTimeStamp, new Date().getTime(), 2)) {
        ghostsList.push({
          number: amountOfGhosts,
          timeSinceLastMessageMS: new Date().getTime() - lastMessageTimeStamp,
          status: _dataItemGhost.GhostStatus.NOT_REPLIED
        });
        amountOfGhosts = amountOfGhosts + 1;
      }

      return ghostsList;
    }
  }, {
    key: "_hasConversation",
    value: function _hasConversation(matchMessages) {
      // if i sent at least 3 messages
      // if person sent 3 messages in return
      // my messages must be somewhere in between the other person's messages

      /*
      if i have sent her a message, and another one..(2 me),
      10 messages in total..
        check if i sent her a message (or vice versa), ignore other messages afetrwards from the same sender (a.1)
      then check if she sent me a message (or vice versa), ignore other messages afterwards from the same sender (b.1),
        afterwards check if i replied to her message (or vice versa), ignore other messages afterwards from the same sender (a.2)
      then check if she sent me a message (or vice versa), ignore other messages aterwards from the same sender (b.2),
        do the same untill you reach (a.3) and (b.3).
      If result is a.3 && b.3 return true, otherwise return false
      */
      var amountMessagesSentByMe = 0;
      var amountMessagesSentByOther = 0;
      var lastRespondent;
      matchMessages.forEach(function (message, index) {
        // determine the sender of the first message
        if (index === 0) {
          if (message.author === _message.MessageAuthorEnum.Match) {
            amountMessagesSentByOther = amountMessagesSentByOther + 1;
          } else {
            amountMessagesSentByMe = amountMessagesSentByMe + 1;
          }

          lastRespondent = message.author;
        } // determine if the next message after the first is from different sender


        if (index !== 0 && message.author !== lastRespondent) {
          if (message.author === _message.MessageAuthorEnum.Match) {
            amountMessagesSentByOther = amountMessagesSentByOther + 1;
          } else {
            amountMessagesSentByMe = amountMessagesSentByMe + 1;
          }

          lastRespondent = message.author;
        }
      });

      if (amountMessagesSentByMe >= 3 && amountMessagesSentByOther >= 3) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "_hasMatchGivenResponse",
    value: function _hasMatchGivenResponse(matchMessages) {
      return matchMessages.some(function (matchMessage) {
        return matchMessage.author === _message.MessageAuthorEnum.Match;
      });
    }
  }, {
    key: "_hasMatchSentFirstMessage",
    value: function _hasMatchSentFirstMessage(matchMessages) {
      return matchMessages[0].author === _message.MessageAuthorEnum.Match ? true : false;
    }
  }, {
    key: "_isVerifiedMatch",
    value: function _isVerifiedMatch(badgesList) {
      if (badgesList.length > 0) {
        return badgesList.some(function (badge) {
          return badge.type === "selfie_verified";
        });
      } else {
        return false;
      }
    }
  }, {
    key: "setCredentials",
    value: function setCredentials() {
      var tinderXAuthToken = localStorage.getItem('TinderWeb/APIToken');

      if (tinderXAuthToken && tinderXAuthToken.length > 0) {
        this.xAuthToken = tinderXAuthToken;
        return true;
      }

      return false;
    }
  }, {
    key: "setSwipeHelperOnScreen",
    value: function setSwipeHelperOnScreen() {
      this.screenList.updateCurrentScreen(this.getCurrentScreenByUrlAndDOM());
      this.addUIHelpers(this.screenList, this.currentDataRecordSwipe);
    }
  }, {
    key: "addUIHelpers",
    value: function addUIHelpers(screenController, dataRecordToBeUsedForSwipe, forceRefresh) {
      var _this8 = this;

      if (screenController.getCurrentScreen().getScreenIsChatScreen()) {
        if (forceRefresh) {
          this.uiRenderer.removeAllUIHelpers();
        } // 1. get current messageListItemPerson


        var currentMatchid = this.getCurrentMatchIdFromChatScreen();
        var dataRecord = null;
        var dataFields = undefined; // 2. get record in table for this person

        if (currentMatchid.length > 0) {
          var recordIndexId = this.dataTable.getRecordIndexBySystemId(currentMatchid, this.nameController);

          if (recordIndexId !== -1) {
            // todo: so i need to get the data first BEFORE i update the record? or just change this entirely?
            // todo: why do i need to include undefined here while at no point in the assignment of this variabele does it ever get undefined assigned to it?
            dataRecord = this.dataTable.getRecordByRecordIndex(recordIndexId);

            if (dataRecord !== null) {
              dataFields = dataRecord.getDataRecordDataFields(); // 3. show helpers for chat (all?), make space above messagebox, put helper container there?

              this.uiRenderer.renderFieldsContainerForScreen(screenController, function () {// $('div[id*="SC.chat"]').first().css('width', '730px');
                // since the uiHelpers are now being put on the body, the code below is no longer necessary
                // const chatContainerDOM: HTMLElement | null = DOMHelper.getFirstDOMNodeByJquerySelector('div[id*="SC.chat"]');
                // if (chatContainerDOM !== null) {
                //     $(chatContainerDOM).css('padding-right', '315px');
                // } else {
                //     console.error(`Cannot find chat container DOM element. Please update the selectors.`);
                //     return;
                // }
              });
              var uiRequiredDataFields = [];

              if (dataFields && dataFields.length > 0) {
                uiRequiredDataFields = dataRecord.getDataFields(false, true, _dataField.UIRequired.CHAT_ONLY); // 4. on send/receive message.. add message to/update dataRecord? (check; messageListObserver)
                // 5. on switch person in messagelist; switch settings of the above? (check screenWatcher (Observer))

                this.uiRenderer.renderFieldsFromDataFields(uiRequiredDataFields, function (value) {
                  var _dataRecord;

                  console.log("Updated value to existing data record; label: ".concat(value.label, ", value: ").concat(value.value));
                  var updatedValuesForDataFields = [value];

                  if (value.label === "Acquired-number" && value.value) {
                    updatedValuesForDataFields.push({
                      label: 'Date-of-acquired-number',
                      value: new Date().toISOString()
                    });
                  } else if (value.label === "Acquired-number" && !value.value) {
                    updatedValuesForDataFields.push({
                      label: 'Date-of-acquired-number',
                      value: null
                    });
                  }

                  (_dataRecord = dataRecord) === null || _dataRecord === void 0 ? void 0 : _dataRecord.addDataToDataFields(updatedValuesForDataFields);
                  console.log("Updated dataRecord: ");
                  console.dir(dataRecord);
                }, function (submitType) {
                  console.log("pre-submit, not relevant for chat page");
                }, function (submitType) {
                  var _dataRecord2;

                  (_dataRecord2 = dataRecord) === null || _dataRecord2 === void 0 ? void 0 : _dataRecord2.setUpdateMessages(true);
                });
              }

              var indexDataFieldDistance = dataRecord.getIndexOfDataFieldByTitle('Distance-in-km');

              if (indexDataFieldDistance !== -1) {
                var distanceDataField = dataRecord.usedDataFields[indexDataFieldDistance];
                var hasRecentDistanceEntry = distanceDataField.containsRecordWithinHours(12);
                var personId = dataRecord.getRecordPersonSystemId(this.nameController, true);

                if (hasRecentDistanceEntry === false && personId && personId.length > 0) {
                  this.requestHandler.getProfileDetailsStart(personId).then(function (matchDetails) {
                    var _dataRecord3, _dataRecord4, _dataRecord5, _dataRecord6, _matchDetails$results, _dataRecord7, _dataRecord8, _dataRecord9, _dataRecord10, _matchDetails$results2, _dataRecord11, _dataRecord12, _dataRecord13, _dataRecord14, _matchDetails$results3, _matchDetails$results4, _dataRecord15, _dataRecord16, _dataRecord17, _dataRecord18, _matchDetails$results5, _matchDetails$results6, _matchDetails$results7, _matchDetails$results8, _matchDetails$results9, _matchDetails$results10, _dataRecord19, _dataRecord20, _dataRecord21, _dataRecord22, _matchDetails$results11, _matchDetails$results12, _matchDetails$results13, _matchDetails$results14, _dataRecord23, _dataRecord24, _dataRecord25, _dataRecord26, _matchDetails$results15, _matchDetails$results16, _dataRecord27, _dataRecord28, _dataRecord29, _dataRecord30, _matchDetails$results17, _matchDetails$results18, _matchDetails$results19, _matchDetails$results20, _matchDetails$results21, _dataRecord31, _dataRecord32, _dataRecord33, _dataRecord34, _matchDetails$results22, _dataRecord35, _dataRecord36, _dataRecord37, _dataRecord38, _matchDetails$results23, _matchDetails$results24, _matchDetails$results25, _dataRecord39, _dataRecord40, _dataRecord41, _dataRecord42, _dataRecord43;

                    var dataForDataFields = [{
                      label: 'Name',
                      // value: matchDetails?.results?.name ? matchDetails.results.name : 'Unknown name'
                      value: ((_dataRecord3 = dataRecord) === null || _dataRecord3 === void 0 ? void 0 : _dataRecord3.usedDataFields[(_dataRecord4 = dataRecord) === null || _dataRecord4 === void 0 ? void 0 : _dataRecord4.getIndexOfDataFieldByTitle('Name')].getValue()) ? (_dataRecord5 = dataRecord) === null || _dataRecord5 === void 0 ? void 0 : _dataRecord5.usedDataFields[(_dataRecord6 = dataRecord) === null || _dataRecord6 === void 0 ? void 0 : _dataRecord6.getIndexOfDataFieldByTitle('Name')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results = matchDetails.results) === null || _matchDetails$results === void 0 ? void 0 : _matchDetails$results.name) ? matchDetails.results.name : 'Unknown name'
                    }, {
                      label: 'Age',
                      // value: matchDetails?.results?.birth_date ? DateHelper.getAgeFromBirthDate(matchDetails.results.birth_date) : NaN
                      value: ((_dataRecord7 = dataRecord) === null || _dataRecord7 === void 0 ? void 0 : _dataRecord7.usedDataFields[(_dataRecord8 = dataRecord) === null || _dataRecord8 === void 0 ? void 0 : _dataRecord8.getIndexOfDataFieldByTitle('Age')].getValue()) ? (_dataRecord9 = dataRecord) === null || _dataRecord9 === void 0 ? void 0 : _dataRecord9.usedDataFields[(_dataRecord10 = dataRecord) === null || _dataRecord10 === void 0 ? void 0 : _dataRecord10.getIndexOfDataFieldByTitle('Age')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results2 = matchDetails.results) === null || _matchDetails$results2 === void 0 ? void 0 : _matchDetails$results2.birth_date) ? _dateHelper.DateHelper.getAgeFromBirthDate(matchDetails.results.birth_date) : NaN
                    }, {
                      label: 'City',
                      // value: matchDetails?.results?.city?.name.length > 0 ? matchDetails.results.city.name : ''
                      value: ((_dataRecord11 = dataRecord) === null || _dataRecord11 === void 0 ? void 0 : _dataRecord11.usedDataFields[(_dataRecord12 = dataRecord) === null || _dataRecord12 === void 0 ? void 0 : _dataRecord12.getIndexOfDataFieldByTitle('City')].getValue()) ? (_dataRecord13 = dataRecord) === null || _dataRecord13 === void 0 ? void 0 : _dataRecord13.usedDataFields[(_dataRecord14 = dataRecord) === null || _dataRecord14 === void 0 ? void 0 : _dataRecord14.getIndexOfDataFieldByTitle('City')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results3 = matchDetails.results) === null || _matchDetails$results3 === void 0 ? void 0 : (_matchDetails$results4 = _matchDetails$results3.city) === null || _matchDetails$results4 === void 0 ? void 0 : _matchDetails$results4.name.length) > 0 ? matchDetails.results.city.name : ''
                    }, {
                      label: 'Job',
                      // value: matchDetails?.results?.jobs?.at(0)?.title?.name ? matchDetails?.results.jobs.at(0)?.title.name : ''
                      value: ((_dataRecord15 = dataRecord) === null || _dataRecord15 === void 0 ? void 0 : _dataRecord15.usedDataFields[(_dataRecord16 = dataRecord) === null || _dataRecord16 === void 0 ? void 0 : _dataRecord16.getIndexOfDataFieldByTitle('Job')].getValue()) ? (_dataRecord17 = dataRecord) === null || _dataRecord17 === void 0 ? void 0 : _dataRecord17.usedDataFields[(_dataRecord18 = dataRecord) === null || _dataRecord18 === void 0 ? void 0 : _dataRecord18.getIndexOfDataFieldByTitle('Job')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results5 = matchDetails.results) === null || _matchDetails$results5 === void 0 ? void 0 : (_matchDetails$results6 = _matchDetails$results5.jobs) === null || _matchDetails$results6 === void 0 ? void 0 : (_matchDetails$results7 = _matchDetails$results6.at(0)) === null || _matchDetails$results7 === void 0 ? void 0 : (_matchDetails$results8 = _matchDetails$results7.title) === null || _matchDetails$results8 === void 0 ? void 0 : _matchDetails$results8.name) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results9 = matchDetails.results.jobs.at(0)) === null || _matchDetails$results9 === void 0 ? void 0 : (_matchDetails$results10 = _matchDetails$results9.title) === null || _matchDetails$results10 === void 0 ? void 0 : _matchDetails$results10.name : ''
                    }, {
                      label: 'School',
                      // value: matchDetails?.results?.schools?.at(0)?.name ? matchDetails?.results.schools.at(0)?.name : ''
                      value: ((_dataRecord19 = dataRecord) === null || _dataRecord19 === void 0 ? void 0 : _dataRecord19.usedDataFields[(_dataRecord20 = dataRecord) === null || _dataRecord20 === void 0 ? void 0 : _dataRecord20.getIndexOfDataFieldByTitle('School')].getValue()) ? (_dataRecord21 = dataRecord) === null || _dataRecord21 === void 0 ? void 0 : _dataRecord21.usedDataFields[(_dataRecord22 = dataRecord) === null || _dataRecord22 === void 0 ? void 0 : _dataRecord22.getIndexOfDataFieldByTitle('School')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results11 = matchDetails.results) === null || _matchDetails$results11 === void 0 ? void 0 : (_matchDetails$results12 = _matchDetails$results11.schools) === null || _matchDetails$results12 === void 0 ? void 0 : (_matchDetails$results13 = _matchDetails$results12.at(0)) === null || _matchDetails$results13 === void 0 ? void 0 : _matchDetails$results13.name) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results14 = matchDetails.results.schools.at(0)) === null || _matchDetails$results14 === void 0 ? void 0 : _matchDetails$results14.name : ''
                    }, {
                      label: 'Gender',
                      // value: matchDetails?.results?.gender ? this._getGender(matchDetails?.results?.gender) : ''
                      value: ((_dataRecord23 = dataRecord) === null || _dataRecord23 === void 0 ? void 0 : _dataRecord23.usedDataFields[(_dataRecord24 = dataRecord) === null || _dataRecord24 === void 0 ? void 0 : _dataRecord24.getIndexOfDataFieldByTitle('Gender')].getValue()) ? (_dataRecord25 = dataRecord) === null || _dataRecord25 === void 0 ? void 0 : _dataRecord25.usedDataFields[(_dataRecord26 = dataRecord) === null || _dataRecord26 === void 0 ? void 0 : _dataRecord26.getIndexOfDataFieldByTitle('Gender')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results15 = matchDetails.results) === null || _matchDetails$results15 === void 0 ? void 0 : _matchDetails$results15.gender) ? _this8._getGender(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results16 = matchDetails.results) === null || _matchDetails$results16 === void 0 ? void 0 : _matchDetails$results16.gender) : ''
                    }, {
                      label: 'Interests',
                      // value: matchDetails?.results?.user_interests?.selected_interests?.length > 0 ? this._getInterests(matchDetails?.results?.user_interests?.selected_interests) : []
                      value: ((_dataRecord27 = dataRecord) === null || _dataRecord27 === void 0 ? void 0 : _dataRecord27.usedDataFields[(_dataRecord28 = dataRecord) === null || _dataRecord28 === void 0 ? void 0 : _dataRecord28.getIndexOfDataFieldByTitle('Interests')].getValue()) ? (_dataRecord29 = dataRecord) === null || _dataRecord29 === void 0 ? void 0 : _dataRecord29.usedDataFields[(_dataRecord30 = dataRecord) === null || _dataRecord30 === void 0 ? void 0 : _dataRecord30.getIndexOfDataFieldByTitle('Interests')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results17 = matchDetails.results) === null || _matchDetails$results17 === void 0 ? void 0 : (_matchDetails$results18 = _matchDetails$results17.user_interests) === null || _matchDetails$results18 === void 0 ? void 0 : (_matchDetails$results19 = _matchDetails$results18.selected_interests) === null || _matchDetails$results19 === void 0 ? void 0 : _matchDetails$results19.length) > 0 ? _this8._getInterests(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results20 = matchDetails.results) === null || _matchDetails$results20 === void 0 ? void 0 : (_matchDetails$results21 = _matchDetails$results20.user_interests) === null || _matchDetails$results21 === void 0 ? void 0 : _matchDetails$results21.selected_interests) : []
                    }, {
                      label: 'Has-profiletext',
                      // value: matchDetails?.results?.bio.length > 0 ? true : false
                      value: ((_dataRecord31 = dataRecord) === null || _dataRecord31 === void 0 ? void 0 : _dataRecord31.usedDataFields[(_dataRecord32 = dataRecord) === null || _dataRecord32 === void 0 ? void 0 : _dataRecord32.getIndexOfDataFieldByTitle('Has-profiletext')].getValue()) ? (_dataRecord33 = dataRecord) === null || _dataRecord33 === void 0 ? void 0 : _dataRecord33.usedDataFields[(_dataRecord34 = dataRecord) === null || _dataRecord34 === void 0 ? void 0 : _dataRecord34.getIndexOfDataFieldByTitle('Has-profiletext')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results22 = matchDetails.results) === null || _matchDetails$results22 === void 0 ? void 0 : _matchDetails$results22.bio.length) > 0 ? true : false
                    }, {
                      label: 'Is-verified',
                      // value: matchDetails?.results?.badges.length > 0 ? this._isVerifiedMatch(matchDetails?.results?.badges) : false
                      value: ((_dataRecord35 = dataRecord) === null || _dataRecord35 === void 0 ? void 0 : _dataRecord35.usedDataFields[(_dataRecord36 = dataRecord) === null || _dataRecord36 === void 0 ? void 0 : _dataRecord36.getIndexOfDataFieldByTitle('Is-verified')].getValue()) ? (_dataRecord37 = dataRecord) === null || _dataRecord37 === void 0 ? void 0 : _dataRecord37.usedDataFields[(_dataRecord38 = dataRecord) === null || _dataRecord38 === void 0 ? void 0 : _dataRecord38.getIndexOfDataFieldByTitle('Is-verified')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results23 = matchDetails.results) === null || _matchDetails$results23 === void 0 ? void 0 : _matchDetails$results23.badges.length) > 0 ? _this8._isVerifiedMatch(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results24 = matchDetails.results) === null || _matchDetails$results24 === void 0 ? void 0 : _matchDetails$results24.badges) : false
                    }, {
                      label: 'Distance-in-km',
                      value: [{
                        dateTime: new Date().toISOString(),
                        distanceInKM: _this8._convertDistanceMilesToKM(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results25 = matchDetails.results) === null || _matchDetails$results25 === void 0 ? void 0 : _matchDetails$results25.distance_mi)
                      }]
                    }, {
                      label: 'Amount-of-pictures',
                      value: ((_dataRecord39 = dataRecord) === null || _dataRecord39 === void 0 ? void 0 : _dataRecord39.usedDataFields[(_dataRecord40 = dataRecord) === null || _dataRecord40 === void 0 ? void 0 : _dataRecord40.getIndexOfDataFieldByTitle('Amount-of-pictures')].getValue()) ? (_dataRecord41 = dataRecord) === null || _dataRecord41 === void 0 ? void 0 : _dataRecord41.usedDataFields[(_dataRecord42 = dataRecord) === null || _dataRecord42 === void 0 ? void 0 : _dataRecord42.getIndexOfDataFieldByTitle('Amount-of-pictures')].getValue() : _this8.getAmountOfPictures(matchDetails.results)
                    }];
                    (_dataRecord43 = dataRecord) === null || _dataRecord43 === void 0 ? void 0 : _dataRecord43.addDataToDataFields(dataForDataFields);
                  });
                }
              }
            }
          } else {
            //todo: needs inplementation on what to do if recordid is not found? This should not happen tho.. wait.. yes it should! What if i get a new match after i imported everything and started chatting with match!?
            console.error('Current match id not found'); // 2.a if chat new person (recognize chat new person or not) (and record does not exist yet); add new record?
            //todo: nice-to-have; prompt user to add this unknown person or not?
            // dataRecord = new DataRecord();
            // dataRecord.addDataToDataFields([{ label: "System-no", value: currentMatchid}]);
            //todo: gather person data by ui (but this time; via chat interface!) OR; get data by api?
          }
        } else {
          console.error('Invalid matchId.');
        }
      }

      if (screenController.isSwipeScreen()) {
        if (forceRefresh) {
          this.uiRenderer.removeAllUIHelpers();
        }

        var newDataRecord = dataRecordToBeUsedForSwipe;
        this.uiRenderer.renderFieldsContainerForScreen(screenController, function () {
          if (_this8.screenList.isCurrentScreenNeedsUIAdjustments()) {
            var swipeContainerDOM = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector('.recsCardboard__cards');

            var swipeContainerDOMProfile = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector('.profileCard__card');

            if (swipeContainerDOM !== null) {
              $(swipeContainerDOM).css('position', 'absolute');
              $(swipeContainerDOM).css('left', '-200px');
            } else if (swipeContainerDOMProfile !== null) {// nothing to adjust here
            } else {
              console.error("Cannot find swipe container DOM element. Please update the selectors.");
              return;
            }
          }
        }, function () {
          var dataRecordValuesFromCollectedData = [];

          _this8.screenList.getCurrentScreen().getScreenElements().forEach(function (screenElement) {
            var hasCollectedData = screenElement.collectData();

            switch (screenElement.getName()) {
              case "Name":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: screenElement.getValueAsString()
                  });
                  break;
                }

              case "Age":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: screenElement.getValueAsNumber()
                  });
                  break;
                }

              case "Job":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : ""
                  });
                  break;
                }

              case "School":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : ""
                  });
                  break;
                }

              case "City":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : ""
                  });
                  break;
                }

              case "Has-profiletext":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : false
                  });
                  break;
                }

              case "Is-verified":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsBoolean() : false
                  });
                  break;
                }

              case "Amount-of-pictures":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : null
                  });
                  break;
                }

              case "Distance-in-km":
                {
                  hasCollectedData ? dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: [{
                      dateTime: new Date().toISOString(),
                      distanceInKM: screenElement.getValueAsNumber()
                    }]
                  }) : null;
                  break;
                }

              default:
                _ConsoleColorLog.ConsoleColorLog.singleLog("Screen element with name: ".concat(screenElement.getName(), " is not collected for adding to the dataRecord. Please check if this is correct."), screenElement.getValueAsString(), _LogColors.LogColors.YELLOW);

            }
          });

          _this8.screenList.getCurrentScreen().clearValuesScreenElements();

          _ConsoleColorLog.ConsoleColorLog.multiLog("Here is the collected data from DOM: ", dataRecordValuesFromCollectedData, _LogColors.LogColors.GREEN, true);

          newDataRecord.addDataToDataFields(dataRecordValuesFromCollectedData);

          _this8.uiRenderer.updateDataFieldValues();
        });

        var _uiRequiredDataFields = newDataRecord.getDataFields(false, true, _dataField.UIRequired.SELECT_ONLY);

        newDataRecord.addDataToDataFields([// set initial value to later be adjusted by ui control
        {
          label: 'Has-usefull-profiletext',
          value: false
        }, {
          label: 'Attractiveness-score',
          value: 6
        }, {
          label: 'Seems-fake',
          value: false
        }, {
          label: 'Seems-empty',
          value: false
        }, {
          label: 'Seems-obese',
          value: false
        }, {
          label: 'Seems-toppick',
          value: false
        }, {
          label: 'Last-updated',
          value: new Date().toISOString()
        }, {
          label: 'Is-match',
          value: false
        }, {
          label: 'Date-liked-or-passed',
          value: new Date().toISOString()
        }]); // todo: WHY NOT DIRECTLY GET/USE DATA FIELDS? WHY GET DATAFIELDTYPES AT ALL? cuz i might also need required property in the future, i need a default value (which i'm going to set on data field), i DO need a already set property for use when chatting etc..

        var timeoutSubmit = null;
        this.uiRenderer.renderFieldsFromDataFields(_uiRequiredDataFields, function (value) {
          console.log("Added value to new data record; label: ".concat(value.label, ", value: ").concat(value.value));
          newDataRecord.addDataToDataFields([value]);
          console.log("Updated dataRecord: ");
          console.dir(newDataRecord);
        }, function (submitType) {
          console.log('Callback received a (pre-)submit type! But it will only be used if no response from background can be retrieved');

          _this8._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_START);
        }, function (submitType) {
          console.log('Callback received a submit type! But it will only be used if no response from background can be retrieved');

          _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', true);

          console.log(submitType);

          _this8._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_PROCESS);

          console.log(_this8.dataStorage);
          console.assert(_this8.dataStorage.popLastActionFromDataStore() === undefined); //todo: refactor all code below to use a promise, in which a set interval checks every 100ms orso if a dataStorage item is available then executes code as normal to a max of 60 sec
          // OR even better; once submittype has been pressed, do nothing here, copy the code below to the backgroundscriptlistener? (let THAT code check if we are on swiping page, what is filled into the datafields etc.)
          // OR EVEN BETTER YET; this code (except for when the timeout begins should always run first, sooner than my backgroundscript can receive a response..), so; create a new promise, add it to the dataStore, let the eventlistener from backgroundscript trigger the resolve, if no response comes make my script below (with timeout) trigger the reject after 1 min orso
          // get (request) personid from backgroundscript (get response), after 1 sec

          var ms = 2000;

          if (timeoutSubmit !== null) {
            return;
          }

          timeoutSubmit = setTimeout(function () {
            console.log('this is what is found in dataStore after 2 sec: ');
            console.log(_this8.dataStorage);

            var submitAction = _this8.dataStorage.popLastActionFromDataStore();

            console.log(submitAction);
            var typeOfLikeOrPass = '';

            if (submitAction !== undefined) {
              var personActionStatus = undefined;

              if (submitAction.submitType === _personAction.PersonAction.LIKED_PERSON) {
                personActionStatus = true;
                typeOfLikeOrPass = 'like';
              }

              if (submitAction.submitType === _personAction.PersonAction.SUPER_LIKED_PERSON) {
                personActionStatus = true;
                typeOfLikeOrPass = 'superlike';
              }

              if (submitAction.submitType === _personAction.PersonAction.PASSED_PERSON) {
                personActionStatus = false;
                typeOfLikeOrPass = 'pass';
              }

              if (personActionStatus === undefined) {
                return;
              }

              var dataForDataFields = [{
                label: 'System-no',
                value: {
                  appType: 'tinder',
                  tempId: submitAction.personId
                }
              }, {
                label: 'Did-i-like',
                value: personActionStatus
              }, {
                label: 'Type-of-match-or-like',
                value: [typeOfLikeOrPass]
              }];
              newDataRecord.addDataToDataFields(dataForDataFields);

              _this8.requestHandler.getProfileDetailsStart(submitAction.personId).then(function (matchDetails) {
                var _matchDetails$results26, _matchDetails$results27, _matchDetails$results28, _matchDetails$results29, _matchDetails$results30, _matchDetails$results31, _matchDetails$results32, _matchDetails$results33, _matchDetails$results34, _matchDetails$results35, _matchDetails$results36, _matchDetails$results37, _matchDetails$results38, _matchDetails$results39, _matchDetails$results40, _matchDetails$results41, _matchDetails$results42, _matchDetails$results43, _matchDetails$results44, _matchDetails$results45, _matchDetails$results46, _matchDetails$results47, _matchDetails$results48, _matchDetails$results49;

                //todo: Build in; valid from guard. I must check a box in order to proceed to 'like' or 'pass' a person to prevent accidental skipping a field
                var dataForDataFields = [{
                  label: 'Name',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results26 = matchDetails.results) === null || _matchDetails$results26 === void 0 ? void 0 : _matchDetails$results26.name) ? matchDetails.results.name : 'Unknown name'
                }, {
                  label: 'Age',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results27 = matchDetails.results) === null || _matchDetails$results27 === void 0 ? void 0 : _matchDetails$results27.birth_date) ? _dateHelper.DateHelper.getAgeFromBirthDate(matchDetails.results.birth_date) : NaN
                }, {
                  label: 'City',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results28 = matchDetails.results) === null || _matchDetails$results28 === void 0 ? void 0 : (_matchDetails$results29 = _matchDetails$results28.city) === null || _matchDetails$results29 === void 0 ? void 0 : _matchDetails$results29.name.length) > 0 ? matchDetails.results.city.name : ''
                }, {
                  label: 'Job',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results30 = matchDetails.results) === null || _matchDetails$results30 === void 0 ? void 0 : (_matchDetails$results31 = _matchDetails$results30.jobs) === null || _matchDetails$results31 === void 0 ? void 0 : (_matchDetails$results32 = _matchDetails$results31.at(0)) === null || _matchDetails$results32 === void 0 ? void 0 : (_matchDetails$results33 = _matchDetails$results32.title) === null || _matchDetails$results33 === void 0 ? void 0 : _matchDetails$results33.name) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results34 = matchDetails.results.jobs.at(0)) === null || _matchDetails$results34 === void 0 ? void 0 : _matchDetails$results34.title.name : ''
                }, {
                  label: 'School',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results35 = matchDetails.results) === null || _matchDetails$results35 === void 0 ? void 0 : (_matchDetails$results36 = _matchDetails$results35.schools) === null || _matchDetails$results36 === void 0 ? void 0 : (_matchDetails$results37 = _matchDetails$results36.at(0)) === null || _matchDetails$results37 === void 0 ? void 0 : _matchDetails$results37.name) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results38 = matchDetails.results.schools.at(0)) === null || _matchDetails$results38 === void 0 ? void 0 : _matchDetails$results38.name : ''
                }, {
                  label: 'Gender',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results39 = matchDetails.results) === null || _matchDetails$results39 === void 0 ? void 0 : _matchDetails$results39.gender) ? _this8._getGender(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results40 = matchDetails.results) === null || _matchDetails$results40 === void 0 ? void 0 : _matchDetails$results40.gender) : ''
                }, {
                  label: 'Interests',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results41 = matchDetails.results) === null || _matchDetails$results41 === void 0 ? void 0 : (_matchDetails$results42 = _matchDetails$results41.user_interests) === null || _matchDetails$results42 === void 0 ? void 0 : (_matchDetails$results43 = _matchDetails$results42.selected_interests) === null || _matchDetails$results43 === void 0 ? void 0 : _matchDetails$results43.length) > 0 ? _this8._getInterests(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results44 = matchDetails.results) === null || _matchDetails$results44 === void 0 ? void 0 : (_matchDetails$results45 = _matchDetails$results44.user_interests) === null || _matchDetails$results45 === void 0 ? void 0 : _matchDetails$results45.selected_interests) : []
                }, {
                  label: 'Has-profiletext',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results46 = matchDetails.results) === null || _matchDetails$results46 === void 0 ? void 0 : _matchDetails$results46.bio.length) > 0 ? true : false
                }, {
                  label: 'Is-verified',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results47 = matchDetails.results) === null || _matchDetails$results47 === void 0 ? void 0 : _matchDetails$results47.badges.length) > 0 ? _this8._isVerifiedMatch(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results48 = matchDetails.results) === null || _matchDetails$results48 === void 0 ? void 0 : _matchDetails$results48.badges) : false
                }];

                if (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results49 = matchDetails.results) === null || _matchDetails$results49 === void 0 ? void 0 : _matchDetails$results49.distance_mi) {
                  var _matchDetails$results50;

                  dataForDataFields.push({
                    label: 'Distance-in-km',
                    value: [{
                      dateTime: new Date().toISOString(),
                      distanceInKM: _this8._convertDistanceMilesToKM(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$results50 = matchDetails.results) === null || _matchDetails$results50 === void 0 ? void 0 : _matchDetails$results50.distance_mi)
                    }]
                  });
                }

                newDataRecord.addDataToDataFields(dataForDataFields);
              }).catch(function () {
                console.error("Swiped person received tempId, but could not get details of swiped person! Saving inserted info of record regardless");
              }).finally(function () {
                _this8.dataTable.addNewDataRecord(newDataRecord, _this8.nameController);

                if (_this8.screenList.isCurrentScreenMultiSwipe()) {
                  console.log("CURRENT SCREEN IS SWIPE OR SWIPEEXPLORE, thus re-adding UI HELPERS NOW");
                  _this8.currentDataRecordSwipe = new _dataRecord44.DataRecord();

                  _this8.addUIHelpers(_this8.screenList, _this8.currentDataRecordSwipe, true);
                } else {
                  console.log("CURRENT SCREEN IS ".concat(_this8.screenList.getCurrentScreen(), ", THUS REMOVING ALL UI HELPERS NOW"));

                  _this8.uiRenderer.removeAllUIHelpers();
                }

                _this8._logLatestDataRecord(newDataRecord);

                _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', false);
              });
            } else {
              newDataRecord.addDataToDataFields([// set initial value to later be adjusted by ui control
              {
                label: 'System-no',
                value: {
                  // appType: 'tinder',
                  appType: _this8.nameController.toString(),
                  tempId: "idNotRetrievedPleaseCheckBackgroundRequestsBackupsInLocalStorage-".concat(new Date().toISOString())
                }
              }, {
                label: 'Did-i-like',
                value: submitType === 'liked' ? true : false
              }, {
                label: 'Type-of-match-or-like',
                value: [submitType]
              }]);

              _this8.dataTable.addNewDataRecord(newDataRecord, _this8.nameController);

              if (_this8.screenList.isCurrentScreenMultiSwipe()) {
                console.log("CURRENT SCREEN IS SWIPE OR SWIPEEXPLORE, thus re-adding UI HELPERS NOW");
                _this8.currentDataRecordSwipe = new _dataRecord44.DataRecord();

                _this8.addUIHelpers(_this8.screenList, _this8.currentDataRecordSwipe, true);
              } else {
                console.log("CURRENT SCREEN IS ".concat(_this8.screenList.getCurrentScreen(), ", THUS REMOVING ALL UI HELPERS NOW"));

                _this8.uiRenderer.removeAllUIHelpers();
              }

              _this8._logLatestDataRecord(newDataRecord);

              _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', false); // eslint-disable-next-line no-debugger


              debugger;
              console.error("Swiped person received no tempId! Saving inserted info of record regardless.. Don't forget to check background local storage requests backup to get the corresponding personid and to overwrite the tempId later!");
              alert("Swiped person received no tempId! Saving inserted info of record regardless.. Don't forget to check background local storage requests backup to get the corresponding personid and to overwrite the tempId later!"); //todo: Should REALLY throw a important alert to notify myself what I need to pay extra attention!
            }

            _this8._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_END);

            timeoutSubmit = null;
          }, ms);
        });
      } //todo: create view to show gathered info for all dataFields (thus also showing current value of; name, age, hasProfiletext etc.)
      //todo: create 're-try retrieve' button; for when the tinder UI finishes loading too late and my app already attempted to gather data
      //todo: figure out a solution to auto get 'hasProfileText' for when a profile DOES HAVE profileText but isnt show in the initial view because there is too much other info (location, age, distance, job etc.).. maybe do inplement a previous screen?
      //todo: create ability to while swipe/chat see all the values being stored for this record/person
      //todo: create checker method which checks if above DOM element ref exists, otherwise throw error
      //todo: FUTURE; create checker method which checks if all required DOM elements used here still exist (auto loop through application?)
      //todo: add other state (if,.. or seperate method) for adding chat ui helper VS swipe ui helper. Currently working on swipe ui helper
      //todo: seperate out logic for everything UI related; create a seperate class which recognizes app state (which screen we are on), removes existing helprs when on switch etc.

    }
  }, {
    key: "_logLatestDataRecord",
    value: function _logLatestDataRecord(newDataRecord) {
      var _newDataRecord$getDat, _newDataRecord$getDat2;

      var name = (_newDataRecord$getDat = newDataRecord.getDataFields().find(function (dataField) {
        return dataField.title === "Name";
      })) === null || _newDataRecord$getDat === void 0 ? void 0 : _newDataRecord$getDat.getValue();
      var notes = (_newDataRecord$getDat2 = newDataRecord.getDataFields().find(function (dataField) {
        return dataField.title === "Notes";
      })) === null || _newDataRecord$getDat2 === void 0 ? void 0 : _newDataRecord$getDat2.getValue();
      console.log("%c I just added the new dataRecord to dataTable: ".concat(newDataRecord), "color: DarkOliveGreen");
      console.log("%c New dataRecord name: ".concat(name, ", && Notes: ").concat(notes), "color: DarkOliveGreen");
    }
  }, {
    key: "_getTypeOfMatchAndLike",
    value: function _getTypeOfMatchAndLike(matchDetailsResults) {
      var matchOrLikeStringsList = [];

      if (matchDetailsResults.is_boost_match) {
        matchOrLikeStringsList.push('boost_match');
      }

      if (matchDetailsResults.is_experiences_match) {
        matchOrLikeStringsList.push('experiences_match');
      }

      if (matchDetailsResults.is_fast_match) {
        matchOrLikeStringsList.push('fast_match');
      }

      if (matchDetailsResults.is_super_boost_match) {
        matchOrLikeStringsList.push('super_boost_match');
      }

      if (matchDetailsResults.is_super_like) {
        matchOrLikeStringsList.push('super_like_match');
      }

      if (matchDetailsResults.super_liker && typeof matchDetailsResults.super_liker === 'string') {
        if (matchDetailsResults.super_liker === matchDetailsResults.person._id) {
          matchOrLikeStringsList.push('match_sent_me_superlike');
        } else {
          matchOrLikeStringsList.push('i_sent_match_superlike');
        }
      }

      return matchOrLikeStringsList;
    }
  }, {
    key: "_getInterests",
    value: function _getInterests(selectedInterests) {
      var hasRecognizedStructure = selectedInterests.every(function (selectedInterest) {
        return Object.prototype.hasOwnProperty.call(selectedInterest, "name") && selectedInterest['name'].length > 0 ? true : false;
      });

      if (hasRecognizedStructure) {
        return selectedInterests.map(function (selectedinterest) {
          return selectedinterest['name'];
        });
      }

      console.warn("Could not get interests as the received interests array does not match the recognized structure required. Check the interests received.");
      return [];
    }
  }, {
    key: "_getGender",
    value: function _getGender(genderCode) {
      switch (genderCode) {
        // update: despite this was shown in the unofficial online documentation (https://gist.github.com/rtt/10403467); 0 = male, 1 = female
        // it does turn out when i get match details at least that -1 = female, 1 is male?
        // it also turns out when i retrieve results from getMatches that 1 = female!? so.. -1 is male? or is both -1 and 1 female and 0 is male????
        // todo: double check this for both gender, for every api where i get person object. 
        case 1:
          return 'Female';

        case -1:
          return 'Female';

        case 0:
          console.warn("This profile will be assigned gender = 0, is male right?");
          return 'Male';

        default:
          console.warn("Tried to get gender by genderCode but genderCode was not recognized: ".concat(genderCode, ". Thus \"Other\" was inserted. Checking & updating genderCodes may be advised."));
          return 'Other';
      }
    }
  }, {
    key: "_convertDistanceMilesToKM",
    value: function _convertDistanceMilesToKM(distance_mi) {
      return distance_mi * 1.6;
    }
  }, {
    key: "getCurrentMatchIdFromChatScreen",
    value: function getCurrentMatchIdFromChatScreen() {
      var matchIdFromUrl = this.getCurrentMatchIdFromUrl();

      if (matchIdFromUrl) {
        return matchIdFromUrl;
      } else {
        console.error("Message List Item DOM Element not found. Please check & update the selector.");
      }

      return '';
    }
  }, {
    key: "getCurrentMatchIdFromUrl",
    value: function getCurrentMatchIdFromUrl() {
      var indexLastSlash = window.location.href.lastIndexOf('/');

      if (indexLastSlash >= 0) {
        return window.location.href.substring(indexLastSlash + 1);
      } else {
        console.error("Url does not seem to contain a slash?");
        return null;
      }
    }
  }, {
    key: "getMatchIdFromMessageHrefSDtring",
    value: function getMatchIdFromMessageHrefSDtring(href) {
      return href.substring(href.lastIndexOf('/') + 1);
    }
  }, {
    key: "getCurrentScreenByUrlAndDOM",
    value: function getCurrentScreenByUrlAndDOM() {
      var swipeIdentifier = '.recsToolbar';
      var chatIdentifier = '.chat';
      var detailIdentifier = '.profileCard__card';
      var currentPage;

      switch (true) {
        case $(swipeIdentifier).length > 0 && window.location.href.includes("/app/explore/") && $(detailIdentifier).length === 0:
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExplore;
          break;

        case $(swipeIdentifier).length > 0 && window.location.href.includes("/app/explore/") && $(detailIdentifier).length > 0:
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.SwipeExploreDetail;
          break;

        case $(swipeIdentifier).length > 0 && window.location.href.endsWith("app/likes-you"):
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.SwipeGold;
          break;

        case $(swipeIdentifier).length > 0 && window.location.href.includes("recs") && $(detailIdentifier).length === 0:
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.Swipe;
          break;

        case $(swipeIdentifier).length > 0 && window.location.href.includes("recs") && $(detailIdentifier).length > 0:
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.SwipeDetail;
          break;

        case $(chatIdentifier).length > 0 && window.location.href.includes('messages'):
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.Chat;
          break;

        default:
          currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen;
          break;
      }

      console.log("You are on page: ".concat(currentPage));
      return currentPage;
    }
  }, {
    key: "getMatchesAndMatchMessagesByAPI",
    value: function getMatchesAndMatchMessagesByAPI(requestHandler, useMock) {
      var _this9 = this;

      //todo: make seperate out logic in different methods because whilst 'getData' may be generic, getting it will differ for each supported app.
      return new Promise(function (resolve, reject) {
        if (useMock) {
          console.error("Mock unavailable, please set a (new) mock first");
          resolve([]); // const test: ParsedResultMatch[] = <ParsedResultMatch[]><unknown>matchMockTwo;
          // console.log(`Mock data (matches & messages):`);
          // console.log(matchMockTwo);
          // resolve(test);
        }

        if (requestHandler) {
          _this9.getMatches().then(function (matchList) {
            function getMessagesPerMatchesAsynchronously(_x) {
              return _getMessagesPerMatchesAsynchronously.apply(this, arguments);
            }

            function _getMessagesPerMatchesAsynchronously() {
              _getMessagesPerMatchesAsynchronously = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(matchesWithoutMessagesList) {
                var i;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        i = 0;

                      case 1:
                        if (!(i < matchesWithoutMessagesList.length)) {
                          _context.next = 10;
                          break;
                        }

                        console.log("GETTING MESSAGES now for: ".concat(i, " - ").concat(matchesWithoutMessagesList[i].match.id));
                        _context.next = 5;
                        return requestHandler.getMatchesMessagesStart(matchesWithoutMessagesList[i].match.id);

                      case 5:
                        matchesWithoutMessagesList[i].matchMessages = _context.sent;
                        return _context.abrupt("return", matchesWithoutMessagesList);

                      case 7:
                        i = i + 1;
                        _context.next = 1;
                        break;

                      case 10:
                        return _context.abrupt("return", matchesWithoutMessagesList);

                      case 11:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return _getMessagesPerMatchesAsynchronously.apply(this, arguments);
            }

            if (matchList === null) {
              reject(null);
            } else {
              resolve(getMessagesPerMatchesAsynchronously(matchList));
            }
          });
        } else {
          console.error("The requestHandler was not set");
          return null;
        }
      });
    }
  }, {
    key: "getMatches",
    value: function getMatches() {
      var _this10 = this;

      return new Promise(function (resolve, reject) {
        if (!_this10.requestHandler) {
          reject(null);
        }

        _this10.requestHandler.getMatchesStart().then(function (matches) {
          console.log("Matches:");
          console.dir(matches);

          if (matches && matches.length > 0) {
            resolve(matches);
          } else {
            reject(null);
          }
        });
      });
    }
  }, {
    key: "updateMessagesDataRecords",
    value: function updateMessagesDataRecords(requestHandler, dataRecords, matches) {
      var _this11 = this;

      // eslint-disable-next-line no-async-promise-executor
      return new Promise( /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(resolve, reject) {
          var i, systemIdMatch, personId, messages, messagesDataField;
          return _regenerator.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(dataRecords.length === 0)) {
                    _context2.next = 3;
                    break;
                  }

                  console.error("Data records amount cannot be 0");
                  return _context2.abrupt("return", reject(false));

                case 3:
                  i = 0;

                case 4:
                  if (!(i <= dataRecords.length - 1)) {
                    _context2.next = 21;
                    break;
                  }

                  console.log("GETTING MESSAGES now for: ".concat(i, " - ").concat(dataRecords[i].usedDataFields[5].getValue())); // const systemIdMatch = dataRecords[i].getRecordPersonSystemId('tinder');

                  systemIdMatch = dataRecords[i].getRecordPersonSystemId(_this11.nameController);

                  if (systemIdMatch) {
                    _context2.next = 11;
                    break;
                  }

                  console.warn("Could not get messages because systemidMatch was: ".concat(systemIdMatch));
                  _context2.next = 16;
                  break;

                case 11:
                  personId = _this11.getPersonIdFromMatch(systemIdMatch, matches);
                  _context2.next = 14;
                  return requestHandler.getMatchesMessagesStart(systemIdMatch);

                case 14:
                  messages = _context2.sent;

                  if (personId) {
                    messagesDataField = dataRecords[i].usedDataFields[2];
                    messagesDataField.updateMessagesList(_this11._convertTinderMessagesForDataRecord(messages.reverse(), personId), true);
                  } else {
                    console.warn("Messages could not be added to dataRecord because personId was not found in matches array. Please check the values provided.");
                  }

                case 16:
                  if (!(i === dataRecords.length - 1)) {
                    _context2.next = 18;
                    break;
                  }

                  return _context2.abrupt("return", resolve(true));

                case 18:
                  i = i + 1;
                  _context2.next = 4;
                  break;

                case 21:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "getPersonIdFromMatch",
    value: function getPersonIdFromMatch(systemIdMatch, matches) {
      if (!systemIdMatch || !matches || matches.length === 0) {
        console.error("Insufficient systemIdMatch or match array was provided. Please check the provided values.");
        return null;
      }

      var match = matches.find(function (match) {
        return match.match._id === systemIdMatch || match.match.person._id === systemIdMatch;
      });

      if (match) {
        return match.match.person._id;
      } else {
        console.error("No match found in match array with systemIdMatch: ".concat(systemIdMatch));
        return null;
      }
    }
  }, {
    key: "updateDataTable",
    value: function updateDataTable(matches) {
      var _this12 = this;

      matches === null || matches === void 0 ? void 0 : matches.forEach(function (match) {
        // Since Tinder sends the messages in the order from last to first, we must first reverse the messages to first to last
        // since the .reverse() is applied to the array 'in place' instead of 'on output' applying it once will produce the array in desired format anywhere
        match.matchMessages.reverse();

        var matchRecordIndex = _this12.getMatchRecordIndexBySystemIdOrPersonId(match.match, _this12.nameController);

        var tinderMatchDataRecordValues;
        var dataFields;

        if (matchRecordIndex === -1) {
          // if match doesnt exist, create new data record, fill new record with all data needed
          console.log("Going to CREATE new data record for: ".concat(match.match.person.name));
          var newDataRecord = new _dataRecord44.DataRecord();
          dataFields = newDataRecord.getDataFields();
          tinderMatchDataRecordValues = _this12.parseMatchDataToDataRecordValues(dataFields, match, match.match.id);
          var dataAddedSuccessfully = newDataRecord.addDataToDataFields(tinderMatchDataRecordValues);

          if (dataAddedSuccessfully) {
            _this12.dataTable.addNewDataRecord(newDataRecord, _this12.nameController);
          } else {
            console.error("Error adding data from retrieved match. Please check match retrieved and error log.");
          }
        } else {
          console.log("Going to UPDATE data record for: ".concat(match.match.person.name));
          dataFields = _this12.dataTable.getDataFieldsByRecordIndex(matchRecordIndex);
          tinderMatchDataRecordValues = _this12.parseMatchDataToDataRecordValues(dataFields, match, match.match.id);

          _this12.dataTable.updateDataRecordByIndex(matchRecordIndex, tinderMatchDataRecordValues);
        }
      });
    }
  }, {
    key: "getMatchRecordIndexBySystemIdOrPersonId",
    value: function getMatchRecordIndexBySystemIdOrPersonId(match, nameController) {
      var recordIndex = this.dataTable.getRecordIndexBySystemId(match.id, nameController);

      if (recordIndex === -1) {
        return this.dataTable.getRecordIndexBySystemId(match.person._id, nameController);
      }

      return recordIndex;
    }
  }, {
    key: "setUnupdatedMatchesToBlocked",
    value: function setUnupdatedMatchesToBlocked(matches, dataTable) {
      var _this13 = this;

      return new Promise(function (resolve) {
        var unupdatedMatchesList = dataTable.getAllDataRecords().filter(function (dataRecord) {
          var doesDataRecordNotHaveMatchListed = matches.findIndex(function (match) {
            // return match.match.id === dataRecord.getRecordPersonSystemId('tinder') || match.match.person._id === dataRecord.getRecordPersonSystemId('tinder');
            return match.match.id === dataRecord.getRecordPersonSystemId(_this13.nameController) || match.match.person._id === dataRecord.getRecordPersonSystemId(_this13.nameController);
          });
          return doesDataRecordNotHaveMatchListed === -1 ? true : false;
        });

        var _loop = function _loop(i) {
          var unupdatedMatch = unupdatedMatchesList[i];
          var presumedRequestsFired = 0;
          var actualRequestsFired = 0; // do not update if dataField 'Blocked' is already set to true

          var indexDataFieldBlocked = unupdatedMatch.getIndexOfDataFieldByTitle('Blocked-or-removed');
          var isDataFieldBlocked = false;

          if (unupdatedMatch.usedDataFields[indexDataFieldBlocked].getValue()) {
            isDataFieldBlocked = true;
          } // do not update if dataField 'isMatch' is still false, since this person can still become a match in the future


          var indexDataFieldIsMatch = unupdatedMatch.getIndexOfDataFieldByTitle('Is-match');
          var isDataFieldIsMatch = true;

          if (!unupdatedMatch.usedDataFields[indexDataFieldIsMatch].getValue()) {
            isDataFieldIsMatch = false;
          }

          var indexDataFieldSeeminglyDeletedProfile = unupdatedMatch.getIndexOfDataFieldByTitle('Seemingly-deleted-profile');
          var hasDataFieldSeeminglyDeletedProfile = true;

          if (!unupdatedMatch.usedDataFields[indexDataFieldSeeminglyDeletedProfile].getValue()) {
            hasDataFieldSeeminglyDeletedProfile = false;
          }

          if (isDataFieldBlocked || hasDataFieldSeeminglyDeletedProfile || !isDataFieldIsMatch) {
            if (i === unupdatedMatchesList.length - 1) {
              resolve();
            }

            return "continue";
          }

          presumedRequestsFired = presumedRequestsFired + 1; // const matchId = unupdatedMatch.getRecordPersonSystemId('tinder');

          var matchId = unupdatedMatch.getRecordPersonSystemId(_this13.nameController);
          var matchName = unupdatedMatch.usedDataFields[unupdatedMatch.getIndexOfDataFieldByTitle('Name')].getValue();

          if (!matchId) {
            console.warn("Could not get matchId from DataRecord, matcId result: ".concat(matchId, ", dataRecord: ").concat(unupdatedMatch));
            return "continue";
          }

          _this13.requestHandler.getMatchDetailsStart(matchId).then(function (matchDetails) {
            if (matchDetails === 404) {
              console.warn("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " gave a 404. Probably deleted profile?"));
              console.dir(unupdatedMatchesList[i]);
              unupdatedMatch.addDataToDataFields([{
                label: 'Blocked-or-removed',
                value: false
              }, {
                label: 'Date-of-unmatch',
                value: new Date().toISOString()
              }, {
                label: 'Seemingly-deleted-profile',
                value: true
              }]);
              unupdatedMatch.setUpdateMessages(false);
            }

            if (matchDetails === 500) {
              console.error("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " request returned a 500. Probably only removed me as match?"));
            }

            if (typeof matchDetails !== 'number' && (matchDetails === null || matchDetails === void 0 ? void 0 : matchDetails.closed)) {
              var indexUnmatchDatafield = unupdatedMatch.getIndexOfDataFieldByTitle('Did-i-unmatch');

              if (unupdatedMatch.usedDataFields[indexUnmatchDatafield].getValue()) {
                console.warn("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " request returned a 200 while our match is gone. I (ME) deleted our match!"));
                console.warn(unupdatedMatchesList[i]);
              } else {
                console.warn("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " request returned a 200 while our match is gone. Match deleted our match!"));
                console.warn(unupdatedMatchesList[i]);
              }

              unupdatedMatch.addDataToDataFields([{
                label: 'Blocked-or-removed',
                value: true
              }, {
                label: 'Date-of-unmatch',
                value: unupdatedMatch.usedDataFields[unupdatedMatch.getIndexOfDataFieldByTitle('Date-of-unmatch')].getValue() ? unupdatedMatch.usedDataFields[unupdatedMatch.getIndexOfDataFieldByTitle('Date-of-unmatch')].getValue() : matchDetails.last_activity_date ? matchDetails.last_activity_date : new Date().toISOString()
              }, {
                label: 'Seemingly-deleted-profile',
                value: false
              }]);
              unupdatedMatch.setUpdateMessages(false);
            }

            actualRequestsFired = actualRequestsFired + 1;

            if (presumedRequestsFired === actualRequestsFired) {
              resolve();
            }
          }).catch(function () {
            var indexDataFieldName = unupdatedMatch.getIndexOfDataFieldByTitle('Name');
            console.log("Failed to get matchDetails for profile with name: ".concat(unupdatedMatch.usedDataFields[indexDataFieldName].getValue(), ". Please check if request adress is still correct."));
          });
        };

        for (var i = 0; i <= unupdatedMatchesList.length - 1; i = i + 1) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }
      });
    }
  }, {
    key: "getAmountOfPictures",
    value: function getAmountOfPictures(personDetails) {
      var amountOfPictures = null;

      try {
        amountOfPictures = personDetails.photos.length;
      } catch (err) {
        console.log("Attempted to get amount of pictures for profile: ".concat(personDetails.name, " with id: ").concat(personDetails._id, " but failed due to error: ").concat(err));
      }

      return amountOfPictures;
    }
  }, {
    key: "disconnectAllUIWatchers",
    value: function disconnectAllUIWatchers() {
      this.uiRenderer.removeAllUIHelpers();
      var disconnectedWatchersAmount = 0;
      this.watchersUIList.forEach(function (watcher) {
        watcher.disconnect();
        disconnectedWatchersAmount = disconnectedWatchersAmount + 1;
        console.log('UI Watcher disconnected');
      });

      if (this.watchersUIList.length === disconnectedWatchersAmount) {
        this.watchersUIList.length = 0;
      }

      return this.watchersUIList.length === 0 ? true : false;
    }
  }, {
    key: "getReminders",
    value: function getReminders(reminderHttpList) {
      //todo: show overlay
      _Overlay.Overlay.setLoadingOverlay('reminderOverlay', true);

      this.requestHandler.postReminderList(reminderHttpList, function (currentIndex, totalLength, statusText) {
        console.log("".concat(currentIndex, ", / ").concat(totalLength, " - ").concat(statusText));

        _Overlay.Overlay.setLoadingOverlayProgress('reminderOverlay', currentIndex, totalLength, statusText);
      }).then(function (reminderHttpList) {
        console.dir(reminderHttpList); // eslint-disable-next-line no-debugger
        // debugger;
        //todo: hide overlay

        _Overlay.Overlay.setLoadingOverlay('reminderOverlay', false);
      });
    }
  }, {
    key: "_postMessageBackgroundScript",
    value: function _postMessageBackgroundScript(actionName) {
      var _this$dataPort;

      var portMessage = {
        messageSender: 'CONTENT',
        action: actionName,
        payload: "",
        datingAppType: this.nameController
      };
      (_this$dataPort = this.dataPort) === null || _this$dataPort === void 0 ? void 0 : _this$dataPort.postMessage(portMessage);
    }
  }]);
  return TinderController;
}();

exports.TinderController = TinderController;
},{"@babel/runtime/helpers/asyncToGenerator":"Ittk","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/regenerator":"y2KZ","../data/dataRecord":"RbWp","../util/dateHelper":"EDRb","../data/dataItems/dataItemGhost":"XgYc","../util/Screen/screenStateComboTinder.enum":"mNpB","./UIFieldsRenderer":"SBm3","../http-requests/requestHandlerTinder":"wbUO","../data/dataField":"LTXP","../../../personAction.enum":"m5GD","../util/DOMHelper":"phX9","./../../../message.interface":"kRs2","../util/NeedsReminder":"wjdh","../serrvices/Overlay":"Vug9","../util/Screen/ScreenList":"lntC","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI","../tinder/config/Screens":"uFvV","../../../PortAction.enum":"HH1H","../../../datingAppType.enum":"LiO7"}],"zar6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataStorage = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataStorage = /*#__PURE__*/function () {
  function DataStorage() {
    (0, _classCallCheck2.default)(this, DataStorage);
    this.dataStore = [];
    var submitAction = {
      name: 'lastSubmitActions',
      data: []
    };
    this.dataStore.push(submitAction);
  }

  (0, _createClass2.default)(DataStorage, [{
    key: "addActionToDataStore",
    value: function addActionToDataStore(action) {
      var lastSubmitActionsIndex = this.dataStore.findIndex(function (dataItem) {
        return dataItem.name === 'lastSubmitActions';
      });

      if (lastSubmitActionsIndex !== -1) {
        var duplicateSubmitActionIndex = this.dataStore[lastSubmitActionsIndex].data.findIndex(function (submitAction) {
          return submitAction.submitType === action.submitType || submitAction.personId === action.personId;
        });

        if (duplicateSubmitActionIndex === -1) {
          this.dataStore[lastSubmitActionsIndex].data.push(action);
        }
      } else {
        console.error("Data item 'lastSubmitActions' does not exist in data store");
      }
    }
  }, {
    key: "popLastActionFromDataStore",
    value: function popLastActionFromDataStore() {
      var lastSubmitActionsIndex = this.dataStore.findIndex(function (dataItem) {
        return dataItem.name === 'lastSubmitActions';
      });

      if (lastSubmitActionsIndex === -1) {
        console.error("Data item 'lastSubmitActions' does not exist in data store");
      }

      return this.dataStore[lastSubmitActionsIndex].data.pop();
    }
  }]);
  return DataStorage;
}();

exports.DataStorage = DataStorage;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"vnj4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTable = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataTable = /*#__PURE__*/function () {
  function DataTable() {
    (0, _classCallCheck2.default)(this, DataTable);
    this.dataRecords = [];
    this.dataRecordAmount = 0;
  }

  (0, _createClass2.default)(DataTable, [{
    key: "getDataFieldsByRecordIndex",
    value: function getDataFieldsByRecordIndex(index) {
      // fixed 'bug' that some fields were not returned for updating a record, this was due to the fact i tried to inplement a sortoff
      // update or not allowed to update system. However the logic for this is a bit fuzzy and should be for a future date.
      //todo: determine if i want to update or not certain fields, and set logic for this CORRECTLY
      return this.dataRecords[index].getDataFields();
    } //todo: refactor to get record directly? 

  }, {
    key: "getRecordIndexBySystemId",
    value: function getRecordIndexBySystemId(systemId, appType) {
      return this.dataRecords.findIndex(function (dataRecord) {
        return dataRecord.getRecordPersonSystemId(appType) === systemId;
      });
    }
  }, {
    key: "getRecordIndexBySystemOrTempId",
    value: function getRecordIndexBySystemOrTempId(systemOrTempId, appType) {
      return this.dataRecords.findIndex(function (dataRecord) {
        return dataRecord.getRecordPersonSystemId(appType) === systemOrTempId || dataRecord.getRecordPersonSystemId(appType, true) === systemOrTempId;
      });
    }
  }, {
    key: "getRecordByRecordIndex",
    value: function getRecordByRecordIndex(index) {
      if (index >= 0 && index <= this.dataRecords.length) {
        return this.dataRecords[index];
      }

      console.error('Data record not found. Please use a different number');
      return null;
    }
  }, {
    key: "addNewDataRecord",
    value: function addNewDataRecord(dataRecord, appType) {
      var systemId = dataRecord.getRecordPersonSystemId(appType);

      if (!systemId) {
        console.warn("Could not get systemId from dataRecord. Result of systemid is: ".concat(systemId, ", dataRecord: ").concat(dataRecord));
        return false;
      } // Update dataTable doubles; 
      // if record already exists with the same personId/matchid; 
      // choose the one with newer lastUpdated date


      var indexExistingRecord = this.getRecordIndexBySystemId(systemId, appType);

      if (indexExistingRecord !== -1) {
        console.warn("A record with the same system person id already exists in the dataTable. Record systemid: ".concat(systemId.length > 0 ? systemId : 'EMPTY STRING', ", indexExistingRecord: ").concat(indexExistingRecord));
        var existingRecordLastUpdated = this.dataRecords[indexExistingRecord].getValueLastUpdated();
        var newRecordLastUpdated = dataRecord.getValueLastUpdated();

        if (new Date(newRecordLastUpdated).getTime() > new Date(existingRecordLastUpdated).getTime()) {
          // add the newer data record (simply continue with the existing process)
          // remove the old data record
          console.warn("Inserted the newly imported dataRecord into the dataTable and removed the old one.");
          this.dataRecords.splice(indexExistingRecord, 1);
        } else {
          console.warn("Did not add the newly imported dataRecord into the dataTable and kept the existing record.");
          return false;
        }
      } // if dataRecord has no number, assign a number by the current (incremented) count for this table & add record


      var currentRecordNo = dataRecord.getNoDataRecord();

      if (currentRecordNo === null || currentRecordNo !== this.dataRecordAmount + 1) {
        // if dataRecord has an invalid number, show warn
        if (currentRecordNo !== this.dataRecordAmount + 1) {
          console.info("Invalid data record number: ".concat(dataRecord.getNoDataRecord(), " for record: ").concat(dataRecord, ". Data record will be provided with a new number, incremented from the current data record amount: ").concat(this.dataRecordAmount));
        }

        dataRecord.setNoDataRecord(this.dataRecordAmount + 1);
        this.dataRecords.push(dataRecord);
        this.incrementRecordAmount();
        return true;
      } // if dataRecord has a number, number must be incrementable from start of app


      this.dataRecords.push(dataRecord);
      this.incrementRecordAmount();
      return true;
    }
  }, {
    key: "incrementRecordAmount",
    value: function incrementRecordAmount() {
      this.dataRecordAmount = this.dataRecordAmount + 1;
    }
  }, {
    key: "updateDataRecordByIndex",
    value: function updateDataRecordByIndex(index, dataRecord) {
      this.dataRecords[index].addDataToDataFields(dataRecord);
    }
  }, {
    key: "getAllDataRecords",
    value: function getAllDataRecords() {
      return this.dataRecords;
    }
  }, {
    key: "getAllDataRecordsWhereMessageNeedTobeUpdated",
    value: function getAllDataRecordsWhereMessageNeedTobeUpdated() {
      return this.dataRecords.filter(function (dataRecord) {
        if (dataRecord.isNeedFieldMessagesBeUpdated()) {
          return dataRecord;
        }
      });
    }
  }, {
    key: "getRecordValuesObject",
    value: function getRecordValuesObject(appType) {
      var valuesDataRecords = this.dataRecords.map(function (dataRecord) {
        return dataRecord.getRecordValueObject(appType);
      });
      return JSON.stringify(valuesDataRecords);
    }
  }, {
    key: "emptyDataTable",
    value: function emptyDataTable() {
      this.dataRecords.length = 0;
      this.dataRecordAmount = 0;
    }
  }]);
  return DataTable;
}();

exports.DataTable = DataTable;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"CMaH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReminderHttp = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReminderHttp = /*#__PURE__*/function () {
  function ReminderHttp(tempId, completeid, name, message) {
    (0, _classCallCheck2.default)(this, ReminderHttp);
    this.reminderSent = false;
    this.reminderSentError = "";

    if (!tempId || tempId.length <= 0) {
      console.error("Datarecord with id: ".concat(tempId, " does not appear to have a valid id"));
    }

    if (!message || message.length <= 0) {
      console.error("Message is invalid. Message: ".concat(message));
    }

    this.tempId = tempId;
    this.completeId = completeid;
    this.name = name;
    this.message = message;
  }

  (0, _createClass2.default)(ReminderHttp, [{
    key: "getTempId",
    value: function getTempId() {
      return this.tempId;
    }
  }, {
    key: "getCompleteId",
    value: function getCompleteId() {
      return this.completeId;
    }
  }, {
    key: "getMyId",
    value: function getMyId() {
      return this.completeId.replace(this.getTempId(), "");
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "getMessage",
    value: function getMessage() {
      return this.message;
    }
  }, {
    key: "setReminderSent",
    value: function setReminderSent() {
      this.reminderSent = true;
    }
  }, {
    key: "setReminderSentError",
    value: function setReminderSentError(errorMessage) {
      this.reminderSentError = errorMessage;
    }
  }]);
  return ReminderHttp;
}();

exports.ReminderHttp = ReminderHttp;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"aYcf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RandomNumber = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RandomNumber = /*#__PURE__*/function () {
  function RandomNumber() {
    (0, _classCallCheck2.default)(this, RandomNumber);
  }

  (0, _createClass2.default)(RandomNumber, null, [{
    key: "getRandomNumber",
    value: function getRandomNumber() {
      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      return this.generateRandomNumber(min, max + 1); //todo: BUG; will never return the max possible random value. E.g; (1,2) // this will never return a random number 2
      // when I insert (1,3) it will randomly return 1 or 2
      // hence why the (max+1)
    }
  }, {
    key: "getRandomBoolean",
    value: function getRandomBoolean() {
      return this.generateRandomNumber(1, 3) > 1 ? true : false;
    }
  }, {
    key: "generateRandomNumber",
    value: function generateRandomNumber() {
      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      // find diff
      var difference = max - min; // generate random number 

      var rand = Math.random(); // multiply with difference 

      rand = Math.floor(rand * difference); // add with min value 

      rand = rand + min;
      return rand;
    }
  }]);
  return RandomNumber;
}();

exports.RandomNumber = RandomNumber;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"cuEX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoReminderText = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _randomNumber = require("../util/randomNumber");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AutoReminderText = /*#__PURE__*/function () {
  function AutoReminderText(textMessage) {
    (0, _classCallCheck2.default)(this, AutoReminderText);
    this.textMessage = "";
    this.textMessage = textMessage;
  }

  (0, _createClass2.default)(AutoReminderText, [{
    key: "getTextMessage",
    value: function getTextMessage() {
      return this.addRandomCharacters(this.textMessage);
    }
  }, {
    key: "addRandomCharacters",
    value: function addRandomCharacters(textMessage) {
      var minAmountWhitespaces = 2; // capitalize a random letter once

      if (_randomNumber.RandomNumber.getRandomBoolean()) {
        var textMessageWordsList = textMessage.split(" ");

        var randomWordListNo = _randomNumber.RandomNumber.getRandomNumber(0, textMessageWordsList.length - 1);

        textMessageWordsList[randomWordListNo] = textMessageWordsList[randomWordListNo].replace(/\b\w/g, function (text) {
          return text.toUpperCase();
        });
        textMessage = textMessageWordsList.join(" ");
      } // few extra dots at the end is always appliable? ..


      if (_randomNumber.RandomNumber.getRandomBoolean()) {
        textMessage = textMessage + ".";

        if (_randomNumber.RandomNumber.getRandomBoolean()) {
          textMessage = textMessage + ".";
        }
      } // add some extra whitespace at the beginning and/or end? 


      if (_randomNumber.RandomNumber.getRandomBoolean()) {
        textMessage = " " + textMessage + " ";
      } // add (1-2) extra whitespace in between random words


      if (_randomNumber.RandomNumber.getRandomBoolean()) {
        var _textMessageWordsList = textMessage.split(" ");

        var randomNumberOne = _randomNumber.RandomNumber.getRandomNumber(0, _textMessageWordsList.length - 1);

        _textMessageWordsList[randomNumberOne] = _textMessageWordsList[randomNumberOne] + " ";

        if (_textMessageWordsList.length - 1 <= minAmountWhitespaces) {
          var randomNumberTwo = _randomNumber.RandomNumber.getRandomNumber(0, _textMessageWordsList.length - 1);

          _textMessageWordsList[randomNumberTwo] = _textMessageWordsList[randomNumberTwo] + " ";
        }

        textMessage = _textMessageWordsList.join(" ");
      } // remove a random whitespace somewhere?


      return textMessage;
    }
  }]);
  return AutoReminderText;
}();

exports.AutoReminderText = AutoReminderText;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/randomNumber":"aYcf"}],"mhAv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoReminder = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ReminderHttp = require("../data/ReminderHttp");

var _randomNumber = require("../util/randomNumber");

var _AutoReminderText = require("./AutoReminderText");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AutoReminder = /*#__PURE__*/function () {
  function AutoReminder() {
    (0, _classCallCheck2.default)(this, AutoReminder);
    this.reminderMessageTextListDutch = ["Hey ${name}, leef je nog?", "Nou ${name}, ben jij er nog?", "Ik snap wel dat jij overrompeld bent door mijn charmes en tijd nodig hebt om bij te komen ${name}. Geen probleem hoor, neem alle tijd die jij nodig hebt!", "${name}! Weet jij waar ik bang voor ben? Ghosts..", "Heb ik soms een Ouija bord nodig om jou weer op te roepen na deze ghost 👻 ${name}?", "${name}? 😲", "${name}? 🥺", "${name}! koffie zwart of liever een latte?", "Jij neemt The Sound of Silence wel heel letterlijk he ${name}? Het is maar een liedje!", "Ja ik vind chatten op tinder ook niks. Zullen wij dan maar eens wat gaan borrelen op in real life ${name}?"];
    this.reminderMessageTextListEnglish = ["Hey ${name}, are you still alive?", "Well ${name}, you still there?", "I get that my charmes are too much for you too handle and you need time to collect yourself in order to reply. Don't worry ${name}, take your time!", "${name}! Do you know what i'm afraid of? Ghosts..", "Do I need a Ouija board to summon you after this ghost 👻 ${name}?", "${name}? 😲", "${name}? 🥺", "${name}! coffee black or do you prefer a latte?", "You take The Sound of Silence very literally don't you ${name}? It's just a song!", "Yeah I don't like chatting on tinder either. How about we just go for a drink in real life ${name}?"];
  }

  (0, _createClass2.default)(AutoReminder, [{
    key: "getReminderHttpMap",
    value: function getReminderHttpMap(tempId, completeId, name, usedReminderTextMessageList, english) {
      var randomReminderMessage = this.getRandomReminderMessage(name, usedReminderTextMessageList, english);
      return new _ReminderHttp.ReminderHttp(tempId, completeId, name, randomReminderMessage);
    }
  }, {
    key: "getreminderMessageTextListDutch",
    value: function getreminderMessageTextListDutch() {
      return this.reminderMessageTextListDutch;
    }
  }, {
    key: "getreminderMessageTextListEnglish",
    value: function getreminderMessageTextListEnglish() {
      return this.reminderMessageTextListEnglish;
    }
  }, {
    key: "getRandomReminderMessage",
    value: function getRandomReminderMessage(name, usedReminderTextMessageList, english) {
      var namedReminderMessageTextList = this.getNamedReminderMessageTextList(name, english);
      var filteredReminderMessageTextList = this.getUnusedReminderTextMessageList(usedReminderTextMessageList, namedReminderMessageTextList);
      var filteredReminderMessageTextListLength = filteredReminderMessageTextList.length - 1;
      return new _AutoReminderText.AutoReminderText(filteredReminderMessageTextList[_randomNumber.RandomNumber.getRandomNumber(0, filteredReminderMessageTextListLength)]).getTextMessage();
    }
  }, {
    key: "getNamedReminderMessageTextList",
    value: function getNamedReminderMessageTextList(name, english) {
      if (english) {
        return this.reminderMessageTextListEnglish.map(function (reminderMessageText) {
          // return reminderMessageText.replaceAll("${name}", name);
          return reminderMessageText.replace(/\${name}/g, name);
        });
      }

      return this.reminderMessageTextListDutch.map(function (reminderMessageText) {
        // return reminderMessageText.replaceAll("${name}", name);
        return reminderMessageText.replace(/\${name}/, name);
      });
    }
  }, {
    key: "getUnusedReminderTextMessageList",
    value: function getUnusedReminderTextMessageList(usedReminderTextMessageList, namedReminderMessageTextList) {
      var _this = this;

      var availableReminderMessageTextList = namedReminderMessageTextList; // .map((usedReminderTextMessage)=>{
      //     return this.removeAvoidBotCharacters(usedReminderTextMessage);
      // });
      // const formattedNamedReminderMessageTextList = namedReminderMessageTextList.map((usedReminderTextMessage)=>{
      //     return this.removeAvoidBotCharacters(usedReminderTextMessage);
      // });
      //todo: potential problem; if name gets updated/replaced either by me or by match who updates profile.. the old reminder will NOT register as a 'used reminder' anymore
      // thus, I should refactor name string to array string in order to track name changes and filter out used names in reminders
      // for now.. I consider this too much of an edge case to be a problem (and using a reminder twice in such edge cases will not be THAT much of a problem)

      usedReminderTextMessageList.forEach(function (reminderTextMessage) {
        // find if reminderTextMessage is part of the namedReminder.. list
        var indexReminderTextMessage = availableReminderMessageTextList.findIndex(function (availableNamedReminderMessageText) {
          return _this.removeAvoidBotCharacters(availableNamedReminderMessageText) === _this.removeAvoidBotCharacters(reminderTextMessage);
        }); // if so, remove

        if (indexReminderTextMessage !== -1) {
          availableReminderMessageTextList.splice(indexReminderTextMessage, 1);
        } // console.log("does the foreach run before it is returned?");

      }); // console.log("or does it return before the foreach ran or finished running?");

      return availableReminderMessageTextList;
    }
  }, {
    key: "removeAvoidBotCharacters",
    value: function removeAvoidBotCharacters(reminderTextMessage) {
      // 3. remove all spaces & dots
      // 4. set all characters to lowercase
      // return reminderTextMessage.replaceAll(" ", "").replaceAll(".", "").toLocaleLowerCase();
      return reminderTextMessage.replace(/ /g, "").replace(/\./g, "").toLocaleLowerCase();
    }
  }]);
  return AutoReminder;
}();

exports.AutoReminder = AutoReminder;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../data/ReminderHttp":"CMaH","../util/randomNumber":"aYcf","./AutoReminderText":"cuEX"}],"CnMN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeOfChat = void 0;
var TypeOfChat;
exports.TypeOfChat = TypeOfChat;

(function (TypeOfChat) {
  TypeOfChat["MATCHANDCHAT"] = "ongoing";
  TypeOfChat["MATCH"] = "pending";
})(TypeOfChat || (exports.TypeOfChat = TypeOfChat = {}));
},{}],"gXwx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericPersonProperty = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GenericPersonProperty = /*#__PURE__*/function () {
  function GenericPersonProperty() {
    (0, _classCallCheck2.default)(this, GenericPersonProperty);
    this.key = null;
    this.value = null;
    this.valueAsString = '';
  }

  (0, _createClass2.default)(GenericPersonProperty, [{
    key: "addGenericPersonProperty",
    value: function addGenericPersonProperty(key, value, valueAsString) {
      if (value === null && valueAsString !== 'null') {
        console.info("Person property: ".concat(key, " has been added but value is: ").concat(value, ", whilst valueAsString is set as: ").concat(valueAsString));
      }

      this.key = key;
      this.value = value;
      this.valueAsString = valueAsString;
    }
  }, {
    key: "updateValue",
    value: function updateValue(value, valueAsString) {
      this.value = value;
      this.valueAsString = valueAsString ? valueAsString : '';
      return true;
    }
  }, {
    key: "getKey",
    value: function getKey() {
      return this.key ? this.key : '';
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.value;
    }
  }, {
    key: "getValueAsString",
    value: function getValueAsString() {
      return this.valueAsString;
    }
  }]);
  return GenericPersonProperty;
}();

exports.GenericPersonProperty = GenericPersonProperty;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"J2QU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericPersonPropertiesList = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _GenericPersonProperty = require("./GenericPersonProperty");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GenericPersonPropertiesList = /*#__PURE__*/function () {
  function GenericPersonPropertiesList() {
    (0, _classCallCheck2.default)(this, GenericPersonPropertiesList);
    this.personPropertiesList = [];
  }

  (0, _createClass2.default)(GenericPersonPropertiesList, [{
    key: "updatePersonProperty",
    value: function updatePersonProperty(key, value, valueAsString) {
      var personPropertyIndex = this.personPropertiesList.findIndex(function (personProperty) {
        return personProperty.getKey() === key;
      });

      if (personPropertyIndex !== -1) {
        this.personPropertiesList[personPropertyIndex].updateValue(value, valueAsString);
      } else {
        var genericPersonProperty = new _GenericPersonProperty.GenericPersonProperty();
        genericPersonProperty.addGenericPersonProperty(key, value, valueAsString ? valueAsString : '');
        this.personPropertiesList.push(genericPersonProperty);
      }
    }
  }, {
    key: "getPersonGenericPropertyByKey",
    value: function getPersonGenericPropertyByKey(key) {
      var indexPersonProperty = this.personPropertiesList.findIndex(function (personProperty) {
        return personProperty.getKey() === key;
      });
      return indexPersonProperty !== -1 ? {
        key: this.personPropertiesList[indexPersonProperty].getKey(),
        value: this.personPropertiesList[indexPersonProperty].getValue(),
        valueAsString: this.personPropertiesList[indexPersonProperty].getValueAsString()
      } : null;
    }
  }, {
    key: "deletePersonGenericPropertyByKey",
    value: function deletePersonGenericPropertyByKey(key) {
      var indexPersonProperty = this.personPropertiesList.findIndex(function (personProperty) {
        return personProperty.getKey() === key;
      });

      if (indexPersonProperty !== -1) {
        this.personPropertiesList.splice(indexPersonProperty, 1);
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "getAllEntries",
    value: function getAllEntries() {
      var entriesList = this.personPropertiesList;
      return entriesList;
    }
  }, {
    key: "getEntriesAmount",
    value: function getEntriesAmount() {
      return this.personPropertiesList.length;
    }
  }, {
    key: "clearAllEntries",
    value: function clearAllEntries() {
      this.personPropertiesList.length = 0;
    }
  }]);
  return GenericPersonPropertiesList;
}();

exports.GenericPersonPropertiesList = GenericPersonPropertiesList;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","./GenericPersonProperty":"gXwx"}],"ZKwC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestHandlerHappn = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeOfChat = require("../util/happn/typeOfChat");

var _GenericPersonPropertiesList = require("../util/GenericPersonProperties/GenericPersonPropertiesList");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RequestHandlerHappn = /*#__PURE__*/function () {
  function RequestHandlerHappn(happnAccessToken) {
    (0, _classCallCheck2.default)(this, RequestHandlerHappn);
    this.happnAccessToken = happnAccessToken;
  }

  (0, _createClass2.default)(RequestHandlerHappn, [{
    key: "_getRandomCoupleHunderdMS",
    value: function _getRandomCoupleHunderdMS() {
      // for some reason,.. private classes dont work?
      return Math.floor(Math.random() * 100) + 100;
    }
  }, {
    key: "getMatches",
    value: function () {
      var _getMatches = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(typeOfChats, firstScrollId) {
        var _this = this;

        var scrollIdFrom, hasScrollId, getMatches;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.happnAccessToken) {
                  console.error("Provided acess token invalid!");
                }

                scrollIdFrom = "&scroll_id_from=".concat(firstScrollId);
                hasScrollId = firstScrollId && firstScrollId.length > 0;
                getMatches = new Promise(function (resolve, reject) {
                  setTimeout(function () {
                    fetch("https://api.happn.fr/api/users/me/conversations?fields=id%2Ccreation_date%2Cmodification_date%2Cis_read%2Cis_disabled%2Clast_message.fields%28message%2Csender.fields%28id%2Cis_moderator%29%29%2Cparticipants.fields%28id%2Cstatus%2Clast_read_date_time%2Cuser.fields%28age%2Cgender%2Cmodification_date%2Cfirst_name%2Cpicture.mode%281%29.width%28160%29.height%28160%29%2Cis_moderator%29%29&view_id=".concat(typeOfChats, "&limit=20").concat(hasScrollId ? scrollIdFrom : ""), {
                      method: 'GET',
                      headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'OAuth="' + _this.happnAccessToken + '"'
                      }
                    }).then(function (result) {
                      return result.json();
                    }).catch(function (error) {
                      reject(error);
                    }).then(function (resultJSON) {
                      resolve(resultJSON);
                    });
                  }, _this._getRandomCoupleHunderdMS());
                });
                return _context.abrupt("return", getMatches);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getMatches(_x, _x2) {
        return _getMatches.apply(this, arguments);
      }

      return getMatches;
    }()
  }, {
    key: "getMatchesStart",
    value: function getMatchesStart() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var results = [];

        var attempt = function attempt(typeOfChat, firstScrollId) {
          firstScrollId = firstScrollId ? firstScrollId : '';

          _this2.getMatches(typeOfChat, firstScrollId).then(function (parsedResult) {
            var _parsedResult$paginat, _parsedResult$paginat2;

            // debugger;
            if (parsedResult === null || parsedResult === void 0 ? void 0 : parsedResult.data) {
              var _parsedResult$data;

              parsedResult === null || parsedResult === void 0 ? void 0 : (_parsedResult$data = parsedResult.data) === null || _parsedResult$data === void 0 ? void 0 : _parsedResult$data.forEach(function (match) {
                results.push({
                  match: match,
                  matchMessages: [],
                  addedProperties: new _GenericPersonPropertiesList.GenericPersonPropertiesList()
                });
              });
            } // debugger;


            if (!((_parsedResult$paginat = parsedResult.pagination) === null || _parsedResult$paginat === void 0 ? void 0 : _parsedResult$paginat.is_last_page) && ((_parsedResult$paginat2 = parsedResult.pagination) === null || _parsedResult$paginat2 === void 0 ? void 0 : _parsedResult$paginat2.last_scroll_id) && parsedResult.pagination.last_scroll_id) {
              attempt(typeOfChat, parsedResult.pagination.last_scroll_id);
            } else {
              if (typeOfChat === _typeOfChat.TypeOfChat.MATCH) {
                attempt(_typeOfChat.TypeOfChat.MATCHANDCHAT);
              } else {
                console.log("Finished getting results:");
                console.dir(results);
                results.forEach(function (match) {
                  console.log(match.match.participants[1].user.first_name);
                });
                resolve(results);
              }
            }
          }).catch(function (e) {
            console.log("Error retrieving matches:");
            console.dir(e);
            var error = e;
            reject(error);
          });
        };

        attempt(_typeOfChat.TypeOfChat.MATCH);
      });
    }
  }, {
    key: "getMatchProfileDetails",
    value: function getMatchProfileDetails(personProfileId) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          fetch("https://api.happn.fr/api/users/".concat(personProfileId, "?fields=id,audios,first_name,last_name,gender,gender_alias,age,about,job,workplace,school,modification_date,is_moderator,is_admin,type,status,last_position_update,register_date,sensitive_traits_preferences,mysterious_mode_preferences,profiles.mode(1).width(1400).height(1600).fields(id,is_default,url,width,height),traits,spotify_tracks,social_synchronization.fields(facebook,vk,apple_sign_in,instagram,google_sign_in),is_charmed,is_accepted,has_charmed_me,my_relations,last_meet_position,crossing_nb_times,verification.fields(status,reason)"), {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'OAuth="' + _this3.happnAccessToken + '"'
            }
          }).then(function (result) {
            return result.json();
          }).then(function (resultJSON) {
            resolve(resultJSON);
          }).catch(function (error) {
            reject("oops, something went wrong!");
          });
        }, _this3._getRandomCoupleHunderdMS());
      });
    }
  }, {
    key: "getMatchMessages",
    value: function getMatchMessages(matchId) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          fetch("https://api.happn.fr/graphql/v1", {
            method: 'POST',
            body: JSON.stringify({
              operationName: "GetConversationMessagesQuery",
              variables: {
                id: matchId,
                before: ""
              },
              query: "fragment MessageFields on Message {\n  id\n  body\n  sender {\n    id\n    firstName\n    gender\n    isModerator\n    isSponsor\n    pictures(format: CROP_80x80) {\n      id\n      url\n      __typename\n    }\n    __typename\n  }\n  creationDate\n  __typename\n}\n\nquery GetConversationMessagesQuery($id: ID!, $before: Cursor) {\n  conversation(id: $id) {\n    id\n    messages(last: 50, before: $before) {\n      edges {\n        node {\n          ...MessageFields\n          __typename\n        }\n        cursor\n        __typename\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        endCursor\n        startCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"
            }),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'OAuth="' + _this4.happnAccessToken + '"'
            }
          }).then(function (result) {
            return result.json();
          }).catch(function (error) {
            reject(error);
          }).then(function (resultJSON) {
            resolve(resultJSON);
          });
        }, _this4._getRandomCoupleHunderdMS());
      });
    }
  }, {
    key: "getMatchConversation",
    value: function getMatchConversation(matchId) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          fetch("https://api.happn.fr/graphql/v1", {
            method: 'POST',
            body: JSON.stringify({
              operationName: "GetConversationQuery",
              variables: {
                id: matchId
              },
              query: "fragment UserBaseFields on User {\n                                id\n                                gender\n                                firstName\n                                lastMeetPosition {\n                                  lat\n                                  lon\n                                  __typename\n                                }\n                                pictures(format: CROP_80x80) {\n                                  id\n                                  url\n                                  __typename\n                                }\n                                __typename\n                              }\n                              \n                              fragment ParticipantFields on Participant {\n                                reactions {\n                                  reaction {\n                                    id\n                                    message\n                                    __typename\n                                  }\n                                  container {\n                                    type\n                                    content {\n                                      id\n                                      url\n                                      __typename\n                                    }\n                                    __typename\n                                  }\n                                  sender {\n                                    ...UserBaseFields\n                                    __typename\n                                  }\n                                  receiver {\n                                    ...UserBaseFields\n                                    __typename\n                                  }\n                                  __typename\n                                }\n                                user {\n                                  isModerator\n                                  isSponsor\n                                  onlineStatus\n                                  lastActivityDate\n                                  ...UserBaseFields\n                                  __typename\n                                }\n                                __typename\n                              }\n                              \n                              query GetConversationQuery($id: ID!) {\n                                conversation(id: $id) {\n                                  id\n                                  isBlocked\n                                  creationDate\n                                  modificationDate\n                                  participants {\n                                    target {\n                                      ...ParticipantFields\n                                      __typename\n                                    }\n                                    current {\n                                      ...ParticipantFields\n                                      __typename\n                                    }\n                                    __typename\n                                  }\n                                  __typename\n                                }\n                              }\n                              "
            }),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'OAuth="' + _this5.happnAccessToken + '"'
            }
          }).then(function (result) {
            return result.json();
          }).catch(function (error) {
            reject(error);
          }).then(function (resultJSON) {
            resolve(resultJSON);
          });
        }, _this5._getRandomCoupleHunderdMS());
      });
    }
  }, {
    key: "postReminderList",
    value: function () {
      var _postReminderList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(reminderHttpList, progressCallBack) {
        var i, result, errorText;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < reminderHttpList.length)) {
                  _context2.next = 13;
                  break;
                }

                console.log("%cPOSTLIST - Now sending reminder to: ".concat(i, " - ").concat(reminderHttpList[i].getTempId()), "color: red");
                _context2.next = 5;
                return this.postMessage(reminderHttpList[i].getCompleteId(), reminderHttpList[i].getMessage());

              case 5:
                result = _context2.sent;

                if (!result) {
                  errorText = "";
                  reminderHttpList[i].setReminderSentError(errorText);
                }

                reminderHttpList[i].setReminderSent();

                if (progressCallBack) {
                  progressCallBack(i, reminderHttpList.length, "Sent reminder to ".concat(reminderHttpList[i].getName()));
                }

                console.log("%cPOSTLIST - Reminder has been sent, going to send a new one now!", "color: red");

              case 10:
                i++;
                _context2.next = 1;
                break;

              case 13:
                console.log("%cPOSTLIST - this probably returns earlier than the reminders are actually sent", "color: red; background: white");
                return _context2.abrupt("return", reminderHttpList);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function postReminderList(_x3, _x4) {
        return _postReminderList.apply(this, arguments);
      }

      return postReminderList;
    }()
  }, {
    key: "postMessage",
    value: function postMessage(matchId, message) {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          fetch("https://api.happn.fr/api/conversations/".concat(matchId, "/messages?fields=id,message,creation_date,sender.fields(id),previous_message_id&conversation_id=").concat(matchId), {
            method: 'POST',
            body: JSON.stringify({
              "message": message
            }),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'OAuth="' + _this6.happnAccessToken + '"'
            }
          }).then(function (result) {
            return result.json();
          }).catch(function (error) {
            reject(error);
          }).then(function (resultJSON) {
            resolve(resultJSON);
          });
        }, _this6._getRandomCoupleHunderdMS());
      });
    }
  }]);
  return RequestHandlerHappn;
}();

exports.RequestHandlerHappn = RequestHandlerHappn;
},{"@babel/runtime/helpers/asyncToGenerator":"Ittk","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/regenerator":"y2KZ","../util/happn/typeOfChat":"CnMN","../util/GenericPersonProperties/GenericPersonPropertiesList":"J2QU"}],"vjIz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchDataParser = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _dateHelper = require("../util/dateHelper");

var _message = require("../../../message.interface");

var _dataItemGhost = require("../data/dataItems/dataItemGhost");

var _NeedsReminder = require("../util/NeedsReminder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MatchDataParser = /*#__PURE__*/function () {
  function MatchDataParser() {
    (0, _classCallCheck2.default)(this, MatchDataParser);
  }

  (0, _createClass2.default)(MatchDataParser, null, [{
    key: "parseMatchDataToDataRecordValues",
    value: function parseMatchDataToDataRecordValues(nameController, dataFields, match, systemId) {
      var _dataFields$find,
          _dataFields$find2,
          _this = this;

      var dataRecordValuesList = [];
      var messagesDataField = dataFields[2];
      var happnMatch = match === null || match === void 0 ? void 0 : match.match;

      if (match && match.matchMessages.length > 0) {
        var retrievedMessagesFromMatch = match.matchMessages;
        messagesDataField.updateMessagesList(this.convertTinderMessagesForDataRecord(retrievedMessagesFromMatch, happnMatch.participants[1].user.id));
      }

      var dateAcquiredNumber = (_dataFields$find = dataFields.find(function (dataField) {
        return dataField.title === 'Date-of-acquired-number';
      })) === null || _dataFields$find === void 0 ? void 0 : _dataFields$find.getValue();
      var dateBlockedOrRemoved = (_dataFields$find2 = dataFields.find(function (dataField) {
        return dataField.title === 'Date-of-unmatch';
      })) === null || _dataFields$find2 === void 0 ? void 0 : _dataFields$find2.getValue();
      var reminder = new _NeedsReminder.Reminder(messagesDataField.getAllMessages(), dateAcquiredNumber, dateBlockedOrRemoved, new Date().getTime());
      dataFields.forEach(function (dataField, index, dataFields) {
        var _match$match;

        switch (dataField.title) {
          case 'System-no':
            {
              if (!match) {
                break;
              }

              dataRecordValuesList.push({
                'label': 'System-no',
                'value': {
                  'appType': nameController,
                  'id': match && happnMatch && happnMatch.id ? happnMatch.id : systemId,
                  'tempId': happnMatch.participants[1].user.id ? happnMatch.participants[1].user.id : ''
                }
              });
              break;
            }

          case 'No':
            dataRecordValuesList.push({
              'label': 'No',
              'value': dataField.getValue() ? dataField.getValue() : undefined
            });
            break;

          case 'Last-updated':
            dataRecordValuesList.push({
              'label': 'Last-updated',
              'value': new Date().toISOString()
            });
            break;

          case 'Date-liked-or-passed':
            dataRecordValuesList.push({
              'label': 'Date-liked-or-passed',
              'value': dataField.getValue() ? dataField.getValue() : null
            });
            break;

          case 'Name':
            dataRecordValuesList.push({
              'label': 'Name',
              'value': match ? happnMatch.participants[1].user.first_name : dataField.getValue()
            });
            break;

          case 'Age':
            dataRecordValuesList.push({
              'label': 'Age',
              'value': dataField.getValue() ? dataField.getValue() : _this._getHappnAge(happnMatch)
            });
            break;

          case 'City':
            dataRecordValuesList.push({
              'label': 'City',
              'value': dataField.getValue() ? dataField.getValue() : null
            });
            break;

          case 'Job':
            {
              var _match$addedPropertie, _match$addedPropertie2;

              var jobFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie = match.addedProperties.getPersonGenericPropertyByKey('Job')) === null || _match$addedPropertie === void 0 ? void 0 : _match$addedPropertie.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie2 = match.addedProperties.getPersonGenericPropertyByKey('Job')) === null || _match$addedPropertie2 === void 0 ? void 0 : _match$addedPropertie2.value : '';
              dataRecordValuesList.push({
                'label': 'Job',
                'value': dataField.getValue() ? dataField.getValue() : jobFromProfile
              });
              break;
            }

          case 'Seems-fake':
            dataRecordValuesList.push({
              'label': 'Seems-fake',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'Seems-empty':
            dataRecordValuesList.push({
              'label': 'Seems-empty',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'Has-profiletext':
            {
              var _match$addedPropertie3, _match$addedPropertie4;

              var profileTextFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie3 = match.addedProperties.getPersonGenericPropertyByKey('Bio')) === null || _match$addedPropertie3 === void 0 ? void 0 : _match$addedPropertie3.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie4 = match.addedProperties.getPersonGenericPropertyByKey('Bio')) === null || _match$addedPropertie4 === void 0 ? void 0 : _match$addedPropertie4.value : '';
              dataRecordValuesList.push({
                'label': 'Has-profiletext',
                'value': dataField.getValue() ? dataField.getValue() : profileTextFromProfile.length > 0 ? true : false
              });
              break;
            }

          case 'Has-usefull-profiletext':
            dataRecordValuesList.push({
              'label': 'Has-usefull-profiletext',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Gender':
            dataRecordValuesList.push({
              'label': 'Gender',
              'value': happnMatch.participants[1].user.gender ? _this.getGender(happnMatch.participants[1].user.gender) : dataField.getValue()
            });
            break;

          case 'Is-verified':
            {
              var _match$addedPropertie5, _match$addedPropertie6;

              var verificationFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie5 = match.addedProperties.getPersonGenericPropertyByKey('Verification')) === null || _match$addedPropertie5 === void 0 ? void 0 : _match$addedPropertie5.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie6 = match.addedProperties.getPersonGenericPropertyByKey('Verification')) === null || _match$addedPropertie6 === void 0 ? void 0 : _match$addedPropertie6.value : null;
              dataRecordValuesList.push({
                'label': 'Is-verified',
                'value': dataField.getValue() ? dataField.getValue() : verificationFromProfile
              });
              break;
            }

          case 'Type-of-match-or-like':
            {
              var _match$addedPropertie7, _match$addedPropertie8;

              var typeOfMatchFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie7 = match.addedProperties.getPersonGenericPropertyByKey('Type-of-match-or-like')) === null || _match$addedPropertie7 === void 0 ? void 0 : _match$addedPropertie7.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie8 = match.addedProperties.getPersonGenericPropertyByKey('Type-of-match-or-like')) === null || _match$addedPropertie8 === void 0 ? void 0 : _match$addedPropertie8.value : ''; //TODO TODO TODO: Figure out type of match, different types of matches (i.e. like with blocked match or removed profile match; show alert when a match is of a different type than a regular like)?
              // Alternatively; can also always register as normal like, and change it to 'superlike' manually in case of a superlike. But then i do need to display the field in chat!

              dataRecordValuesList.push({
                'label': 'Type-of-match-or-like',
                'value': dataField.getValue() ? dataField.getValue() : typeOfMatchFromProfile
              });
              break;
            }

          case 'Liked-me-first-is-instant-match':
            {
              dataRecordValuesList.push({
                'label': 'Liked-me-first-is-instant-match',
                'value': dataField.getValue() || dataField.getValue() === null ? dataField.getValue() : false
              });
              break;
            }

          case 'Is-gold-match':
            {
              dataRecordValuesList.push({
                'label': 'Is-gold-match',
                'value': dataField.getValue() || dataField.getValue() === null ? dataField.getValue() : false
              });
              break;
            }

          case 'Needs-profile-update':
            {
              var _match$addedPropertie9;

              var needsProfileUpdate = match === null || match === void 0 ? void 0 : (_match$addedPropertie9 = match.addedProperties.getPersonGenericPropertyByKey('needsProfileDetailsUpdate')) === null || _match$addedPropertie9 === void 0 ? void 0 : _match$addedPropertie9.value;
              dataRecordValuesList.push({
                'label': 'Needs-profile-update',
                // 'value': dataField.getValue() ? dataField.getValue() : false
                'value': needsProfileUpdate ? needsProfileUpdate : false
              });
              break;
            }

          case 'Needs-messages-update':
            {
              var _match$addedPropertie10;

              var needsMessagesUpdate = match === null || match === void 0 ? void 0 : (_match$addedPropertie10 = match.addedProperties.getPersonGenericPropertyByKey('needsMessagesUpdate')) === null || _match$addedPropertie10 === void 0 ? void 0 : _match$addedPropertie10.value;
              dataRecordValuesList.push({
                'label': 'Needs-messages-update',
                // 'value': dataField.getValue() ? dataField.getValue() : false
                'value': needsMessagesUpdate ? needsMessagesUpdate : false
              });
              break;
            }

          case 'Needs-reminder':
            {
              dataRecordValuesList.push({
                'label': 'Needs-reminder',
                'value': messagesDataField.hasMessages() ? reminder.getNeedsReminder(messagesDataField.getAllMessages()) : false
              });
              break;
            }

          case 'Amount-of-pictures':
            {
              var _match$addedPropertie11, _match$addedPropertie12;

              var picturesAmountFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie11 = match.addedProperties.getPersonGenericPropertyByKey('Amount-of-pictures')) === null || _match$addedPropertie11 === void 0 ? void 0 : _match$addedPropertie11.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie12 = match.addedProperties.getPersonGenericPropertyByKey('Amount-of-pictures')) === null || _match$addedPropertie12 === void 0 ? void 0 : _match$addedPropertie12.value : null;
              dataRecordValuesList.push({
                'label': 'Amount-of-pictures',
                'value': dataField.getValue() ? dataField.getValue() : picturesAmountFromProfile
              });
              break;
            }

          case 'Attractiveness-score':
            dataRecordValuesList.push({
              'label': 'Attractiveness-score',
              'value': dataField.getValue() || dataField.getValue() === 0 ? dataField.getValue() : null
            });
            break;

          case 'Details-tags':
            {
              var currentValue = dataField.getValue();
              dataRecordValuesList.push({
                'label': 'Details-tags',
                'value': currentValue && currentValue.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Vibe-tags':
            {
              var _currentValue = dataField.getValue();

              dataRecordValuesList.push({
                'label': 'Vibe-tags',
                'value': _currentValue && _currentValue.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Seems-to-be-active':
            {
              var hasMatchGivenResponse = _this._hasMatchGivenResponse(messagesDataField.getAllMessages());

              dataRecordValuesList.push({
                'label': 'Seems-to-be-active',
                'value': dataField.getValue() || hasMatchGivenResponse ? true : false
              });
              break;
            }
          //TODO TODO TODO; GET HEIGHT FROM PROFILE DETAILS, WRITE LOGIC TO CONVERT ACTUAL HEIGHT TO HEIGHT TAG & ADD IT HERE

          case 'Did-i-like':
            dataRecordValuesList.push({
              'label': 'Did-i-like',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Is-match':
            // if match.match.person is valid, then it is obviously a match, if not it's probably false thus use the value this field already has.
            dataRecordValuesList.push({
              'label': 'Is-match',
              'value': (match === null || match === void 0 ? void 0 : (_match$match = match.match) === null || _match$match === void 0 ? void 0 : _match$match.id) ? true : dataField.getValue()
            });
            break;

          case 'Date-match':
            dataRecordValuesList.push({
              'label': 'Date-match',
              'value': match ? happnMatch.creation_date : dataField.getValue()
            });
            break;

          case 'Match-sent-first-message':
            {
              dataRecordValuesList.push({
                'label': 'Match-sent-first-message',
                'value': messagesDataField.hasMessages() ? _this._hasMatchSentFirstMessage(messagesDataField.getAllMessages()) : null
              });
              break;
            }

          case 'Match-responded':
            dataRecordValuesList.push({
              'label': 'Match-responded',
              'value': messagesDataField.hasMessages() ? _this._hasMatchGivenResponse(messagesDataField.getAllMessages()) : null
            });
            break;

          case 'Conversation-exists':
            dataRecordValuesList.push({
              'label': 'Conversation-exists',
              'value': messagesDataField.hasMessages() ? _this._hasConversation(messagesDataField.getAllMessages()) : null
            });
            break;

          case 'Vibe-conversation':
            dataRecordValuesList.push({
              'label': 'Vibe-conversation',
              'value': dataField.getValue() || dataField.getValue() === 0 ? dataField.getValue() : null
            });
            break;

          case 'How-many-ghosts':
            {
              // const dateAcquiredNumber: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-acquired-number')?.getValue() as string | null;
              // const dateBlockedOrRemoved: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-unmatch')?.getValue() as string | null;
              dataRecordValuesList.push({
                'label': 'How-many-ghosts',
                'value': messagesDataField.hasMessages() ? _this._getNumberOfGhosting(messagesDataField.getAllMessages(), match && match.match ? match.match : undefined, dateAcquiredNumber, dateBlockedOrRemoved) : []
              });
              break;
            }

          case 'Acquired-number':
            dataRecordValuesList.push({
              'label': 'Acquired-number',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Response-speed':
            dataRecordValuesList.push({
              'label': 'Response-speed',
              'value': messagesDataField.hasMessages() ? _this._getResponseSpeedMoments(messagesDataField.getAllMessages()) : []
            });
            break;

          case 'Reminders-amount':
            {
              // const dateAcquiredNumber: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-acquired-number')?.getValue() as string | null;
              // const dateBlockedOrRemoved: string | null = dataFields.find((dataField: DataField) => dataField.title === 'Date-of-unmatch')?.getValue() as string | null;
              dataRecordValuesList.push({
                'label': 'Reminders-amount',
                // 'value': messagesDataField.hasMessages() ? this._getReminderAmount(messagesDataField.getAllMessages(), dateAcquiredNumber, dateBlockedOrRemoved) : []
                'value': messagesDataField.hasMessages() ? reminder.getReminderAmountItems() : []
              });
            }
            break;

          case 'Match-wants-no-contact':
            dataRecordValuesList.push({
              'label': 'Match-wants-no-contact',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Interested-in-sex':
            dataRecordValuesList.push({
              'label': 'Interested-in-sex',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Potential-click':
            dataRecordValuesList.push({
              'label': 'Potential-click',
              'value': dataField.getValue() || dataField.getValue() === false ? dataField.getValue() : null
            });
            break;

          case 'Why-i-removed':
            {
              var _currentValue2 = dataField.getValue();

              dataRecordValuesList.push({
                'label': 'Why-i-removed',
                'value': _currentValue2 && _currentValue2.length > 0 ? dataField.getValue() : []
              });
              break;
            }

          case 'Did-i-unmatch':
            dataRecordValuesList.push({
              'label': 'Did-i-unmatch',
              'value': dataField.getValue() ? dataField.getValue() : false
            });
            break;

          case 'School':
            {
              var _match$addedPropertie13, _match$addedPropertie14;

              var schoolFromProfile = (match === null || match === void 0 ? void 0 : (_match$addedPropertie13 = match.addedProperties.getPersonGenericPropertyByKey('School')) === null || _match$addedPropertie13 === void 0 ? void 0 : _match$addedPropertie13.value) ? match === null || match === void 0 ? void 0 : (_match$addedPropertie14 = match.addedProperties.getPersonGenericPropertyByKey('School')) === null || _match$addedPropertie14 === void 0 ? void 0 : _match$addedPropertie14.value : null;
              dataRecordValuesList.push({
                'label': 'School',
                'value': dataField.getValue() ? dataField.getValue() : schoolFromProfile
              });
              break;
            }

          case 'Notes':
            dataRecordValuesList.push({
              'label': 'Notes',
              'value': dataField.getValue() ? dataField.getValue() : ''
            });
            break;

          default:
            if (!dataField.emptyFieldAllowed) {
              console.warn("DataField: ".concat(dataField.title, " does not have an inplementation in TinderController thus could not be resolved"));
            }

            break;
        }
      });
      return dataRecordValuesList;
    }
  }, {
    key: "convertTinderMessagesForDataRecord",
    value: function convertTinderMessagesForDataRecord(matchMessages, matchPersonId) {
      var messagesForDataRecord = [];
      matchMessages.forEach(function (matchMessage) {
        var datetime = function datetime(matchMessage) {
          if (_dateHelper.DateHelper.isValidDate(matchMessage.sent_date)) {
            return matchMessage.sent_date;
          }

          if (_dateHelper.DateHelper.isValidDate(matchMessage.created_date)) {
            return matchMessage.created_date;
          }

          if (_dateHelper.DateHelper.isValidDate(new Date(matchMessage.timestamp).toISOString())) {
            return new Date(matchMessage.timestamp).toISOString();
          }

          console.error("Failed to get proper datetime for message");
          return '';
        };

        messagesForDataRecord.push({
          message: matchMessage.message,
          datetime: datetime(matchMessage),
          author: matchMessage.from === 'me' ? _message.MessageAuthorEnum.Me : _message.MessageAuthorEnum.Match
        });
      });
      return messagesForDataRecord;
    }
  }, {
    key: "_getResponseSpeedMoments",
    value: function _getResponseSpeedMoments(matchMessages) {
      var responseSpeedMoments = []; // if there are no messages from the other person at all, return 0

      if (!matchMessages.some(function (message) {
        return message.author === _message.MessageAuthorEnum.Match;
      })) {
        return responseSpeedMoments;
      }

      matchMessages.forEach(function (currentMessage, index, messagesList) {
        var nextMessage = index + 1 < messagesList.length - 1 ? messagesList[index + 1] : undefined; // if the first message is from me, and the second message is from the other person
        // total messagesList (existing items) is 89
        // if 88, index + 1 = 89, messageList (90)-1 = 89 = gets the 89th message
        // if 89 (last item) + 1 = 90, messageList is (90)-1 = 89, item is NOT less than messageList, thus undefined

        if (!nextMessage) {
          return;
        }

        if (currentMessage.author !== _message.MessageAuthorEnum.Match && nextMessage.author === _message.MessageAuthorEnum.Match) {
          // get the difference between these two moments in datetime
          // add this datetime to the list
          responseSpeedMoments.push({
            datetimeMyLastMessage: currentMessage.datetime,
            datetimeTheirResponse: nextMessage.datetime,
            // get the difference in MS between the following received message received from my match and my previously sent message
            differenceInMS: new Date(nextMessage.datetime).getTime() - new Date(currentMessage.datetime).getTime()
          });
        }
      });
      return responseSpeedMoments;
    }
  }, {
    key: "_getNumberOfGhosting",
    value: function _getNumberOfGhosting(matchMessages, match, dateAcquiredNumber, dateBlockedOrRemoved) {
      var amountOfGhosts = 0;
      var ghostsList = []; // if there are no messages from the other person at all, return 0

      if (!matchMessages.some(function (message) {
        return message.author === _message.MessageAuthorEnum.Match;
      })) {
        return ghostsList;
      }

      matchMessages.reduce(function (formerMessage, laterMessage) {
        // 1. is there 2 days or more in between my last message and her reply message? = ghost moment
        // if(myMessage.from !== matchPersonId && matchMessageReply.from === matchPersonId){
        var isMatchMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(formerMessage.datetime, dateAcquiredNumber) : false;
        var isMyMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(laterMessage.datetime, dateAcquiredNumber) : false;

        if (isMatchMessageLaterThanAcquiredNumberDate || isMyMessageLaterThanAcquiredNumberDate) {
          // date is later thasn acquired number date, thus should no longer add ghostMoments.
          return laterMessage;
        }

        var isMatchMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(formerMessage.datetime, dateBlockedOrRemoved) : false;
        var isMyMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(laterMessage.datetime, dateBlockedOrRemoved) : false;

        if (isMatchMessageLaterThanBlockedDate || isMyMessageLaterThanBlockedDate) {
          // date is later than blocked or removed date, thus should no longer add ghostMoments.
          return laterMessage;
        }

        var matchMessageReplyTimeStamp = new Date(laterMessage.datetime).getTime();
        var myMessageTimeStamp = new Date(formerMessage.datetime).getTime();

        var isGhostMoment = _dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(myMessageTimeStamp, matchMessageReplyTimeStamp, 2); //todo: What if I ghost her!? she sends me message after message.. will get registered as a ghost moment..


        if (isGhostMoment) {
          ghostsList.push({
            number: amountOfGhosts,
            timeSinceLastMessageMS: matchMessageReplyTimeStamp - myMessageTimeStamp,
            status: laterMessage.author === _message.MessageAuthorEnum.Match ? _dataItemGhost.GhostStatus.REPLIED : _dataItemGhost.GhostStatus.NOT_REPLIED_TO_REMINDER
          });
          amountOfGhosts = amountOfGhosts + 1;
        }

        return laterMessage;
      }); // 2. is the last message sent from me AND is it older or equal than 2 days?  = ghost moment

      var lastMessage = matchMessages[matchMessages.length - 1];
      var lastMessageTimeStamp = new Date(lastMessage.datetime).getTime();
      var isLastMessageLaterThanAcquiredNumberDate = dateAcquiredNumber ? _dateHelper.DateHelper.isDateLaterThanDate(lastMessage.datetime, dateAcquiredNumber) : false;
      var isLastMessageLaterThanBlockedDate = dateBlockedOrRemoved ? _dateHelper.DateHelper.isDateLaterThanDate(lastMessage.datetime, dateBlockedOrRemoved) : false;

      if (dateBlockedOrRemoved && dateBlockedOrRemoved.length > 0) {
        var lastGhostMoment = ghostsList.pop();

        if (lastGhostMoment && lastGhostMoment.status === _dataItemGhost.GhostStatus.NOT_REPLIED_TO_REMINDER) {
          lastGhostMoment.status = _dataItemGhost.GhostStatus.BLOCKED;
          ghostsList.push(lastGhostMoment);
        }
      }

      if (isLastMessageLaterThanAcquiredNumberDate || isLastMessageLaterThanBlockedDate) {
        // lastMessage date is later than blocked or removed date, thus should no longer add ghostMoments.
        return ghostsList;
      }

      if (lastMessage.author !== _message.MessageAuthorEnum.Match && _dateHelper.DateHelperTimeStamp.isDateBetweenGreaterThanAmountOfDays(lastMessageTimeStamp, new Date().getTime(), 2)) {
        ghostsList.push({
          number: amountOfGhosts,
          timeSinceLastMessageMS: new Date().getTime() - lastMessageTimeStamp,
          status: _dataItemGhost.GhostStatus.NOT_REPLIED
        });
        amountOfGhosts = amountOfGhosts + 1;
      }

      return ghostsList;
    }
  }, {
    key: "_hasConversation",
    value: function _hasConversation(matchMessages) {
      // if i sent at least 3 messages
      // if person sent 3 messages in return
      // my messages must be somewhere in between the other person's messages

      /*
      if i have sent her a message, and another one..(2 me),
      10 messages in total..
        check if i sent her a message (or vice versa), ignore other messages afetrwards from the same sender (a.1)
      then check if she sent me a message (or vice versa), ignore other messages afterwards from the same sender (b.1),
        afterwards check if i replied to her message (or vice versa), ignore other messages afterwards from the same sender (a.2)
      then check if she sent me a message (or vice versa), ignore other messages aterwards from the same sender (b.2),
        do the same untill you reach (a.3) and (b.3).
      If result is a.3 && b.3 return true, otherwise return false
      */
      var amountMessagesSentByMe = 0;
      var amountMessagesSentByOther = 0;
      var lastRespondent;
      matchMessages.forEach(function (message, index) {
        // determine the sender of the first message
        if (index === 0) {
          if (message.author === _message.MessageAuthorEnum.Match) {
            amountMessagesSentByOther = amountMessagesSentByOther + 1;
          } else {
            amountMessagesSentByMe = amountMessagesSentByMe + 1;
          }

          lastRespondent = message.author;
        } // determine if the next message after the first is from different sender


        if (index !== 0 && message.author !== lastRespondent) {
          if (message.author === _message.MessageAuthorEnum.Match) {
            amountMessagesSentByOther = amountMessagesSentByOther + 1;
          } else {
            amountMessagesSentByMe = amountMessagesSentByMe + 1;
          }

          lastRespondent = message.author;
        }
      });

      if (amountMessagesSentByMe >= 3 && amountMessagesSentByOther >= 3) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "_hasMatchGivenResponse",
    value: function _hasMatchGivenResponse(matchMessages) {
      return matchMessages.some(function (matchMessage) {
        return matchMessage.author === _message.MessageAuthorEnum.Match;
      });
    }
  }, {
    key: "_hasMatchSentFirstMessage",
    value: function _hasMatchSentFirstMessage(matchMessages) {
      return matchMessages[0].author === _message.MessageAuthorEnum.Match ? true : false;
    } // private _isVerifiedMatch(badgesList: Badges[]): boolean {
    //     if (badgesList.length > 0) {
    //         return badgesList.some((badge) => {
    //             return badge.type === "selfie_verified";
    //         });
    //     } else {
    //         return false;
    //     }
    // }

  }, {
    key: "getGender",
    value: function getGender(genderString) {
      switch (genderString) {
        case "FEMALE":
        case "Female":
        case "female":
          return 'Female';

        case "MALE":
        case "Male":
        case "male":
          return 'Male';

        default:
          console.warn("Tried to get gender by genderCode but genderCode was not recognized: ".concat(genderString, ". Thus \"Other\" was inserted. Checking & updating genderCodes may be advised."));
          return 'Other';
      }
    } // private _convertDistanceMilesToKM(distance_mi: number): number {
    //     return (distance_mi * 1.6);
    // }

  }, {
    key: "_getHappnAge",
    value: function _getHappnAge(happnMatch) {
      var _happnMatch$participa;

      var match = happnMatch === null || happnMatch === void 0 ? void 0 : (_happnMatch$participa = happnMatch.participants[1]) === null || _happnMatch$participa === void 0 ? void 0 : _happnMatch$participa.user;

      if (match.age) {
        return match.age;
      } else if (match.birth_date) {
        return _dateHelper.DateHelper.getAgeFromBirthDate(match.birth_date);
      } else {
        console.warn("Could not get age nor birth_date from match: ".concat(match.first_name, ". Please check the code & api response."));
        return NaN;
      }
    }
  }]);
  return MatchDataParser;
}();

exports.MatchDataParser = MatchDataParser;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/dateHelper":"EDRb","../../../message.interface":"kRs2","../data/dataItems/dataItemGhost":"XgYc","../util/NeedsReminder":"wjdh"}],"JK4a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HappnMatchesAndMessagesController = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _dataRecord = require("../data/dataRecord");

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _MatchDataParserHappn = require("./MatchDataParserHappn");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

var _datingAppType = require("../../../datingAppType.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HappnMatchesAndMessagesController = /*#__PURE__*/function () {
  function HappnMatchesAndMessagesController(requestHandler, dataTable, nameController) {
    (0, _classCallCheck2.default)(this, HappnMatchesAndMessagesController);
    // private nameController = 'happn';
    this.nameController = _datingAppType.DatingAppType.HAPPN;
    this.requestHandler = requestHandler;
    this.dataTable = dataTable;
    this.nameController = nameController;
  } // only method allowed to be public!


  (0, _createClass2.default)(HappnMatchesAndMessagesController, [{
    key: "refreshDataTableMatchesAndMatchMessages",
    value: function refreshDataTableMatchesAndMatchMessages() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var _this$getMatches;

        // Gather data (by api's OR (less preferably) DOM)
        (_this$getMatches = _this.getMatches()) === null || _this$getMatches === void 0 ? void 0 : _this$getMatches.then( /*#__PURE__*/function () {
          var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(matches) {
            var i, _happnConversation$la, match, systemIdMatch, dataRecord, profileNeedsUpdate, messagesNeedsUpdate, happnConversation, happnLastMessage, _dataRecord$getLatest;

            return _regenerator.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    console.log("Matches & match messages:");
                    console.dir(matches); // eslint-disable-next-line no-debugger
                    // debugger;

                    if (!(matches === null)) {
                      _context.next = 5;
                      break;
                    }

                    console.error("Could not retrieve matches");
                    return _context.abrupt("return", reject());

                  case 5:
                    for (i = 0; i <= matches.length - 1; i++) {
                      match = matches[i];
                      systemIdMatch = _this.dataTable.getRecordIndexBySystemId(match.match.id, _this.nameController);
                      dataRecord = _this.dataTable.getRecordByRecordIndex(systemIdMatch); // If profile/messages need update, then set need update to true. If datarecord is null (i.e. new record due to new match), always set to true

                      profileNeedsUpdate = dataRecord ? dataRecord.getIfProfileDetailsNeedsUpdate() : true;
                      messagesNeedsUpdate = dataRecord ? dataRecord === null || dataRecord === void 0 ? void 0 : dataRecord.getIfMessagesNeedsUpdate() : true; // Set profile needs update to true is this value has been previously set (manually by me or profile details has failed to retrieve its data previously)

                      if (profileNeedsUpdate) {
                        match.addedProperties.updatePersonProperty('needsProfileDetailsUpdate', true, 'true');
                      } // Set messages needs update if this value has been previously set (manually by me or messages has failed to retrieve its data previously)


                      if (messagesNeedsUpdate) {
                        match.addedProperties.updatePersonProperty('needsMessagesUpdate', true, 'true');
                      } // Set messages needs update if the value of the latest messages for this match differs from the value of the last messages stored in the data record


                      happnConversation = match.match;
                      happnLastMessage = (_happnConversation$la = happnConversation.last_message) === null || _happnConversation$la === void 0 ? void 0 : _happnConversation$la.message;

                      if (happnLastMessage) {
                        if (dataRecord !== null && !messagesNeedsUpdate) {
                          if ((dataRecord === null || dataRecord === void 0 ? void 0 : (_dataRecord$getLatest = dataRecord.getLatestMessage()) === null || _dataRecord$getLatest === void 0 ? void 0 : _dataRecord$getLatest.message) !== happnConversation.last_message.message) {
                            match.addedProperties.updatePersonProperty('needsMessagesUpdate', true, 'true');
                          }
                        }
                      }
                    }

                    console.log('I await');
                    _context.next = 9;
                    return _this._addProfileDataMatchesHappn(matches);

                  case 9:
                    console.log("50% complete..");
                    _context.next = 12;
                    return _this._addMessagesMatchesHappn(matches);

                  case 12:
                    console.log('I continue');

                    _this.updateDataTable(matches);

                    _this.setUnupdatedMatchesToBlocked(matches, _this.dataTable).finally(function () {
                      console.log("setUnupdatedMatchesToBlocked finally() START"); // const dataRecordsWhereMessagesNeedToBeUpdated = this.dataTable.getAllDataRecordsWhereMessageNeedTobeUpdated();
                      // if (dataRecordsWhereMessagesNeedToBeUpdated.length === 0) {
                      //     console.log(`NO DATA RECORDS NEED TO BE UPDATED`);
                      //     return resolve();
                      // }
                      // this.updateMessagesDataRecords(this.requestHandler, dataRecordsWhereMessagesNeedToBeUpdated, matches).then((hasMessagesBeenRetrieved) => {
                      //     console.log(`setUnupdatedMatchesToBlocked - this.updateMessageDataRecords finally() .then START`);
                      //     if (!hasMessagesBeenRetrieved) {
                      //         console.error(`Something went wrong with getting messages! Check the network logs.`);
                      //         return reject();
                      //     }
                      //     const dataRecords: DataRecord[] = this.dataTable.getAllDataRecords();
                      //     dataRecords.forEach((dataRecord) => {
                      //         const dataFields: DataField[] = dataRecord.getDataFields();
                      //         const systemId: string | null = dataRecord.getRecordPersonSystemId(this.nameController)
                      //         if (!systemId) {
                      //             console.warn(`Could not update dataRecord because record index could not be found due to not found system id: ${systemId}`);
                      //         } else {
                      //             const matchRecordIndex: number = this.dataTable.getRecordIndexBySystemId(systemId, this.nameController);
                      //             const tinderMatchDataRecordValues: DataRecordValues[] = MatchDataParser.parseMatchDataToDataRecordValues(this.nameController, dataFields, undefined, systemId);
                      //             this.dataTable.updateDataRecordByIndex(matchRecordIndex, tinderMatchDataRecordValues);
                      //         }
                      //     });
                      //     // return resolve(); // does this perhaps need to be put INSIDE the this.updateMessagesDataRecords?, nope doesnt help either.. try 1
                      //     console.log(`setUnupdatedMatchesToBlocked - this.updateMessageDataRecords finally() .then END`);
                      // }).catch((error) => {
                      //     console.dir(error);
                      //     console.error(`Error occured getting matchMessages`);
                      // }).finally(() => {
                      //     console.log(`And here is my data table:`);
                      //     console.dir(this.dataTable);
                      // });
                      // console.log(`setUnupdatedMatchesToBlocked finally() END`);
                    });

                    console.log("getMatches() END");
                    return _context.abrupt("return", resolve());

                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }()).catch(function (error) {
          console.dir(error);
          console.error("An error occured getting matches");
        });
      });
    }
  }, {
    key: "getMatches",
    value: function getMatches() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (!_this2.requestHandler) {
          reject(null);
        }

        _this2.requestHandler.getMatchesStart().then(function (matches) {
          console.log("Matches:");
          console.dir(matches);

          if (matches && matches.length > 0) {
            resolve(matches);
          } else {
            reject(null);
          }
        });
      });
    }
  }, {
    key: "_addMessagesMatchesHappn",
    value: function _addMessagesMatchesHappn(matches) {
      var _this3 = this;

      // Get only the profiles which have been set to require an update
      var needsMessagesUpdateMatches = matches.filter(function (match) {
        var _match$addedPropertie;

        var result = (_match$addedPropertie = match.addedProperties.getPersonGenericPropertyByKey('needsMessagesUpdate')) === null || _match$addedPropertie === void 0 ? void 0 : _match$addedPropertie.value;
        return result;
      }); // eslint-disable-next-line no-async-promise-executor

      return new Promise( /*#__PURE__*/function () {
        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(resolvedAllMessages, reject) {
          var _loop, i;

          return _regenerator.default.wrap(function _callee2$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _loop = /*#__PURE__*/_regenerator.default.mark(function _loop(i) {
                    var index, match, matchData, firstName;
                    return _regenerator.default.wrap(function _loop$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            index = i;
                            match = needsMessagesUpdateMatches[index];
                            matchData = match.match;
                            firstName = matchData.participants[1].user.first_name;
                            console.log("*** Getting MESSAGES for ".concat(firstName));
                            console.dir(matchData); // debugger;

                            _context2.next = 8;
                            return new Promise(function (resolvedMessages, reject) {
                              _this3.requestHandler.getMatchMessages(matchData.id).then(function (result) {
                                if (!result) {
                                  match.addedProperties.updatePersonProperty('needsMessagesUpdate', true, 'true'); // console.log(`needsMessagesUpdate failure! thus set to true`);
                                  // this._consoleColorLog(`needsMessagesUpdate failure! thus set to true`, 'red');
                                }

                                console.log("I got yer MESSAGES for ".concat(firstName, " right here: "));
                                console.log(result);

                                _this3._updateParsedResultMatchWithMessages(match, result);

                                console.log("*** Got MESSAGES for ".concat(firstName));
                                match.addedProperties.updatePersonProperty('needsMessagesUpdate', false, 'false'); // console.log(`needsMessagesUpdate success! thus set to false`);
                                // this._consoleColorLog(`needsMessagesUpdate! thus set to false`, 'green');

                                resolvedMessages();
                              }).catch(function () {
                                match.addedProperties.updatePersonProperty('needsMessagesUpdate', true, 'true'); // console.log(`needsMessagesUpdate failure! thus set to true`);
                                // this._consoleColorLog(`needsMessagesUpdate failure! thus set to true`, 'red');
                              });
                            });

                          case 8:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _loop);
                  });
                  i = 0;

                case 2:
                  if (!(i <= needsMessagesUpdateMatches.length - 1)) {
                    _context3.next = 7;
                    break;
                  }

                  return _context3.delegateYield(_loop(i), "t0", 4);

                case 4:
                  i++;
                  _context3.next = 2;
                  break;

                case 7:
                  resolvedAllMessages();

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2, _x3) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "_updateParsedResultMatchWithMessages",
    value: function _updateParsedResultMatchWithMessages(parsedResultMatch, result) {
      if (result.data.conversation.messages.edges.length >= 50) {
        console.warn("The messages for this conversation with ".concat(parsedResultMatch.match.participants[1].user.name, " has or exceeds 50 messages. Am I sure I am getting ALL the messages?"));

        _ConsoleColorLog.ConsoleColorLog.singleLog("The messages for this conversation with ".concat(parsedResultMatch.match.participants[1].user.name, " has or exceeds 50 messages. Am I sure I am getting ALL the messages?"), "Because I THINK I programmed tghe app in such a way that the first 50 messages are retrieved but if there are more than 50 messages it does not get those, thus those are lost (which would be a shame)");
      }

      result.data.conversation.messages.edges.forEach(function (messageNode) {
        var isMessengerMe = parsedResultMatch.match.participants[0].user.first_name === messageNode.node.sender.firstName; // if(isMessengerMe){
        //     console.log(`Yes! I am the sender of this message: ${messageNode.node.body}`);
        // }else{
        //     console.log(`No, i am not the sender of this message: ${messageNode.node.body}`);
        // }
        // for now i will use the TinderMessage interface because the ParsedResultMatch interface does not allow me to add multiple message interfaces for I would need to update every object i add to the list with similair properties
        // should probably want to refactor this for tinder + happn to 1 single interface (simply use Message interface?)

        var tinderMessageToConvert = {
          _id: messageNode.node.id,
          match_id: parsedResultMatch.match.id,
          sent_date: messageNode.node.creationDate,
          message: messageNode.node.body,
          to: isMessengerMe ? 'match' : 'me',
          from: isMessengerMe ? 'me' : 'match',
          created_date: messageNode.node.creationDate,
          timestamp: new Date(messageNode.node.creationDate).getTime()
        }; // no personal nor conversation id matches the messages id! weirdddd! even the names are not safe!

        parsedResultMatch.matchMessages.push(tinderMessageToConvert);
      });
    }
  }, {
    key: "_addProfileDataMatchesHappn",
    value: function _addProfileDataMatchesHappn(matches) {
      var _this4 = this;

      // Get only the profiles which have been set to require an update
      var needsProfileUpdateMatches = matches.filter(function (match) {
        var _match$addedPropertie2;

        return ((_match$addedPropertie2 = match.addedProperties.getPersonGenericPropertyByKey('needsProfileDetailsUpdate')) === null || _match$addedPropertie2 === void 0 ? void 0 : _match$addedPropertie2.value) === true;
      }); // eslint-disable-next-line no-async-promise-executor

      return new Promise( /*#__PURE__*/function () {
        var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(resolvedAllProfileDetails, reject) {
          var _loop2, i;

          return _regenerator.default.wrap(function _callee3$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (needsProfileUpdateMatches.length === 0) {
                    resolvedAllProfileDetails();
                  }

                  _loop2 = /*#__PURE__*/_regenerator.default.mark(function _loop2(i) {
                    var index, match, firstName, profileDetails;
                    return _regenerator.default.wrap(function _loop2$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            index = i;
                            match = needsProfileUpdateMatches[index];
                            firstName = match.match.participants[1].user.first_name;
                            console.log("*** Getting result for ".concat(firstName));
                            profileDetails = new Promise(function (resolvedProfileDetail, reject) {
                              _this4.requestHandler.getMatchProfileDetails(match.match.participants[1].user.id).then(function (result) {
                                if (result.error !== null) {
                                  console.warn("Could not get profile data for ".concat(firstName)); // console.log(`needsProfileDetailsUpdate failure! thus set to true`);
                                  // this._consoleColorLog(`needsProfileDetailsUpdate failure! thus set to true`, 'red');

                                  match.addedProperties.updatePersonProperty('needsProfileDetailsUpdate', true, 'true'); // return reject(false); // yes this is it! NOT calling reject here will prevent JS from executing! (or is it because i'm still calling resolve instead?.. test!..)

                                  return resolvedProfileDetail(true);
                                }

                                console.log("I got yer result (profile details) for ".concat(firstName, " right here: "));
                                console.log(result);

                                _this4._updateParsedResultMatchWithProfileDetails(match, result);

                                console.log("*** Got result for ".concat(firstName));
                                return resolvedProfileDetail(true);
                              }).catch(function () {
                                // console.log(`needsProfileDetailsUpdate failure! thus set to true`);
                                match.addedProperties.updatePersonProperty('needsProfileDetailsUpdate', true, 'true'); // this._consoleColorLog(`needsProfileDetailsUpdate! thus set to true`, 'red');
                              });
                            });
                            _context4.next = 7;
                            return profileDetails;

                          case 7:
                            _context4.t0 = console;
                            _context4.t1 = "Succesfully retrtieved profile data for ".concat(firstName, "?: ");
                            _context4.next = 11;
                            return profileDetails;

                          case 11:
                            _context4.t2 = _context4.sent.valueOf();
                            _context4.t3 = _context4.t1.concat.call(_context4.t1, _context4.t2);

                            _context4.t0.log.call(_context4.t0, _context4.t3);

                            match.addedProperties.updatePersonProperty('needsProfileDetailsUpdate', false, 'false'); // console.log(`needsProfileDetailsUpdate success! thus set to false`);
                            // this._consoleColorLog(`needsProfileDetailsUpdate success! thus set to false`, 'green');

                          case 15:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _loop2);
                  });
                  i = 0;

                case 3:
                  if (!(i <= needsProfileUpdateMatches.length - 1)) {
                    _context5.next = 8;
                    break;
                  }

                  return _context5.delegateYield(_loop2(i), "t0", 5);

                case 5:
                  i++;
                  _context5.next = 3;
                  break;

                case 8:
                  resolvedAllProfileDetails();

                case 9:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x4, _x5) {
          return _ref3.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "_updateParsedResultMatchWithProfileDetails",
    value: function _updateParsedResultMatchWithProfileDetails(parsedResultMatch, result) {
      var _result$data;

      parsedResultMatch.addedProperties.updatePersonProperty('Bio', result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.about, 'string');
      parsedResultMatch.addedProperties.updatePersonProperty('Amount-of-pictures', result === null || result === void 0 ? void 0 : result.data.nb_photos, 'number');
      parsedResultMatch.addedProperties.updatePersonProperty('Type-of-match-or-like', 'like', 'string');
      parsedResultMatch.addedProperties.updatePersonProperty('Verification', (result === null || result === void 0 ? void 0 : result.data.verification.status) !== "unverified", 'boolean');
      parsedResultMatch.addedProperties.updatePersonProperty('Job', result === null || result === void 0 ? void 0 : result.data.job, 'string');
      parsedResultMatch.addedProperties.updatePersonProperty('School', result === null || result === void 0 ? void 0 : result.data.school, 'string');
    }
  }, {
    key: "updateMessagesDataRecords",
    value: function updateMessagesDataRecords(requestHandler, dataRecords, matches) {
      var _this5 = this;

      console.log("updateMessagesDataRecords - START"); // eslint-disable-next-line no-async-promise-executor

      return new Promise( /*#__PURE__*/function () {
        var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(resolve, reject) {
          var i, systemIdMatch, personId, messages, currentMatch, tinderMessages, messagesDataField;
          return _regenerator.default.wrap(function _callee4$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!(dataRecords.length === 0)) {
                    _context6.next = 3;
                    break;
                  }

                  console.error("Data records amount cannot be 0");
                  return _context6.abrupt("return", reject(false));

                case 3:
                  i = 0;

                case 4:
                  if (!(i <= dataRecords.length - 1)) {
                    _context6.next = 24;
                    break;
                  }

                  console.log("GETTING MESSAGES now for: ".concat(i, " - ").concat(dataRecords[i].usedDataFields[5].getValue()));
                  systemIdMatch = dataRecords[i].getRecordPersonSystemId(_this5.nameController);

                  if (systemIdMatch) {
                    _context6.next = 11;
                    break;
                  }

                  console.warn("Could not get messages for ".concat(i, " - ").concat(dataRecords[i].usedDataFields[5].getValue(), " because systemId was: ").concat(systemIdMatch));
                  _context6.next = 18;
                  break;

                case 11:
                  personId = _this5.getPersonIdFromMatch(systemIdMatch, matches);
                  _context6.next = 14;
                  return requestHandler.getMatchMessages(systemIdMatch);

                case 14:
                  messages = _context6.sent;
                  currentMatch = getParsedResultMatchBySystemId(systemIdMatch, matches);
                  tinderMessages = convertMessagesHappnToTinderMessages(messages, currentMatch);

                  if (personId) {
                    messagesDataField = dataRecords[i].usedDataFields[2];
                    messagesDataField.updateMessagesList(_MatchDataParserHappn.MatchDataParser.convertTinderMessagesForDataRecord(tinderMessages, personId), true);
                  } else {
                    console.warn("Messages could not be added to dataRecord because personId was not found in matches array. Please check the values provided.");
                  }

                case 18:
                  if (!(i === dataRecords.length - 1)) {
                    _context6.next = 21;
                    break;
                  }

                  console.log("updateMessagesDataRecords - END");
                  return _context6.abrupt("return", resolve(true));

                case 21:
                  i = i + 1;
                  _context6.next = 4;
                  break;

                case 24:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }));

        return function (_x6, _x7) {
          return _ref4.apply(this, arguments);
        };
      }());

      function getParsedResultMatchBySystemId(systemId, matches) {
        var matchIndex = matches.findIndex(function (match) {
          return match.match.id === systemId;
        });

        if (matchIndex === -1) {
          matchIndex = 0;
        }

        return matches[matchIndex];
      }

      function convertMessagesHappnToTinderMessages(messages, parsedResultMatch) {
        var tinderMessages = [];
        messages.data.conversation.messages.edges.forEach(function (messageNode) {
          var isMessengerMe = parsedResultMatch.match.participants[0].user.first_name === messages.data.conversation.messages.edges[0].node.sender.firstName; // for now i will use the TinderMessage interface because the ParsedResultMatch interface does not allow me to add multiple message interfaces for I would need to update every object i add to the list with similair properties
          // should probably want to refactor this for tinder + happn to 1 single interface (simply use Message interface?)

          var tinderMessageToConvert = {
            _id: messageNode.node.id,
            match_id: parsedResultMatch.match.id,
            sent_date: messageNode.node.creationDate,
            message: messageNode.node.body,
            to: isMessengerMe ? 'match' : 'me',
            from: isMessengerMe ? 'me' : 'match',
            created_date: messageNode.node.creationDate,
            timestamp: new Date(messageNode.node.creationDate).getTime()
          };
          tinderMessages.push(tinderMessageToConvert);
        });
        return tinderMessages;
      }
    }
  }, {
    key: "getPersonIdFromMatch",
    value: function getPersonIdFromMatch(systemIdMatch, matches) {
      if (!systemIdMatch || !matches || matches.length === 0) {
        console.error("Insufficient systemIdMatch or match array was provided. Please check the provided values.");
        return null;
      }

      var match = matches.find(function (match) {
        var happnMatch = match.match;
        return happnMatch.id === systemIdMatch || happnMatch.participants[1].id === systemIdMatch;
      });

      if (match) {
        var happnMatch = match.match;
        return happnMatch.participants[1].user.id;
      } else {
        console.error("No match found in match array with systemIdMatch: ".concat(systemIdMatch));
        return null;
      }
    }
  }, {
    key: "updateDataTable",
    value: function updateDataTable(matches) {
      var _this6 = this;

      matches === null || matches === void 0 ? void 0 : matches.forEach(function (match) {
        var happnMatch = match.match;
        match.match = happnMatch;

        var matchRecordIndex = _this6.getMatchRecordIndexBySystemIdOrPersonId(happnMatch, _this6.nameController);

        var happnMatchDataRecordValues;
        var dataFields;

        if (matchRecordIndex === -1) {
          // if match doesnt exist, create new data record, fill new record with all data needed
          console.log("Going to CREATE new data record for: ".concat(happnMatch.participants[1].user.first_name));
          var newDataRecord = new _dataRecord.DataRecord();
          dataFields = newDataRecord.getDataFields();
          happnMatchDataRecordValues = _MatchDataParserHappn.MatchDataParser.parseMatchDataToDataRecordValues(_this6.nameController, dataFields, match, happnMatch.id);
          var dataAddedSuccessfully = newDataRecord.addDataToDataFields(happnMatchDataRecordValues);

          if (dataAddedSuccessfully) {
            _this6.dataTable.addNewDataRecord(newDataRecord, _this6.nameController);
          } else {
            console.error("Error adding data from retrieved match. Please check match retrieved and error log.");
          }
        } else {
          console.log("Going to UPDATE data record for: ".concat(happnMatch.participants[1].user.first_name));
          dataFields = _this6.dataTable.getDataFieldsByRecordIndex(matchRecordIndex);
          happnMatchDataRecordValues = _MatchDataParserHappn.MatchDataParser.parseMatchDataToDataRecordValues(_this6.nameController, dataFields, match, happnMatch.id);

          _this6.dataTable.updateDataRecordByIndex(matchRecordIndex, happnMatchDataRecordValues);
        }
      });
      console.log("CHECK DATATABLE RESULT:");
      console.dir(this.dataTable);
    }
  }, {
    key: "getMatchRecordIndexBySystemIdOrPersonId",
    value: function getMatchRecordIndexBySystemIdOrPersonId(match, nameController) {
      match = match;
      var recordIndex = this.dataTable.getRecordIndexBySystemId(match.id, nameController);

      if (recordIndex === -1) {
        return this.dataTable.getRecordIndexBySystemId(match.participants[1].user.id, nameController);
      }

      return recordIndex;
    }
  }, {
    key: "setUnupdatedMatchesToBlocked",
    value: function setUnupdatedMatchesToBlocked(matches, dataTable) {
      var _this7 = this;

      console.log("setUnupdatedMatchesToBlocked - START");
      var newBlockedOrRemovedPersons = 0;
      var updatedBlockedOrRemovedPersons = 0; // eslint-disable-next-line no-async-promise-executor

      return new Promise( /*#__PURE__*/function () {
        var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(resolve) {
          var unupdatedMatchesList, i, unupdatedMatch, indexDataFieldBlocked, isDataFieldBlocked, indexDataFieldIsMatch, isDataFieldIsMatch, indexDataFieldSeeminglyDeletedProfile, hasDataFieldSeeminglyDeletedProfile, matchId, matchTempId, matchName, indexUnmatchDatafield, dateOfUnmatchValue, matchDataDeletedMatch;
          return _regenerator.default.wrap(function _callee5$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  // if a match no longer appears in the retrieved (matches), then either the profile or our match has been deleted!
                  unupdatedMatchesList = dataTable.getAllDataRecords().filter(function (dataRecord) {
                    var doesDataRecordNotHaveMatchListed = matches.findIndex(function (match) {
                      return match.match.id === dataRecord.getRecordPersonSystemId(_this7.nameController) || match.match.participants[1].user.id === dataRecord.getRecordPersonSystemId(_this7.nameController);
                    });
                    return doesDataRecordNotHaveMatchListed === -1 ? true : false;
                  });
                  i = 0;

                case 2:
                  if (!(i <= unupdatedMatchesList.length - 1)) {
                    _context7.next = 38;
                    break;
                  }

                  unupdatedMatch = unupdatedMatchesList[i]; // do not update if dataField 'Blocked' is already set to true

                  indexDataFieldBlocked = unupdatedMatch.getIndexOfDataFieldByTitle('Blocked-or-removed');
                  isDataFieldBlocked = false;

                  if (unupdatedMatch.usedDataFields[indexDataFieldBlocked].getValue()) {
                    isDataFieldBlocked = true;
                  } // do not update if dataField 'isMatch' is still false, since this person can still become a match in the future


                  indexDataFieldIsMatch = unupdatedMatch.getIndexOfDataFieldByTitle('Is-match');
                  isDataFieldIsMatch = true;

                  if (!unupdatedMatch.usedDataFields[indexDataFieldIsMatch].getValue()) {
                    isDataFieldIsMatch = false;
                  } // do not update if datafield 'Seemingly-deleted-profile' is false, since this is an already confirmed deleted profile


                  indexDataFieldSeeminglyDeletedProfile = unupdatedMatch.getIndexOfDataFieldByTitle('Seemingly-deleted-profile');
                  hasDataFieldSeeminglyDeletedProfile = true;

                  if (!unupdatedMatch.usedDataFields[indexDataFieldSeeminglyDeletedProfile].getValue()) {
                    hasDataFieldSeeminglyDeletedProfile = false;
                  }

                  if (!(isDataFieldBlocked || hasDataFieldSeeminglyDeletedProfile || !isDataFieldIsMatch)) {
                    _context7.next = 16;
                    break;
                  }

                  if (i === unupdatedMatchesList.length - 1) {
                    console.log("Done updating deleted match data records");
                    resolve();
                  }

                  return _context7.abrupt("continue", 35);

                case 16:
                  newBlockedOrRemovedPersons = newBlockedOrRemovedPersons + 1;
                  matchId = unupdatedMatch.getRecordPersonSystemId(_this7.nameController);
                  matchTempId = unupdatedMatch.getRecordPersonSystemId(_this7.nameController, true);
                  matchName = unupdatedMatch.usedDataFields[unupdatedMatch.getIndexOfDataFieldByTitle('Name')].getValue();

                  _ConsoleColorLog.ConsoleColorLog.singleLog("MatchId is: ", matchId, _LogColors.LogColors.GREEN);

                  _ConsoleColorLog.ConsoleColorLog.singleLog("MatchTempId is: ", matchTempId, _LogColors.LogColors.GREEN);

                  _ConsoleColorLog.ConsoleColorLog.singleLog("MatchName is: ", matchName, _LogColors.LogColors.GREEN);

                  if (!(!matchId || !matchTempId)) {
                    _context7.next = 26;
                    break;
                  }

                  console.warn("Could not get profileDetails for unupdated match due to matchId being: ".concat(matchId, " and matchTempId being: ").concat(matchTempId, ", skipping this match.."));
                  return _context7.abrupt("continue", 35);

                case 26:
                  indexUnmatchDatafield = unupdatedMatch.getIndexOfDataFieldByTitle('Did-i-unmatch');

                  if (unupdatedMatch.usedDataFields[indexUnmatchDatafield].getValue()) {
                    console.warn("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " request returned a 200 while our match is gone. I (ME) deleted our match!"));
                    console.warn(unupdatedMatchesList[i]);
                  } else {
                    console.warn("Matchdetails: ".concat(matchName, " with id: ").concat(matchId, " request returned a 200 while our match is gone. Match deleted our match OR match's profile got deleted!"));
                    console.warn(unupdatedMatchesList[i]);
                  }

                  dateOfUnmatchValue = unupdatedMatch.usedDataFields[unupdatedMatch.getIndexOfDataFieldByTitle('Date-of-unmatch')].getValue();
                  _context7.next = 31;
                  return _this7.getMatchDataDeletedMatch(matchId, matchTempId, dateOfUnmatchValue);

                case 31:
                  matchDataDeletedMatch = _context7.sent;
                  unupdatedMatch.addDataToDataFields(matchDataDeletedMatch);
                  unupdatedMatch.setUpdateMessages(false);
                  updatedBlockedOrRemovedPersons = updatedBlockedOrRemovedPersons + 1;

                case 35:
                  i = i + 1;
                  _context7.next = 2;
                  break;

                case 38:
                  console.log("setUnupdatedMatchesToBlocked - END");

                case 39:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5);
        }));

        return function (_x8) {
          return _ref5.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "getMatchConversation",
    value: function getMatchConversation(matchId) {
      var _this8 = this;

      return new Promise(function (resolve) {
        _this8.requestHandler.getMatchConversation(matchId).then(function (matchMessagesDetails) {
          if (matchMessagesDetails.status === 200) {
            return resolve({
              receivedResponse: true,
              response: matchMessagesDetails
            });
          } else {
            return resolve({
              receivedResponse: false,
              response: null
            });
          }
        });
      });
    }
  }, {
    key: "getMatchDetails",
    value: function getMatchDetails(personProfileId) {
      var _this9 = this;

      return new Promise(function (resolve) {
        _this9.requestHandler.getMatchProfileDetails(personProfileId).then(function (matchDetails) {
          if (matchDetails.status === 200) {
            return resolve({
              receivedResponse: true,
              response: matchDetails
            });
          } else {
            return resolve({
              receivedResponse: false,
              response: null
            });
          }
        });
      });
    }
  }, {
    key: "getMatchDataDeletedMatch",
    value: function () {
      var _getMatchDataDeletedMatch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(matchId, matchTempId, dateOfUnmatchValue) {
        var matchConversationResult, matchDetailsResult;
        return _regenerator.default.wrap(function _callee6$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                matchConversationResult = this.getMatchConversation(matchId);
                matchDetailsResult = this.getMatchDetails(matchTempId);
                return _context8.abrupt("return", new Promise(function (resolve) {
                  Promise.all([matchConversationResult, matchDetailsResult]).then(function (values) {
                    var _values$, _values$$response, _values$$response$dat;

                    var isAnyRequestSuccesful = values.some(function (responseObject) {
                      return responseObject.receivedResponse === true;
                    });

                    if (isAnyRequestSuccesful) {
                      alert("We got our first deleted match in the getMatchConversation request result! \n                    Does this mean she deleted me or her account still exists? \n                    The previous deleted match (Sindy - 17846212729_d37eaec1-27d0-4818-9367-e6d325f290b3) simply gave a 500 error. \n                    Does that mean if a 500 error is returned the account has been deleted, \n                    and if results are returned (but she is no longer in the matches result from the getMatches request) she deleted our match?"); // eslint-disable-next-line no-debugger

                      debugger;
                    }

                    var matchMessagesDetailsModificationdate = (_values$ = values[0]) === null || _values$ === void 0 ? void 0 : (_values$$response = _values$.response) === null || _values$$response === void 0 ? void 0 : (_values$$response$dat = _values$$response.data) === null || _values$$response$dat === void 0 ? void 0 : _values$$response$dat.conversation.modificationDate;
                    matchMessagesDetailsModificationdate = matchMessagesDetailsModificationdate ? matchMessagesDetailsModificationdate : new Date().toISOString();
                    resolve([{
                      label: 'Blocked-or-removed',
                      value: true
                    }, {
                      label: 'Date-of-unmatch',
                      value: dateOfUnmatchValue !== null ? dateOfUnmatchValue : matchMessagesDetailsModificationdate
                    }, {
                      label: 'Seemingly-deleted-profile',
                      value: isAnyRequestSuccesful ? false : true
                    }]);
                  });
                }));

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee6, this);
      }));

      function getMatchDataDeletedMatch(_x9, _x10, _x11) {
        return _getMatchDataDeletedMatch.apply(this, arguments);
      }

      return getMatchDataDeletedMatch;
    }()
  }]);
  return HappnMatchesAndMessagesController;
}();

exports.HappnMatchesAndMessagesController = HappnMatchesAndMessagesController;
},{"@babel/runtime/helpers/asyncToGenerator":"Ittk","@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","@babel/runtime/regenerator":"y2KZ","../data/dataRecord":"RbWp","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","./MatchDataParserHappn":"vjIz","../util/ConsoleColorLog/LogColors":"QvSI","../../../datingAppType.enum":"LiO7"}],"lzYC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UrlHelper = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UrlHelper = /*#__PURE__*/function () {
  function UrlHelper() {
    (0, _classCallCheck2.default)(this, UrlHelper);
  }

  (0, _createClass2.default)(UrlHelper, null, [{
    key: "getCurrentMatchIdFromUrl",
    value: function getCurrentMatchIdFromUrl() {
      var indexLastSlash = window.location.href.lastIndexOf('/');

      if (indexLastSlash >= 0) {
        return window.location.href.substring(indexLastSlash + 1);
      } else {
        console.error("Url does not seem to contain a slash?");
        return null;
      }
    }
  }]);
  return UrlHelper;
}();

exports.UrlHelper = UrlHelper;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH"}],"NfAd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UIHelpersHappn = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _dataField = require("../data/dataField");

var _dataRecord36 = require("../data/dataRecord");

var _DOMHelper = require("../util/DOMHelper");

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

var _MatchDataParserHappn = require("./MatchDataParserHappn");

var _Overlay = require("../serrvices/Overlay");

var _personAction = require("./../../../personAction.enum");

var _UrlHelper = require("../serrvices/UrlHelper");

var _PortAction = require("../../../PortAction.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UIHelpersHappn = /*#__PURE__*/function () {
  function UIHelpersHappn(nameController, screenController, uiRenderer, dataTable, requestHandler, dataStorage, dataPort) {
    (0, _classCallCheck2.default)(this, UIHelpersHappn);
    this.uiRenderer = uiRenderer;
    this.screenController = screenController;
    this.nameController = nameController;
    this.dataTable = dataTable;
    this.requestHandler = requestHandler;
    this.dataStorage = dataStorage;
    this.dataPort = dataPort;
  }

  (0, _createClass2.default)(UIHelpersHappn, [{
    key: "addUIHelpers",
    value: function addUIHelpers(screenController, forceRefresh) {
      var _this = this;

      if (screenController.getCurrentScreen().getScreenIsChatScreen()) {
        if (forceRefresh) {
          this.uiRenderer.removeAllUIHelpers();
        } // 1. get current messageListItemPerson


        var currentMatchid = this.getCurrentMatchIdFromChatScreen();
        var dataRecord = null;
        var dataFields = undefined; // 2. get record in table for this person

        if (currentMatchid.length > 0) {
          var recordIndexId = this.dataTable.getRecordIndexBySystemId(currentMatchid, this.nameController);

          if (recordIndexId !== -1) {
            // todo: so i need to get the data first BEFORE i update the record? or just change this entirely?
            // todo: why do i need to include undefined here while at no point in the assignment of this variabele does it ever get undefined assigned to it?
            dataRecord = this.dataTable.getRecordByRecordIndex(recordIndexId);

            if (dataRecord !== null) {
              dataFields = dataRecord.getDataRecordDataFields(); // 3. show helpers for chat (all?), make space above messagebox, put helper container there?
              // debugger;

              this.uiRenderer.renderFieldsContainerForScreen(this.screenController, function () {
                // $('div[id*="SC.chat"]').first().css('width', '730px');
                var chatContainerDOM = _DOMHelper.DOMHelper.getFirstDOMNodeByJquerySelector('div[data-testid="conversation-message-list-scrollbars"]');

                if (chatContainerDOM !== null) {
                  $(chatContainerDOM).css('padding-right', '315px');
                } else {
                  console.error("Cannot find chat container DOM element. Please update the selectors.");
                  return;
                }
              });
              var uiRequiredDataFields = [];

              if (dataFields && dataFields.length > 0) {
                uiRequiredDataFields = dataRecord.getDataFields(false, true, _dataField.UIRequired.CHAT_ONLY); // 4. on send/receive message.. add message to/update dataRecord? (check; messageListObserver)
                // 5. on switch person in messagelist; switch settings of the above? (check screenWatcher (Observer))

                this.uiRenderer.renderFieldsFromDataFields(uiRequiredDataFields, function (value) {
                  var _dataRecord;

                  console.log("Updated value to existing data record; label: ".concat(value.label, ", value: ").concat(value.value));
                  var updatedValuesForDataFields = [value];

                  if (value.label === "Acquired-number" && value.value) {
                    updatedValuesForDataFields.push({
                      label: 'Date-of-acquired-number',
                      value: new Date().toISOString()
                    });
                  } else if (value.label === "Acquired-number" && !value.value) {
                    updatedValuesForDataFields.push({
                      label: 'Date-of-acquired-number',
                      value: null
                    });
                  }

                  (_dataRecord = dataRecord) === null || _dataRecord === void 0 ? void 0 : _dataRecord.addDataToDataFields(updatedValuesForDataFields);
                  console.log("Updated dataRecord: ");
                  console.dir(dataRecord);
                }, function (preSubmitType) {// no preSubmit needed for chat screen
                }, function (submitType) {
                  var _dataRecord2;

                  (_dataRecord2 = dataRecord) === null || _dataRecord2 === void 0 ? void 0 : _dataRecord2.setUpdateMessages(true);
                });
              }

              var indexDataFieldDistance = dataRecord.getIndexOfDataFieldByTitle('Distance-in-km');

              if (indexDataFieldDistance !== -1) {
                var distanceDataField = dataRecord.usedDataFields[indexDataFieldDistance];
                var hasRecentDistanceEntry = distanceDataField.containsRecordWithinHours(12);
                var personId = dataRecord.getRecordPersonSystemId(this.nameController, true);

                if (hasRecentDistanceEntry === false && personId && personId.length > 0) {
                  this.requestHandler.getMatchProfileDetails(personId).then(function (matchDetails) {
                    var _dataRecord3, _dataRecord4, _dataRecord5, _dataRecord6, _matchDetails$data, _dataRecord7, _dataRecord8, _dataRecord9, _dataRecord10, _matchDetails$data2, _matchDetails$data3, _dataRecord11, _dataRecord12, _dataRecord13, _dataRecord14, _matchDetails$data4, _matchDetails$data5, _dataRecord15, _dataRecord16, _dataRecord17, _dataRecord18, _matchDetails$data6, _matchDetails$data7, _dataRecord19, _dataRecord20, _dataRecord21, _dataRecord22, _matchDetails$data8, _matchDetails$data9, _dataRecord23, _dataRecord24, _dataRecord25, _dataRecord26, _matchDetails$data10, _matchDetails$data10$, _dataRecord27, _dataRecord28, _dataRecord29, _dataRecord30, _dataRecord31, _dataRecord32, _dataRecord33, _dataRecord34, _matchDetails$data11, _dataRecord35;

                    if (matchDetails.error) {
                      _ConsoleColorLog.ConsoleColorLog.singleLog("Could not get match profile details for currently opened match: ", dataRecord, _LogColors.LogColors.RED);
                    }

                    var dataForDataFields = [{
                      label: 'Name',
                      value: ((_dataRecord3 = dataRecord) === null || _dataRecord3 === void 0 ? void 0 : _dataRecord3.usedDataFields[(_dataRecord4 = dataRecord) === null || _dataRecord4 === void 0 ? void 0 : _dataRecord4.getIndexOfDataFieldByTitle('Name')].getValue()) ? (_dataRecord5 = dataRecord) === null || _dataRecord5 === void 0 ? void 0 : _dataRecord5.usedDataFields[(_dataRecord6 = dataRecord) === null || _dataRecord6 === void 0 ? void 0 : _dataRecord6.getIndexOfDataFieldByTitle('Name')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data = matchDetails.data) === null || _matchDetails$data === void 0 ? void 0 : _matchDetails$data.first_name) ? matchDetails.data.first_name : 'Unknown name'
                    }, {
                      label: 'Age',
                      value: ((_dataRecord7 = dataRecord) === null || _dataRecord7 === void 0 ? void 0 : _dataRecord7.usedDataFields[(_dataRecord8 = dataRecord) === null || _dataRecord8 === void 0 ? void 0 : _dataRecord8.getIndexOfDataFieldByTitle('Age')].getValue()) ? (_dataRecord9 = dataRecord) === null || _dataRecord9 === void 0 ? void 0 : _dataRecord9.usedDataFields[(_dataRecord10 = dataRecord) === null || _dataRecord10 === void 0 ? void 0 : _dataRecord10.getIndexOfDataFieldByTitle('Age')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data2 = matchDetails.data) === null || _matchDetails$data2 === void 0 ? void 0 : _matchDetails$data2.age) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data3 = matchDetails.data) === null || _matchDetails$data3 === void 0 ? void 0 : _matchDetails$data3.age : NaN
                    }, {
                      label: 'Job',
                      value: ((_dataRecord11 = dataRecord) === null || _dataRecord11 === void 0 ? void 0 : _dataRecord11.usedDataFields[(_dataRecord12 = dataRecord) === null || _dataRecord12 === void 0 ? void 0 : _dataRecord12.getIndexOfDataFieldByTitle('Job')].getValue()) ? (_dataRecord13 = dataRecord) === null || _dataRecord13 === void 0 ? void 0 : _dataRecord13.usedDataFields[(_dataRecord14 = dataRecord) === null || _dataRecord14 === void 0 ? void 0 : _dataRecord14.getIndexOfDataFieldByTitle('Job')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data4 = matchDetails.data) === null || _matchDetails$data4 === void 0 ? void 0 : _matchDetails$data4.job) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data5 = matchDetails.data) === null || _matchDetails$data5 === void 0 ? void 0 : _matchDetails$data5.job : ''
                    }, {
                      label: 'School',
                      value: ((_dataRecord15 = dataRecord) === null || _dataRecord15 === void 0 ? void 0 : _dataRecord15.usedDataFields[(_dataRecord16 = dataRecord) === null || _dataRecord16 === void 0 ? void 0 : _dataRecord16.getIndexOfDataFieldByTitle('School')].getValue()) ? (_dataRecord17 = dataRecord) === null || _dataRecord17 === void 0 ? void 0 : _dataRecord17.usedDataFields[(_dataRecord18 = dataRecord) === null || _dataRecord18 === void 0 ? void 0 : _dataRecord18.getIndexOfDataFieldByTitle('School')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data6 = matchDetails.data) === null || _matchDetails$data6 === void 0 ? void 0 : _matchDetails$data6.school) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data7 = matchDetails.data) === null || _matchDetails$data7 === void 0 ? void 0 : _matchDetails$data7.school : ''
                    }, {
                      label: 'Gender',
                      value: ((_dataRecord19 = dataRecord) === null || _dataRecord19 === void 0 ? void 0 : _dataRecord19.usedDataFields[(_dataRecord20 = dataRecord) === null || _dataRecord20 === void 0 ? void 0 : _dataRecord20.getIndexOfDataFieldByTitle('Gender')].getValue()) ? (_dataRecord21 = dataRecord) === null || _dataRecord21 === void 0 ? void 0 : _dataRecord21.usedDataFields[(_dataRecord22 = dataRecord) === null || _dataRecord22 === void 0 ? void 0 : _dataRecord22.getIndexOfDataFieldByTitle('Gender')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data8 = matchDetails.data) === null || _matchDetails$data8 === void 0 ? void 0 : _matchDetails$data8.gender) ? _MatchDataParserHappn.MatchDataParser.getGender(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data9 = matchDetails.data) === null || _matchDetails$data9 === void 0 ? void 0 : _matchDetails$data9.gender) : 'Other'
                    }, {
                      label: 'Has-profiletext',
                      value: ((_dataRecord23 = dataRecord) === null || _dataRecord23 === void 0 ? void 0 : _dataRecord23.usedDataFields[(_dataRecord24 = dataRecord) === null || _dataRecord24 === void 0 ? void 0 : _dataRecord24.getIndexOfDataFieldByTitle('Has-profiletext')].getValue()) ? (_dataRecord25 = dataRecord) === null || _dataRecord25 === void 0 ? void 0 : _dataRecord25.usedDataFields[(_dataRecord26 = dataRecord) === null || _dataRecord26 === void 0 ? void 0 : _dataRecord26.getIndexOfDataFieldByTitle('Has-profiletext')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data10 = matchDetails.data) === null || _matchDetails$data10 === void 0 ? void 0 : (_matchDetails$data10$ = _matchDetails$data10.about) === null || _matchDetails$data10$ === void 0 ? void 0 : _matchDetails$data10$.length) > 0 ? true : false
                    }, {
                      label: 'Is-verified',
                      value: ((_dataRecord27 = dataRecord) === null || _dataRecord27 === void 0 ? void 0 : _dataRecord27.usedDataFields[(_dataRecord28 = dataRecord) === null || _dataRecord28 === void 0 ? void 0 : _dataRecord28.getIndexOfDataFieldByTitle('Is-verified')].getValue()) ? (_dataRecord29 = dataRecord) === null || _dataRecord29 === void 0 ? void 0 : _dataRecord29.usedDataFields[(_dataRecord30 = dataRecord) === null || _dataRecord30 === void 0 ? void 0 : _dataRecord30.getIndexOfDataFieldByTitle('Is-verified')].getValue() : (matchDetails === null || matchDetails === void 0 ? void 0 : matchDetails.data.verification.status) !== "unverified"
                    }, //todo: Figure out if I want to include distance & how (last crossed/know location maybe? but maybe i'll need a lat/long for that with external api?..hmm..)
                    // {
                    //     label: 'Distance-in-km',
                    //     value: [{
                    //         dateTime: new Date().toISOString(),
                    //         distanceInKM: this._convertDistanceMilesToKM(matchDetails?.results?.distance_mi)
                    //     }]
                    // },
                    {
                      label: 'Amount-of-pictures',
                      value: ((_dataRecord31 = dataRecord) === null || _dataRecord31 === void 0 ? void 0 : _dataRecord31.usedDataFields[(_dataRecord32 = dataRecord) === null || _dataRecord32 === void 0 ? void 0 : _dataRecord32.getIndexOfDataFieldByTitle('Amount-of-pictures')].getValue()) ? (_dataRecord33 = dataRecord) === null || _dataRecord33 === void 0 ? void 0 : _dataRecord33.usedDataFields[(_dataRecord34 = dataRecord) === null || _dataRecord34 === void 0 ? void 0 : _dataRecord34.getIndexOfDataFieldByTitle('Amount-of-pictures')].getValue() : matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data11 = matchDetails.data) === null || _matchDetails$data11 === void 0 ? void 0 : _matchDetails$data11.nb_photos
                    }];
                    (_dataRecord35 = dataRecord) === null || _dataRecord35 === void 0 ? void 0 : _dataRecord35.addDataToDataFields(dataForDataFields);
                  });
                }
              }
            }
          } else {
            console.error('Current match id not found');
          }
        } else {
          console.error('Invalid matchId.');
        }
      }

      if (screenController.isSwipeScreen()) {
        if (forceRefresh) {
          this.uiRenderer.removeAllUIHelpers();
        }

        var newDataRecord = new _dataRecord36.DataRecord();
        this.uiRenderer.renderFieldsContainerForScreen(this.screenController, function () {
          $(".uiHelperFieldsContainer").css('height', '785px');
          $(".uiHelperFieldsContainer").css('overflow-y', 'scroll');
          $(".uiHelperFieldsContainer").css('position', 'absolute');
          $(".uiHelperFieldsContainer").css('right', '0px');
          $(".uiHelperFieldsContainer").css('left', 'auto');
          $(".uiHelperFieldsContainer").css('top', '80px');
        }, function () {
          var dataRecordValuesFromCollectedData = [];

          _this.screenController.getCurrentScreen().getScreenElements().forEach(function (screenElement) {
            var hasCollectedData = screenElement.collectData();

            switch (screenElement.getName()) {
              case "Name":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: screenElement.getValueAsString()
                  });
                  break;
                }

              case "Age":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: screenElement.getValueAsNumber()
                  });
                  break;
                }

              case "Job":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : ""
                  });
                  break;
                }

              case "School":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : ""
                  });
                  break;
                }

              case "Has-profiletext":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : false
                  });
                  break;
                }

              case "Is-verified":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsBoolean() : false
                  });
                  break;
                }

              case "Amount-of-pictures":
                {
                  dataRecordValuesFromCollectedData.push({
                    label: screenElement.getName(),
                    value: hasCollectedData ? screenElement.getValueAsString() : null
                  });
                  break;
                }

              default:
                _ConsoleColorLog.ConsoleColorLog.singleLog("Screen element with name: ".concat(screenElement.getName(), " is not collected for adding to the dataRecord. Please check if this is correct."), screenElement.getValueAsString(), _LogColors.LogColors.YELLOW);

            }
          });

          _this.screenController.getCurrentScreen().clearValuesScreenElements();

          _ConsoleColorLog.ConsoleColorLog.multiLog("Here is the collected data from DOM: ", dataRecordValuesFromCollectedData, _LogColors.LogColors.GREEN, true);

          newDataRecord.addDataToDataFields(dataRecordValuesFromCollectedData);

          _this.uiRenderer.updateDataFieldValues();
        });

        var _uiRequiredDataFields = newDataRecord.getDataFields(false, true, _dataField.UIRequired.SELECT_ONLY);

        newDataRecord.addDataToDataFields([// set initial value to later be adjusted by ui control
        {
          label: 'Has-usefull-profiletext',
          value: false
        }, {
          label: 'Attractiveness-score',
          value: 6
        }, {
          label: 'Seems-fake',
          value: false
        }, {
          label: 'Seems-empty',
          value: false
        }, {
          label: 'Seems-obese',
          value: false
        }, {
          label: 'Seems-toppick',
          value: false
        }, {
          label: 'Last-updated',
          value: new Date().toISOString()
        }, {
          label: 'Is-match',
          value: false
        }, {
          label: 'Date-liked-or-passed',
          value: new Date().toISOString()
        }]); // todo: WHY NOT DIRECTLY GET/USE DATA FIELDS? WHY GET DATAFIELDTYPES AT ALL? cuz i might also need required property in the future, i need a default value (which i'm going to set on data field), i DO need a already set property for use when chatting etc..

        var timeoutSubmit = null;
        this.uiRenderer.renderFieldsFromDataFields(_uiRequiredDataFields, function (value) {
          console.log("Added value to new data record; label: ".concat(value.label, ", value: ").concat(value.value));
          newDataRecord.addDataToDataFields([value]);
          console.log("Updated dataRecord: ");
          console.dir(newDataRecord);
        }, function (preSubmitType) {
          console.log('Callback received a (pre-)submit type! But it will only be used if no response from background can be retrieved');

          _this._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_START);
        }, function (submitType) {
          console.log('Callback received a submit type! But it will only be used if no response from background can be retrieved');

          _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', true);

          console.log(submitType);

          _this._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_PROCESS);

          console.log(_this.dataStorage);
          console.assert(_this.dataStorage.popLastActionFromDataStore() === undefined); //todo: refactor all code below to use a promise, in which a set interval checks every 100ms orso if a dataStorage item is available then executes code as normal to a max of 60 sec
          // OR even better; once submittype has been pressed, do nothing here, copy the code below to the backgroundscriptlistener? (let THAT code check if we are on swiping page, what is filled into the datafields etc.)
          // OR EVEN BETTER YET; this code (except for when the timeout begins should always run first, sooner than my backgroundscript can receive a response..), so; create a new promise, add it to the dataStore, let the eventlistener from backgroundscript trigger the resolve, if no response comes make my script below (with timeout) trigger the reject after 1 min orso
          // get (request) personid from backgroundscript (get response), after 1 sec

          var ms = 1000;

          if (timeoutSubmit !== null) {
            return;
          }

          timeoutSubmit = setTimeout(function () {
            console.log('this is what is found in dataStore after 1 sec: ');
            console.log(_this.dataStorage);

            var submitAction = _this.dataStorage.popLastActionFromDataStore();

            console.log(submitAction);
            var typeOfLikeOrPass = '';

            if (submitAction !== undefined) {
              var personActionStatus = undefined;

              if (submitAction.submitType === _personAction.PersonAction.LIKED_PERSON) {
                personActionStatus = true;
                typeOfLikeOrPass = 'like';
              }

              if (submitAction.submitType === _personAction.PersonAction.SUPER_LIKED_PERSON) {
                personActionStatus = true;
                typeOfLikeOrPass = 'superlike';
              }

              if (submitAction.submitType === _personAction.PersonAction.PASSED_PERSON) {
                personActionStatus = false;
                typeOfLikeOrPass = 'pass';
              }

              if (personActionStatus === undefined) {
                return;
              }

              var dataForDataFields = [{
                label: 'System-no',
                value: {
                  appType: _this.nameController,
                  tempId: submitAction.personId
                }
              }, {
                label: 'Did-i-like',
                value: personActionStatus
              }, {
                label: 'Type-of-match-or-like',
                value: [typeOfLikeOrPass]
              }];
              newDataRecord.addDataToDataFields(dataForDataFields);

              _this.requestHandler.getMatchProfileDetails(submitAction.personId).then(function (matchDetails) {
                var _matchDetails$data12, _matchDetails$data13, _matchDetails$data14, _matchDetails$data15, _matchDetails$data16, _matchDetails$data17, _matchDetails$data18, _matchDetails$data19, _matchDetails$data20, _matchDetails$data20$, _matchDetails$data21, _matchDetails$data21$;

                //todo: Build in; valid from guard. I must check a box in order to proceed to 'like' or 'pass' a person to prevent accidental skipping a field
                var dataForDataFields = [{
                  label: 'Name',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data12 = matchDetails.data) === null || _matchDetails$data12 === void 0 ? void 0 : _matchDetails$data12.first_name) ? matchDetails.data.first_name : 'Unknown name'
                }, {
                  label: 'Age',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data13 = matchDetails.data) === null || _matchDetails$data13 === void 0 ? void 0 : _matchDetails$data13.age) ? matchDetails.data.age : NaN
                }, // {
                //     label: 'City',
                //     value: matchDetails?.data?.city?.name.length > 0 ? matchDetails.data.city.name : ''
                // },
                {
                  label: 'Job',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data14 = matchDetails.data) === null || _matchDetails$data14 === void 0 ? void 0 : _matchDetails$data14.job) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data15 = matchDetails.data) === null || _matchDetails$data15 === void 0 ? void 0 : _matchDetails$data15.job : ''
                }, {
                  label: 'School',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data16 = matchDetails.data) === null || _matchDetails$data16 === void 0 ? void 0 : _matchDetails$data16.school) ? matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data17 = matchDetails.data) === null || _matchDetails$data17 === void 0 ? void 0 : _matchDetails$data17.school : ''
                }, {
                  label: 'Gender',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data18 = matchDetails.data) === null || _matchDetails$data18 === void 0 ? void 0 : _matchDetails$data18.gender) ? _MatchDataParserHappn.MatchDataParser.getGender(matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data19 = matchDetails.data) === null || _matchDetails$data19 === void 0 ? void 0 : _matchDetails$data19.gender) : 'Other'
                }, // {
                //     label: 'Interests',
                //     value: matchDetails?.results?.user_interests?.selected_interests?.length > 0 ? this._getInterests(matchDetails?.results?.user_interests?.selected_interests) : []
                // },
                {
                  label: 'Has-profiletext',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data20 = matchDetails.data) === null || _matchDetails$data20 === void 0 ? void 0 : (_matchDetails$data20$ = _matchDetails$data20.about) === null || _matchDetails$data20$ === void 0 ? void 0 : _matchDetails$data20$.length) > 0 ? true : false
                }, {
                  label: 'Is-verified',
                  value: (matchDetails === null || matchDetails === void 0 ? void 0 : (_matchDetails$data21 = matchDetails.data) === null || _matchDetails$data21 === void 0 ? void 0 : (_matchDetails$data21$ = _matchDetails$data21.verification) === null || _matchDetails$data21$ === void 0 ? void 0 : _matchDetails$data21$.status) !== "unverified"
                }]; // if (matchDetails?.results?.distance_mi) {
                //     dataForDataFields.push({
                //         label: 'Distance-in-km',
                //         value: [{
                //             dateTime: new Date().toISOString(),
                //             distanceInKM: this._convertDistanceMilesToKM(matchDetails?.results?.distance_mi)
                //         }]
                //     });
                // }

                newDataRecord.addDataToDataFields(dataForDataFields);
              }).catch(function () {
                console.error("Swiped person received tempId, but could not get details of swiped person! Saving inserted info of record regardless");
              }).finally(function () {
                _this.dataTable.addNewDataRecord(newDataRecord, _this.nameController);

                _this.addUIHelpers(_this.screenController, true);

                _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', false);
              });
            } else {
              newDataRecord.addDataToDataFields([// set initial value to later be adjusted by ui control
              {
                label: 'System-no',
                value: {
                  // appType: 'happn',
                  appType: _this.nameController.toString(),
                  tempId: "idNotRetrievedPleaseCheckBackgroundRequestsBackupsInLocalStorage-".concat(new Date().toISOString())
                }
              }, {
                label: 'Did-i-like',
                value: submitType === 'liked' ? true : false
              }, {
                label: 'Type-of-match-or-like',
                value: [submitType]
              }]);

              _this.dataTable.addNewDataRecord(newDataRecord, _this.nameController);

              _this.addUIHelpers(_this.screenController, true);

              _this._logLatestDataRecord(newDataRecord);

              _Overlay.Overlay.setLoadingOverlay('loadingSwipeAction', false);

              debugger;
              console.error("Swiped person received no tempId! Saving inserted info of record regardless.. Don't forget to check background local storage requests backup to get the corresponding personid and to overwrite the tempId later!");
              alert("Swiped person received no tempId! Saving inserted info of record regardless.. Don't forget to check background local storage requests backup to get the corresponding personid and to overwrite the tempId later!"); //todo: Should REALLY throw a important alert to notify myself what I need to pay extra attention!
            }

            _this._postMessageBackgroundScript(_PortAction.PortAction.SWIPED_PERSON_ACTION_END);

            timeoutSubmit = null;
          }, ms);
        });
      } //todo: create view to show gathered info for all dataFields (thus also showing current value of; name, age, hasProfiletext etc.)
      //todo: create 're-try retrieve' button; for when the tinder UI finishes loading too late and my app already attempted to gather data
      //todo: figure out a solution to auto get 'hasProfileText' for when a profile DOES HAVE profileText but isnt show in the initial view because there is too much other info (location, age, distance, job etc.).. maybe do inplement a previous screen?
      //todo: create ability to while swipe/chat see all the values being stored for this record/person
      //todo: create checker method which checks if above DOM element ref exists, otherwise throw error
      //todo: FUTURE; create checker method which checks if all required DOM elements used here still exist (auto loop through application?)
      //todo: add other state (if,.. or seperate method) for adding chat ui helper VS swipe ui helper. Currently working on swipe ui helper
      //todo: seperate out logic for everything UI related; create a seperate class which recognizes app state (which screen we are on), removes existing helprs when on switch etc.

    }
  }, {
    key: "_logLatestDataRecord",
    value: function _logLatestDataRecord(newDataRecord) {
      var _newDataRecord$getDat, _newDataRecord$getDat2;

      var name = (_newDataRecord$getDat = newDataRecord.getDataFields().find(function (dataField) {
        return dataField.title === "Name";
      })) === null || _newDataRecord$getDat === void 0 ? void 0 : _newDataRecord$getDat.getValue();
      var notes = (_newDataRecord$getDat2 = newDataRecord.getDataFields().find(function (dataField) {
        return dataField.title === "Notes";
      })) === null || _newDataRecord$getDat2 === void 0 ? void 0 : _newDataRecord$getDat2.getValue();
      console.log("%c I just added the new dataRecord to dataTable: ".concat(newDataRecord), "color: DarkOliveGreen");
      console.log("%c New dataRecord name: ".concat(name, ", && Notes: ").concat(notes), "color: DarkOliveGreen");
    }
  }, {
    key: "getCurrentMatchIdFromChatScreen",
    value: function getCurrentMatchIdFromChatScreen() {
      var matchIdFromUrl = _UrlHelper.UrlHelper.getCurrentMatchIdFromUrl();

      if (matchIdFromUrl) {
        return matchIdFromUrl;
      } else {
        console.error("Message List Item DOM Element not found. Please check & update the selector.");
      }

      return '';
    }
  }, {
    key: "_postMessageBackgroundScript",
    value: function _postMessageBackgroundScript(actionName) {
      var _this$dataPort;

      var portMessage = {
        messageSender: 'CONTENT',
        action: actionName,
        payload: "",
        datingAppType: this.nameController
      };
      (_this$dataPort = this.dataPort) === null || _this$dataPort === void 0 ? void 0 : _this$dataPort.postMessage(portMessage);
    }
  }]);
  return UIHelpersHappn;
}();

exports.UIHelpersHappn = UIHelpersHappn;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../data/dataField":"LTXP","../data/dataRecord":"RbWp","../util/DOMHelper":"phX9","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI","./MatchDataParserHappn":"vjIz","../serrvices/Overlay":"Vug9","./../../../personAction.enum":"m5GD","../serrvices/UrlHelper":"lzYC","../../../PortAction.enum":"HH1H"}],"H39O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessagesWatcherHappn = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

var _GenericPersonPropertiesList = require("../util/GenericPersonProperties/GenericPersonPropertiesList");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MessagesWatcherHappn = /*#__PURE__*/function () {
  /*
  Simple class which watches for DOM changes in messageslist via the MutationObserver.
  If any changes occur (based on if the current list of messages has changed with the previous list of messages) it will attempt to get the corresponding dataRecord
  and set it's messagesNeedToBeUpdated property to true.
  It will also trigger a updateTable() which should prompt the parent controller to update it's data table (refresh getting the matches & messages).
    This approach makes use of the best of both the API & DOM solution:
  - The fetch all matches & corresponding latest messages which should automatically trigger a all messages update if the latest message from API does not correspond with the latest message in dataRecord
  - The DOM is checked which persons have updated their messages based on the tempId in found in the src url for their profile picture
  */
  function MessagesWatcherHappn(nameController, dataTable, watchersList) {
    (0, _classCallCheck2.default)(this, MessagesWatcherHappn);
    this.timeoutNo = null;
    this.currentMessagesList = [];
    this.watcherKeys = [];
    this.matchListByMessages = new _GenericPersonPropertiesList.GenericPersonPropertiesList();
    this.nameController = nameController;
    this.dataTable = dataTable;
    this.watchersUIList = watchersList;
  }

  (0, _createClass2.default)(MessagesWatcherHappn, [{
    key: "setMessageListWatcherOnScreen",
    value: function setMessageListWatcherOnScreen(messageListContainers, getMatchListLatestMessages, updateTable) {
      var _this = this;

      this.currentMessagesList = getMatchListLatestMessages();

      _ConsoleColorLog.ConsoleColorLog.multiLog("init:", this.currentMessagesList, _LogColors.LogColors.YELLOW, false);

      this.setLatestMessagesMatchList(this.currentMessagesList);
      var mutationObv = new MutationObserver(function (mutations) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Mutation observer for messages triggered, looking for changes", "", _LogColors.LogColors.LIGHTGREY);

        if (_this.timeoutNo !== null) {
          return;
        }

        _this.timeoutNo = setTimeout(function () {
          var newMessagesList = getMatchListLatestMessages();

          _ConsoleColorLog.ConsoleColorLog.multiLog("mutation:", newMessagesList, _LogColors.LogColors.YELLOW, false);

          _this.setLatestMessagesMatchList(_this.currentMessagesList);

          var updatedIdsFromMessages = _this.getChangedMessagesTempIds(newMessagesList);

          updatedIdsFromMessages.forEach(function (tempId) {
            var recordIndex = _this.dataTable.getRecordIndexBySystemOrTempId(tempId, _this.nameController);

            if (recordIndex === -1) {
              _ConsoleColorLog.ConsoleColorLog.singleLog("Could not find record by system id, record index is: ".concat(recordIndex, ", tempId is:"), tempId, _LogColors.LogColors.RED);

              return;
            }

            var dataRecord = _this.dataTable.getRecordByRecordIndex(recordIndex);

            if (dataRecord) {
              dataRecord.setUpdateMessages(true);

              _ConsoleColorLog.ConsoleColorLog.multiLog("Updated dataRecord: ", dataRecord, _LogColors.LogColors.GREEN, false);

              updateTable();
            } else {
              _ConsoleColorLog.ConsoleColorLog.singleLog("Could not get dataRecord with tempId: ", _this.dataTable.getRecordIndexBySystemId(tempId, _this.nameController), _LogColors.LogColors.RED);
            }
          });
          updatedIdsFromMessages = [];
          _this.timeoutNo = null;
        }, 500);
      });
      messageListContainers.each(function (index, element) {
        mutationObv.observe(element, {
          childList: true,
          subtree: true,
          characterDataOldValue: true,
          attributes: true,
          characterData: true // also track changes to character data (the (text-)contents?)

        });

        _this.watchersUIList.updatePersonProperty('messageListWatcher' + index, mutationObv);

        _this.watcherKeys.push('messageListWatcher' + index);

        _ConsoleColorLog.ConsoleColorLog.multiLog("MessageListMutationObserver set for: ", element, _LogColors.LogColors.YELLOW, false);
      });
    }
  }, {
    key: "cleanData",
    value: function cleanData() {
      this.disconnectMessageWatchers(); // clear the list of watcher keys

      this.watcherKeys = []; // Clear all the entries of matchlist found by messages

      this.matchListByMessages.clearAllEntries();
    }
  }, {
    key: "disconnectMessageWatchers",
    value: function disconnectMessageWatchers() {
      var _this2 = this;

      // disconnect all message watchers & delete them from the list
      this.watcherKeys.forEach(function (key) {
        var _this2$watchersUIList;

        var obs = (_this2$watchersUIList = _this2.watchersUIList.getPersonGenericPropertyByKey(key)) === null || _this2$watchersUIList === void 0 ? void 0 : _this2$watchersUIList.value;
        obs.disconnect();

        var watcherDeleted = _this2.watchersUIList.deletePersonGenericPropertyByKey(key);

        if (!obs || !watcherDeleted) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("A messageswatcher could not be deleted: ", key, _LogColors.LogColors.RED);
        }
      });
    }
  }, {
    key: "setLatestMessagesMatchList",
    value: function setLatestMessagesMatchList(messagesList) {
      var _this3 = this;

      messagesList.forEach(function (message) {
        _this3.matchListByMessages.updatePersonProperty(message.tempId, message.lastMessage, message.lastMessage);
      });
    }
  }, {
    key: "getChangedMessagesTempIds",
    value: function getChangedMessagesTempIds(newMessagesList) {
      var _this4 = this;

      var toBeUpdatedIdList = [];
      newMessagesList.forEach(function (newMessage) {
        var person = _this4.matchListByMessages.getPersonGenericPropertyByKey(newMessage.tempId);

        if (person !== null) {
          // ConsoleColorLog.singleLog(`Person value: ${person.value}, while newMessage.lastMessage is: ${newMessage.lastMessage}`, '', LogColors.LIGHTGREY);
          if (person.value !== newMessage.lastMessage) {
            _ConsoleColorLog.ConsoleColorLog.singleLog("Message was updated: ", newMessage.lastMessage, _LogColors.LogColors.YELLOW);

            toBeUpdatedIdList.push(newMessage.tempId);
          }
        } else {
          _this4.matchListByMessages.updatePersonProperty(newMessage.tempId, newMessage.lastMessage, newMessage.lastMessage);
        }
      });
      return toBeUpdatedIdList;
    }
  }]);
  return MessagesWatcherHappn;
}();

exports.MessagesWatcherHappn = MessagesWatcherHappn;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI","../util/GenericPersonProperties/GenericPersonPropertiesList":"J2QU"}],"XEj2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchesWatcherHappn = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MatchesWatcherHappn = /*#__PURE__*/function () {
  // private matchListByMessages = new GenericPersonPropertiesList();
  //TODO TODO TODO: UPDATE THIS TEXT

  /*
  Simple class which watches for DOM changes in messageslist via the MutationObserver.
  If any changes occur (based on if the current list of messages has changed with the previous list of messages) it will attempt to get the corresponding dataRecord
  and set it's messagesNeedToBeUpdated property to true.
  It will also trigger a updateTable() which should prompt the parent controller to update it's data table (refresh getting the matches & messages).
    This approach makes use of the best of both the API & DOM solution:
  - The fetch all matches & corresponding latest messages which should automatically trigger a all messages update if the latest message from API does not correspond with the latest message in dataRecord
  - The DOM is checked which persons have updated their messages based on the tempId in found in the src url for their profile picture
  */
  function MatchesWatcherHappn(nameController, dataTable, watchersList) {
    (0, _classCallCheck2.default)(this, MatchesWatcherHappn);
    this.timeoutNo = null;
    this.currentMessagesList = [];
    this.watcherKeys = [];
    this.currentMatchesAmount = 0;
    this.nameController = nameController;
    this.dataTable = dataTable;
    this.watchersUIList = watchersList;
  }

  (0, _createClass2.default)(MatchesWatcherHappn, [{
    key: "setMatchesNumberWatcherOnScreen",
    value: function setMatchesNumberWatcherOnScreen(matchesContainers, getCurrentMatchesAmount, updateTable) {
      var _this = this;

      var currentMatches = getCurrentMatchesAmount();

      if (getCurrentMatchesAmount() !== null) {
        this.currentMatchesAmount = currentMatches !== null ? currentMatches : 0;
      }

      _ConsoleColorLog.ConsoleColorLog.singleLog("init matchesWatcher:", currentMatches, _LogColors.LogColors.YELLOW);

      var mutationObv = new MutationObserver(function (mutations) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("Mutation observer for matches triggered, looking for changes", "", _LogColors.LogColors.LIGHTGREY);

        if (_this.timeoutNo !== null) {
          return;
        }

        _this.timeoutNo = setTimeout(function () {
          var currentMatches = getCurrentMatchesAmount();

          _ConsoleColorLog.ConsoleColorLog.singleLog("mutation matchesWatcher:", currentMatches, _LogColors.LogColors.YELLOW);

          if (currentMatches !== null && currentMatches !== _this.currentMatchesAmount) {
            _this.currentMatchesAmount = currentMatches;
            updateTable();

            _ConsoleColorLog.ConsoleColorLog.singleLog("New matches available to update in DataTable. DataTable will be updated on next refresh", '', _LogColors.LogColors.GREEN);
          }

          _this.timeoutNo = null;
        }, 500);
      });
      matchesContainers.each(function (index, element) {
        mutationObv.observe(element, {
          childList: true,
          subtree: true,
          characterDataOldValue: true,
          attributes: true,
          characterData: true // also track changes to character data (the (text-)contents?)

        });

        _this.watchersUIList.updatePersonProperty('matchesWatcher' + index, mutationObv);

        _this.watcherKeys.push('matchesWatcher' + index);

        _ConsoleColorLog.ConsoleColorLog.multiLog("MatchesMutationObserver set for: ", element, _LogColors.LogColors.YELLOW, false);
      });
    }
  }, {
    key: "cleanData",
    value: function cleanData() {
      this.disconnectMessageWatchers(); // clear the list of watcher keys

      this.watcherKeys = [];
    }
  }, {
    key: "disconnectMessageWatchers",
    value: function disconnectMessageWatchers() {
      var _this2 = this;

      // disconnect all message watchers & delete them from the list
      this.watcherKeys.forEach(function (key) {
        var _this2$watchersUIList;

        var obs = (_this2$watchersUIList = _this2.watchersUIList.getPersonGenericPropertyByKey(key)) === null || _this2$watchersUIList === void 0 ? void 0 : _this2$watchersUIList.value;
        obs.disconnect();

        var watcherDeleted = _this2.watchersUIList.deletePersonGenericPropertyByKey(key);

        if (!obs || !watcherDeleted) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("A messageswatcher could not be deleted: ", key, _LogColors.LogColors.RED);
        }
      });
    }
  }]);
  return MatchesWatcherHappn;
}();

exports.MatchesWatcherHappn = MatchesWatcherHappn;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI"}],"ytIF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.screensHappn = void 0;

var _Screen = require("../../util/Screen/Screen");

var _ScreenAction = require("../../util/Screen/ScreenAction");

var _ScreenElement = require("../../util/Screen/ScreenElement");

var _ScreenRetrievalMethod = require("../../util/Screen/ScreenRetrievalMethod.enum");

var _screenStateComboTinder = require("../../util/Screen/screenStateComboTinder.enum");

var screensHappn = [new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.Swipe, [new _ScreenAction.ScreenAction('like', 'div[data-testid="action-list-container"] button[data-testid="profile-btn-like"]'), new _ScreenAction.ScreenAction('pass', 'div[data-testid="action-list-container"] button[data-testid="profile-btn-reject"]'), new _ScreenAction.ScreenAction('superlike', 'div[data-testid="action-list-container"] button[data-testid="profile-btn-flashnote"]')], [new _ScreenElement.ScreenElement('Name', '*[data-testid="profile-name"]', '', true, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Age', '*[data-testid="profile-age"]', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT, function (value) {
  return value.replace(", ", "").trim();
}), new _ScreenElement.ScreenElement('Job', getJobHappn, '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('School', getSchoolHappn, '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_TEXT_ELEMENT), new _ScreenElement.ScreenElement('Has-profiletext', getProfileTextHappn, '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Is-verified', 'svg[data-testid="profile-badges-verified"]', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENT_EXISTS), new _ScreenElement.ScreenElement('Amount-of-pictures', 'img[radius="large"]', '', false, _ScreenRetrievalMethod.ScreenRetrievalMethod.GET_ELEMENTS_AMOUNT)], 'swipe', true, true), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.Chat, [new _ScreenAction.ScreenAction('sendMessage', 'textarea[data-testid="sender-input"]')], [], 'chat', false, false), new _Screen.Screen(_screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen, [], [], 'other', false, false)];
exports.screensHappn = screensHappn;

function getJobHappn() {
  var workIconElement = $('[data-testid="BriefcaseIcon"]');

  if (!workIconElement || workIconElement.length === 0) {
    console.warn("Could not find work icon for job Screen Element");
    return null;
  }

  var parentWorkIconElement = $(workIconElement).parent().parent();

  if (!parentWorkIconElement || parentWorkIconElement.length === 0) {
    console.warn("Could not find parent elements from work icon for job Screen Element");
    return null;
  }

  var textElement = $(parentWorkIconElement).find("p:first");

  if (!textElement || textElement.length === 0) {
    console.warn("Could not find text containing job for job Screen Element");
    return null;
  }

  return textElement[0];
}

function getSchoolHappn() {
  var schoolIconElement = $('[data-testid="SchoolIcon"]');

  if (!schoolIconElement || schoolIconElement.length === 0) {
    console.warn("Could not find work icon for job Screen Element");
    return null;
  }

  var parentSchoolIconElement = $(schoolIconElement).parent().parent();

  if (!parentSchoolIconElement || parentSchoolIconElement.length === 0) {
    console.warn("Could not find parent elements from work icon for job Screen Element");
    return null;
  }

  var textElement = $(parentSchoolIconElement).find("p:first");

  if (!textElement || textElement.length === 0) {
    console.warn("Could not find text containing job for job Screen Element");
    return null;
  }

  return textElement[0];
}

function getProfileTextHappn() {
  var infoElement = $('[data-testid="infos-section"]');

  if (!infoElement || infoElement.length === 0) {
    console.warn("Could not find info element for profileText Screen Element");
    return null;
  }

  var nextElement = infoElement.next();

  if (!nextElement || nextElement.length === 0) {
    console.warn("Could not find next element for infoElement for getting profileText Screen Element");
    return null;
  }

  if (nextElement.is('div') && nextElement.children().length > 0) {
    return nextElement[0];
  }

  return null;
}
},{"../../util/Screen/Screen":"vWGR","../../util/Screen/ScreenAction":"mUYg","../../util/Screen/ScreenElement":"MLi3","../../util/Screen/ScreenRetrievalMethod.enum":"wCII","../../util/Screen/screenStateComboTinder.enum":"mNpB"}],"z81V":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HappnController = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _screenStateComboTinder = require("../util/Screen/screenStateComboTinder.enum");

var _UIFieldsRenderer = require("./UIFieldsRenderer");

var _requestHandlerHappn = require("../http-requests/requestHandlerHappn");

var _ConsoleColorLog = require("../util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("../util/ConsoleColorLog/LogColors");

var _HappnMatchesAndMessagesController = require("./HappnMatchesAndMessagesController");

var _Overlay = require("../serrvices/Overlay");

var _UIHelpersHappn = require("./UIHelpersHappn");

var _UrlHelper = require("../serrvices/UrlHelper");

var _MessagesWatcher = require("./MessagesWatcher");

var _GenericPersonPropertiesList = require("../util/GenericPersonProperties/GenericPersonPropertiesList");

var _MatchesWatcher = require("./MatchesWatcher");

var _ScreenList = require("../util/Screen/ScreenList");

var _Screens = require("../happn/config/Screens");

var _datingAppType = require("../../../datingAppType.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HappnController = /*#__PURE__*/function () {
  function HappnController(dataRetrievalMethod, dataTable, dataStorage, dataPort) {
    var _this = this;

    (0, _classCallCheck2.default)(this, HappnController);
    // private nameController = 'happn';
    this.nameController = _datingAppType.DatingAppType.HAPPN;
    this.dataRetrievalMethod = null;
    this.screenList = new _ScreenList.ScreenController(_Screens.screensHappn);
    this.uiRenderer = new _UIFieldsRenderer.UIFieldsRenderer(this.screenList);
    this.uIHelpersHappn = null;
    this.messagesWatcher = null;
    this.matchesWatcher = null;
    this.happnAccessToken = '';
    this.currentScreenTimeoutId = null;
    this.currentScreen = this.getCurrentScreenByDOM();
    this.currentMatchIdByUrlChat = _UrlHelper.UrlHelper.getCurrentMatchIdFromUrl();
    this.dataTableNeedsToBeUpdated = false;
    this.watchersUIList = new _GenericPersonPropertiesList.GenericPersonPropertiesList();
    this.happnMatchesAndMessagesController = null;
    this.dataRetrievalMethod = dataRetrievalMethod;
    this.dataTable = dataTable;
    this.dataStorage = dataStorage;
    this.dataPort = dataPort;

    if (this.dataRetrievalMethod === 'api' || this.dataRetrievalMethod === 'dom') {
      if (this.dataRetrievalMethod === 'api') {
        var hasCredentials = this.setCredentials();

        if (hasCredentials) {
          this.requestHandler = new _requestHandlerHappn.RequestHandlerHappn(this.happnAccessToken);
          this.happnMatchesAndMessagesController = new _HappnMatchesAndMessagesController.HappnMatchesAndMessagesController(this.requestHandler, this.dataTable, this.nameController);
          this.uIHelpersHappn = new _UIHelpersHappn.UIHelpersHappn(this.nameController, this.screenList, this.uiRenderer, this.dataTable, this.requestHandler, this.dataStorage, this.dataPort);
          this.messagesWatcher = new _MessagesWatcher.MessagesWatcherHappn(this.nameController, this.dataTable, this.watchersUIList);
          this.matchesWatcher = new _MatchesWatcher.MatchesWatcherHappn(this.nameController, this.dataTable, this.watchersUIList);

          _Overlay.Overlay.setLoadingOverlay('initApp', true);

          this.happnMatchesAndMessagesController.refreshDataTableMatchesAndMatchMessages().then(function () {
            console.log("RefreshDataTableMatchesAndMatchMessages .then START"); //todo: 4 Inplement add tinder UI support overlay (e.g. add icon/color to match who hasn't replied in a week)

            _this.setSwipeHelperOnScreen();
          }).catch(function (error) {
            console.dir(error);
            console.error("Something went wrong");
          }).finally(function () {
            _Overlay.Overlay.setLoadingOverlay('initApp', false);

            _this.setScreenWatcher('body');

            _this.setMessagesWatcher();

            _this.setMatchesWatcher();
          });
        } else {
          console.error("Could not get credentials for tinder");
        }
      }

      if (this.dataRetrievalMethod === 'dom') {
        console.error("Data retrieveMethod DOM is not yet supported");
      }
    } else {
      console.error("Unknown data retrievelMethod for ".concat(this.nameController));
    }
  }

  (0, _createClass2.default)(HappnController, [{
    key: "setMatchesWatcher",
    value: function setMatchesWatcher() {
      var _this$matchesWatcher,
          _this$matchesWatcher2,
          _this2 = this;

      var matchesContainers = this.getMatchesContainerDOMRef();
      (_this$matchesWatcher = this.matchesWatcher) === null || _this$matchesWatcher === void 0 ? void 0 : _this$matchesWatcher.cleanData();
      (_this$matchesWatcher2 = this.matchesWatcher) === null || _this$matchesWatcher2 === void 0 ? void 0 : _this$matchesWatcher2.setMatchesNumberWatcherOnScreen(matchesContainers, function () {
        return _this2.getMatchesAmount(matchesContainers);
      }, function () {
        _this2.setRefreshDataTable(true);
      });
    }
  }, {
    key: "setMessagesWatcher",
    value: function setMessagesWatcher() {
      var _this$messagesWatcher,
          _this$messagesWatcher2,
          _this3 = this;

      var messageListContainers = this.getMessageContainerDOMRef();
      (_this$messagesWatcher = this.messagesWatcher) === null || _this$messagesWatcher === void 0 ? void 0 : _this$messagesWatcher.cleanData();
      (_this$messagesWatcher2 = this.messagesWatcher) === null || _this$messagesWatcher2 === void 0 ? void 0 : _this$messagesWatcher2.setMessageListWatcherOnScreen(messageListContainers, function () {
        return _this3.getMatchTempIdLatestFromLatestMessage(messageListContainers);
      }, function () {
        _this3.setRefreshDataTable(true);
      });
    }
  }, {
    key: "getMessageContainerDOMRef",
    value: function getMessageContainerDOMRef() {
      var messageListContainers = $('body [data-testid="conversations-pending-button-outer"]').next();

      if (messageListContainers.length === 0) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("No element(s) found by HTML path: ", 'body [data-testid="conversations-pending-button-outer"]', _LogColors.LogColors.RED);
      }

      messageListContainers.each(function (index, element) {
        if (!element) {
          console.error("Element with identifier not found: ".concat(element, ". Please update identifiers."));
          return;
        }
      });
      return messageListContainers;
    }
  }, {
    key: "getMatchesContainerDOMRef",
    value: function getMatchesContainerDOMRef() {
      var messageListContainers = $('body [data-testid="conversations-pending-button-outer"]');

      if (messageListContainers.length === 0) {
        _ConsoleColorLog.ConsoleColorLog.singleLog("No element(s) found by HTML path: ", 'body [data-testid="conversations-pending-button-outer"]', _LogColors.LogColors.RED);
      }

      messageListContainers.each(function (index, element) {
        if (!element) {
          console.error("Element with identifier not found: ".concat(element, ". Please update identifiers."));
          return;
        }
      });
      return messageListContainers;
    }
  }, {
    key: "getMatchTempIdLatestFromLatestMessage",
    value: function getMatchTempIdLatestFromLatestMessage(messageListContainers) {
      var messagesList = [];
      $(messageListContainers).each(function (index, element) {
        var messagesPanel = $(element).find('[data-testid="conversation-list-item"]');
        messagesPanel.each(function (index, elem) {
          var srcUrl = $(elem).find('[data-testid="conversations-avatar-picture"]').attr('src');
          var srcDisabledMatchUrl = $(elem).find('[data-testid="conversations-avatar-empty"]');

          if (srcDisabledMatchUrl.length > 0) {
            _ConsoleColorLog.ConsoleColorLog.singleLog("A match conversation has been removed, thus unable to get tempId nor dataRecord", 'Please remove this old deleted match from the list manually', _LogColors.LogColors.RED);

            return;
          }

          var tempId = '';

          if (srcUrl === null || srcUrl === void 0 ? void 0 : srcUrl.includes('https://images.happn.fr/resizing/')) {
            var reducedString = srcUrl.replace('https://images.happn.fr/resizing/', '');
            var firstSlashPos = reducedString.indexOf('/');
            tempId = reducedString.substring(0, firstSlashPos);
          } else {
            _ConsoleColorLog.ConsoleColorLog.singleLog('Warning! Picture url in message does no longer contain a recognized format to safely extract temorary id! Please check the image urls', '', _LogColors.LogColors.YELLOW);

            return;
          }

          if (tempId.length === 0) {
            _ConsoleColorLog.ConsoleColorLog.singleLog("Error while setting tempId, tempId turned out empty. Please check the code", false, _LogColors.LogColors.RED);

            return;
          }

          var lastMessage = $(elem).find('[data-testid="conversation-list-item-preview-text"]').text();
          messagesList.push({
            tempId: tempId,
            lastMessage: lastMessage
          });
        });
      });
      return messagesList;
    }
  }, {
    key: "getMatchesAmount",
    value: function getMatchesAmount(messageListContainers) {
      var matchesAmount = null;
      $(messageListContainers).each(function (index, element) {
        var _textContent$match, _textContent$match2;

        var textElement$ = $(element).find('p:contains("Crushes op je")').first();

        if (textElement$.length === 0) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Could not find matches container element. Please update identifier for matchesContainer", '', _LogColors.LogColors.RED);

          return;
        }

        var textContent = textElement$.text();

        if (!textContent.startsWith("Er wachten ") || !textContent.endsWith(" Crushes op je")) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Text content in matches container does not match expected format. Please update expected format.", '', _LogColors.LogColors.RED);

          return;
        }

        var matchesNumberAsString = ((_textContent$match = textContent.match(/\d+/)) === null || _textContent$match === void 0 ? void 0 : _textContent$match[0]) ? (_textContent$match2 = textContent.match(/\d+/)) === null || _textContent$match2 === void 0 ? void 0 : _textContent$match2[0] : "";

        if (!matchesNumberAsString || matchesNumberAsString === "") {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Could not get matches amount from text. Please update expected format. Text received is: ", matchesNumberAsString, _LogColors.LogColors.RED);

          return;
        } else {
          var matchesNumberAsNumber = parseInt(matchesNumberAsString);

          if (matchesNumberAsNumber < 0) {
            _ConsoleColorLog.ConsoleColorLog.singleLog("The amount of matches cannot be less than 0. Something went wrong while parsing from string to int. Parsed text is: ", matchesNumberAsNumber, _LogColors.LogColors.RED);

            return;
          }

          if (matchesNumberAsNumber >= 90) {
            _ConsoleColorLog.ConsoleColorLog.singleLog("I have gathered 90 or more matches. So far I think I cannot count more than 99+, please send some matches messages or delete some to decrease this number ands thus be able to watch the (new) incoming matches. Matches amount: ", matchesNumberAsNumber, _LogColors.LogColors.YELLOW);
          }

          matchesAmount = matchesNumberAsNumber;
        }
      });
      return matchesAmount;
    }
  }, {
    key: "setScreenWatcher",
    value: function setScreenWatcher(containerDomElement) {
      var _this4 = this;

      /*
          Sets the currently active screen
      */
      var $SOCcontainer = $(containerDomElement).first()[0];

      if (!$SOCcontainer) {
        console.error("Element with identifier not found: ".concat(containerDomElement, ". Please update identifiers."));
        return;
      } // Only need to observe the swipe-or-chat container. The matches & messageList container are always present (though not visible) anyway!
      // Thus I can always apply DOM manipulations on them when needed!


      var mutationObv = new MutationObserver(function (mutations) {
        if (_this4.currentScreen === _this4.getCurrentScreenByDOM()) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Still on the same screen: ", _this4.currentScreen, _LogColors.LogColors.BLUE);
        }

        _this4.currentScreen = _this4.getCurrentScreenByDOM();

        _ConsoleColorLog.ConsoleColorLog.singleLog("New screen: ", _this4.currentScreen, _LogColors.LogColors.BLUE);

        if (_this4.currentScreenTimeoutId !== null) {
          // if timeout below is already set once, prevent it from setting it again untill it finishes to save resources
          return;
        }

        if (_this4.isAnyDataRecordProfileOrMessageSetToNeedsUpdate()) {
          _this4.setRefreshDataTable(true);
        }

        if (_this4.currentScreen === _screenStateComboTinder.ScreenNavStateComboTinder.Chat) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Switched to screen: ", _screenStateComboTinder.ScreenNavStateComboTinder.Chat, _LogColors.LogColors.GREEN);

          var newMatchIdFromUrl = _UrlHelper.UrlHelper.getCurrentMatchIdFromUrl();

          _this4.setMessagesWatcher();

          _this4.setMatchesWatcher();
        } else if (_this4.currentScreen === _screenStateComboTinder.ScreenNavStateComboTinder.Swipe) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("Switched to screen: ", _screenStateComboTinder.ScreenNavStateComboTinder.Swipe, _LogColors.LogColors.BLUE);
        }

        _Overlay.Overlay.setLoadingOverlay('switchScreen', true);

        _this4.uiRenderer.removeAllUIHelpers();

        _this4.currentScreenTimeoutId = setTimeout(function () {
          _this4.currentScreen = _this4.getCurrentScreenByDOM();

          _this4.screenList.updateCurrentScreen(_this4.currentScreen);

          console.log("Current screen: ".concat(_this4.currentScreen));
          _this4.currentScreenTimeoutId = null;
          console.log("execute add UI helpers for screen: ".concat(_this4.currentScreen));

          if (_this4.dataTableNeedsToBeUpdated) {
            var _this4$happnMatchesAn;

            (_this4$happnMatchesAn = _this4.happnMatchesAndMessagesController) === null || _this4$happnMatchesAn === void 0 ? void 0 : _this4$happnMatchesAn.refreshDataTableMatchesAndMatchMessages().then(function () {
              _this4.setRefreshDataTable(false);

              _this4.screenList.updateCurrentScreen(_this4.currentScreen);

              _this4.setSwipeHelperOnScreen();
            }).finally(function () {
              _Overlay.Overlay.setLoadingOverlay('switchScreen', false);
            });
          } else {
            _this4.setSwipeHelperOnScreen();

            _Overlay.Overlay.setLoadingOverlay('switchScreen', false);
          }
        }, 1000);
      });
      mutationObv.observe($SOCcontainer, {
        childList: false,
        subtree: false,
        characterDataOldValue: false,
        attributes: true
      });
      this.watchersUIList.updatePersonProperty('screenWatcher', mutationObv);
    }
  }, {
    key: "isAnyDataRecordProfileOrMessageSetToNeedsUpdate",
    value: function isAnyDataRecordProfileOrMessageSetToNeedsUpdate() {
      var firstDataRecordWhichNeedsUpdateProfileOrMessages = this.dataTable.getAllDataRecords().find(function (dataRecord) {
        return dataRecord.getIfProfileDetailsNeedsUpdate() || dataRecord.getIfMessagesNeedsUpdate();
      });
      return firstDataRecordWhichNeedsUpdateProfileOrMessages ? true : false;
    }
  }, {
    key: "setRefreshDataTable",
    value: function setRefreshDataTable(shouldDataTableBeRefreshed) {
      this.dataTableNeedsToBeUpdated = shouldDataTableBeRefreshed;
    }
  }, {
    key: "setSwipeHelperOnScreen",
    value: function setSwipeHelperOnScreen() {
      var _this$uIHelpersHappn;

      this.screenList.updateCurrentScreen(this.getCurrentScreenByDOM());
      (_this$uIHelpersHappn = this.uIHelpersHappn) === null || _this$uIHelpersHappn === void 0 ? void 0 : _this$uIHelpersHappn.addUIHelpers(this.screenList, true);
    }
  }, {
    key: "getCurrentScreenByDOM",
    value: function getCurrentScreenByDOM() {
      var bodyPageRef = $('body')[0];

      if (bodyPageRef) {
        var bodyPageDataPageAttr = bodyPageRef.getAttribute('data-page');

        if (!bodyPageDataPageAttr && typeof bodyPageDataPageAttr !== 'string') {
          throw new Error("Could not get current page, please check the DOM properties & code references");
        }

        var currentPage;

        switch (true) {
          case bodyPageDataPageAttr === '/home':
            currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.Swipe;
            break;

          case bodyPageDataPageAttr.startsWith('/conversations/'):
            currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.Chat;
            break;

          default:
            currentPage = _screenStateComboTinder.ScreenNavStateComboTinder.UnknownScreen;
            break;
        }

        return currentPage;
      }

      throw new Error("Could not get body DOM element from current page, please check the DOM properties & code references");
    } // public getMatchesAndMatchMessagesByAPI(requestHandler: RequestHandlerTinder, useMock: boolean): Promise<ParsedResultMatch[] | null> {
    //     //todo: make seperate out logic in different methods because whilst 'getData' may be generic, getting it will differ for each supported app.
    //     return new Promise<ParsedResultMatch[]>((resolve, reject) => {
    //         if (useMock) {
    //             console.error(`Mock unavailable, please set a (new) mock first`);
    //             resolve([]);
    //             // const test: ParsedResultMatch[] = <ParsedResultMatch[]><unknown>matchMockTwo;
    //             // console.log(`Mock data (matches & messages):`);
    //             // console.log(matchMockTwo);
    //             // resolve(test);
    //         }
    //         if (requestHandler) {
    //             this.getMatches().then((matchList: ParsedResultMatch[] | null) => {
    //                 async function getMessagesPerMatchesAsynchronously(matchesWithoutMessagesList: ParsedResultMatch[]): Promise<ParsedResultMatch[]> {
    //                     // used a standard for loop to ensure synchronous looping
    //                     for (let i = 0; i < matchesWithoutMessagesList.length; i = i + 1) {
    //                         console.log(`GETTING MESSAGES now for: ${i} - ${matchesWithoutMessagesList[i].match.id}`);
    //                         matchesWithoutMessagesList[i].matchMessages = await requestHandler.getMatchesMessagesStart(matchesWithoutMessagesList[i].match.id);
    //                         return matchesWithoutMessagesList;
    //                     }
    //                     return matchesWithoutMessagesList;
    //                 }
    //                 if (matchList === null) {
    //                     reject(null);
    //                 } else {
    //                     resolve(getMessagesPerMatchesAsynchronously(matchList));
    //                 }
    //             });
    //         } else {
    //             console.error(`The requestHandler was not set`);
    //             return null;
    //         }
    //     });
    // }

  }, {
    key: "setCredentials",
    value: function setCredentials() {
      var happnAccessToken = localStorage.getItem('access_token');

      if (happnAccessToken && happnAccessToken.length > 0) {
        this.happnAccessToken = happnAccessToken;
        return true;
      }

      return false;
    }
  }, {
    key: "disconnectAllUIWatchers",
    value: function disconnectAllUIWatchers() {
      this.uiRenderer.removeAllUIHelpers();
      this.watchersUIList.getAllEntries().forEach(function (watcherItem) {
        var watcher = watcherItem.getValue();
        watcher.disconnect();
      });
      this.watchersUIList.clearAllEntries();
      return this.watchersUIList.getEntriesAmount() === 0 ? true : false;
    }
  }, {
    key: "getReminders",
    value: function getReminders(reminderHttpList) {
      _Overlay.Overlay.setLoadingOverlay('reminderOverlay', true);

      this.requestHandler.postReminderList(reminderHttpList, function (currentIndex, totalLength, statusText) {
        console.log("".concat(currentIndex, ", / ").concat(totalLength, " - ").concat(statusText));

        _Overlay.Overlay.setLoadingOverlayProgress('reminderOverlay', currentIndex, totalLength, statusText);
      }).then(function (reminderHttpList) {
        console.dir(reminderHttpList);

        _Overlay.Overlay.setLoadingOverlay('reminderOverlay', false);
      });
    }
  }]);
  return HappnController;
}();

exports.HappnController = HappnController;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","../util/Screen/screenStateComboTinder.enum":"mNpB","./UIFieldsRenderer":"SBm3","../http-requests/requestHandlerHappn":"ZKwC","../util/ConsoleColorLog/ConsoleColorLog":"XbQV","../util/ConsoleColorLog/LogColors":"QvSI","./HappnMatchesAndMessagesController":"JK4a","../serrvices/Overlay":"Vug9","./UIHelpersHappn":"NfAd","../serrvices/UrlHelper":"lzYC","./MessagesWatcher":"H39O","../util/GenericPersonProperties/GenericPersonPropertiesList":"J2QU","./MatchesWatcher":"XEj2","../util/Screen/ScreenList":"lntC","../happn/config/Screens":"ytIF","../../../datingAppType.enum":"LiO7"}],"ZCfc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Main = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("regenerator-runtime/runtime");

var _fileHelper = require("../fileHelper");

var _tldts = require("tldts");

var _TinderController = require("./classes/controllers/TinderController");

var _dataRecord = require("./classes/data/dataRecord");

var _dataStorage = require("./classes/data/dataStorage");

var _dataTable = require("./classes/data/dataTable");

var _AutoReminder = require("./classes/serrvices/AutoReminder");

var _HappnController = require("./classes/controllers/HappnController");

var _Overlay = require("./classes/serrvices/Overlay");

var _ConsoleColorLog = require("./classes/util/ConsoleColorLog/ConsoleColorLog");

var _LogColors = require("./classes/util/ConsoleColorLog/LogColors");

var _PortAction = require("../PortAction.enum");

var _datingAppType = require("../datingAppType.enum");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Main = /*#__PURE__*/function () {
  function Main() {
    var _this = this;

    (0, _classCallCheck2.default)(this, Main);
    //console.log(`The main app constructor content works`);
    this.datingAppType = _datingAppType.DatingAppType.UNKNOWN;
    this.dataTable = new _dataTable.DataTable();
    this.dataStorage = new _dataStorage.DataStorage();
    this.autoReminder = new _AutoReminder.AutoReminder();
    this.importedFile = null;
    this.backgroundChannelPort = null;
    this.keepAliveIntervalNumber = null;
    this.downloadNetworkLogsActiveNo = null; // POPUP

    chrome.runtime.onConnect.addListener(function (port) {
      console.log("Content Port activated! ".concat(port.name));
      _this.backgroundChannelPort = chrome.runtime.connect({
        name: 'jack'
      });
      port.onMessage.addListener(function (portMessage) {
        console.log("Content Port received a message!");

        if (portMessage.messageSender === 'POPUP' && portMessage.action === _PortAction.PortAction.INIT) {
          //console.log(`I received the following message payload: `);
          //console.dir(msg.payload);
          //todo: Move this checking logic to popup,.. IN THE FUTURE so I don't have to press a button and find out AFTERWARDS that I shouldnt have pressed it because i wasnt on a recognized dating app
          _this.datingAppType = _this.checkDatingApp();

          if (_this.datingAppType !== _datingAppType.DatingAppType.UNKNOWN) {
            // this.dataTable = new DataTable();
            //for every entry i the list received in payload
            //todo: CURRENTLY; i ASSUME the dataTable will be empty (which it most likely is), but maybe i would want to check here if prior data already exists, thus updating data rather than creating new records
            var importedRecords = portMessage.payload;
            importedRecords.forEach(function (msg, index, arr) {
              var newDataRecord = new _dataRecord.DataRecord();
              var isDataAddedSuccesfully = newDataRecord.addDataToDataFields(msg);

              if (isDataAddedSuccesfully && _this.dataTable !== null) {
                var isImportedDataRecordAddedDataTable = _this.dataTable.addNewDataRecord(newDataRecord, _this.datingAppType);

                if (!isImportedDataRecordAddedDataTable) {
                  console.warn("".concat(console.count('ImportedDataRecord'), " | Imported data record: ").concat(newDataRecord, " was NOT added to dataTable: ").concat(_this.dataTable));

                  if (index === arr.length - 1) {
                    console.countReset('ImportedDataRecord');
                  }
                }
              } else {
                console.error("Error adding data from import. Please check data fields from import and error log.");
              }
            }); //todo: maybe should seperate out the logic for init app and actually getting the imported data?

            _this.datingAppController = _this.initAppController(_this.datingAppType, _this.dataTable, _this.dataStorage);

            _this.setSendReminderButton();

            _this.setCloseButton();

            _this.setDownloadNetworkLogs();

            _this.keepAliveIntervalNumber = _this.activateKeepAlive();
          } else {
            var errMsg = "Dating app type could not be recognized. Please check the logic for checking Dating App type & ensure you are on the correct app.";
            alert(errMsg);
            throw new Error(errMsg);
          }
        }

        if (portMessage.messageSender === 'POPUP' && portMessage.action === _PortAction.PortAction.FILENAME) {
          console.log("Received filename from popup: ");
          console.dir(portMessage);
          _this.importedFile = new _fileHelper.FileHelper(portMessage.payload);

          _this.setDownloadExportButton(_this.dataTable, _this.importedFile);
        }
      }); // BACKGROUND

      _this.backgroundChannelPort.onMessage.addListener(function (msg) {
        console.log("i received a portmessage:");
        console.dir(msg);

        if (msg.messageSender === 'BACKGROUND' && msg.action === _PortAction.PortAction.SUBMIT_ACTION) {
          console.log("Received submit action from background script: ");
          console.dir(msg);
          var message = msg.payload;

          _this.dataStorage.addActionToDataStore(message[0]);
        }

        if (msg.messageSender === 'BACKGROUND' && msg.action === _PortAction.PortAction.GET_NETWORK_LOGS) {
          console.log("Received download network logs: ");
          console.table(msg.payload);
          var element = document.createElement('a'); // debugger;

          element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(_this._convertObjectsToCSV(msg.payload))); // debugger;

          element.setAttribute('download', 'network-logs-' + new Date().toISOString() + ".csv");
          document.body.appendChild(element);
          element.click();

          _Overlay.Overlay.setLoadingOverlay('downloadNetworkLogs', false);

          _this.downloadNetworkLogsActiveNo = null;
        }
      });

      _this.backgroundChannelPort.onDisconnect.addListener(function () {
        if (_this.datingAppType !== null) {
          var errorMessage = "The channel with the background script has been disconnected! Stop swiping immediately to prevent potential loss of data. Please check the background script extension logs.";
          console.error(errorMessage);
          alert(errorMessage); //todo todo todo:

          /* might this be the problem?
          https://stackoverflow.com/questions/66618136/persistent-service-worker-in-chrome-extension
          https://medium.com/whatfix-techblog/service-worker-in-browser-extensions-a3727cd9117a
          e.g;
          1. have a timer count down, is it after ~5 tries always about 5 min or 30 sec before the disconnect?
          2. check network tab; are there any calls being made?
          3. try the keepAlive solution with setinterval maybe?
          4. does this event even prevent the service worker/background script from;
              a. intercepting a request?
              b. sending the contents of the intercepted request back to the content script?
          */
        } // log below will never run since when disconnect is called from content script it's own onDisconnect listener should never be called. 
        // it is called when the backgroundscript is disconnected but i never existed the app, thus never giving the command to disconnected from here (where i made the connection), thus it should be treated as an error.
        // thus if this console.log below is ever run, something is wrong.


        console.error("backgroundChannelPort was disconnected succesfully, but this log should never be shown. Something is wrong?");
      });
    });
  }

  (0, _createClass2.default)(Main, [{
    key: "_convertObjectsToCSV",
    value: function _convertObjectsToCSV(objList) {
      var result = "";
      objList.forEach(function (obj, index) {
        // debugger;
        if (index === 0) {
          result = result + Object.keys(obj).join(",") + "\r\n";
        }

        result = result + Object.values(obj).join(",") + "\r\n";
      });
      return result;
    }
  }, {
    key: "checkDatingApp",
    value: function checkDatingApp() {
      switch ((0, _tldts.parse)(window.location.hostname).domainWithoutSuffix) {
        case "tinder":
          console.log('You are on tinder');
          return _datingAppType.DatingAppType.TINDER;

        case "happn":
          console.log('You are on happn');
          return _datingAppType.DatingAppType.HAPPN;

        default:
          console.log('Did not recognize app');
          return _datingAppType.DatingAppType.UNKNOWN;
      }
    }
  }, {
    key: "initAppController",
    value: function initAppController(appType, dataTable, dataStorage) {
      switch (appType) {
        case "tinder":
          return new _TinderController.TinderController('api', dataTable, dataStorage, this.backgroundChannelPort);

        case "happn":
          return new _HappnController.HappnController('api', dataTable, dataStorage, this.backgroundChannelPort);
        // alert('Happn is not yet supported');
        // return undefined;

        default:
          alert('Unsupported app');
          return null;
      }
    }
  }, {
    key: "setDownloadExportButton",
    value: function setDownloadExportButton(dataTable, fileHelper) {
      var _this2 = this;

      $('body').prepend("\n               <button class=\"downloadButton\" id=\"downloadButton\">Export JSON</button>\n            ");
      $("body").on("click", '[id="downloadButton"]', function () {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(dataTable.getRecordValuesObject(_this2.datingAppType)));
        element.setAttribute('download', fileHelper.getUpdateFileName());
        document.body.appendChild(element);
        element.click();
      });
    }
  }, {
    key: "setCloseButton",
    value: function setCloseButton() {
      var _this3 = this;

      $('body').prepend("\n            <button class=\"closeButton\" id=\"closeButton\">Close</button>\n        ");
      var closeButtonPromptActiveNo = null;
      $("body").on("click", '[id="closeButton"]', function () {
        _Overlay.Overlay.setLoadingOverlay('closeAppAction', true);

        if (!closeButtonPromptActiveNo) {
          closeButtonPromptActiveNo = setTimeout(function () {
            var txt = '';

            if (confirm("Weet je zeker dat je wilt afsluiten?")) {
              txt = "You pressed OK!";

              _this3.deleteAppState();

              _this3.removeButtonsFromUI();
            } else {
              txt = "You pressed Cancel!";
            }

            _Overlay.Overlay.setLoadingOverlay('closeAppAction', false);

            console.log(txt);
            closeButtonPromptActiveNo = null;
          }, 100);
        }
      });
    }
  }, {
    key: "setSendReminderButton",
    value: function setSendReminderButton() {
      var _this4 = this;

      $('body').prepend("\n            <button class=\"reminderButton\" id=\"reminderButton\">Send auto reminders</button>\n        ");
      $("body").on("click", '[id="reminderButton"]', function () {
        var _this4$datingAppContr;

        console.log("SEND REMINDER LIST");

        var dataRecordsWhoNeedAutoReminder = _this4.dataTable.getAllDataRecords().filter(function (dataRecord) {
          return dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Needs-reminder")].getValue() === true;
        });

        var dataRecordsWhoNeedAutoReminderMap = dataRecordsWhoNeedAutoReminder.map(function (dataRecord) {
          var tempId = dataRecord.getRecordPersonSystemId(_this4.datingAppType, true);
          return {
            "Name": dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Name")].getValue(),
            "System-no": dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("System-no")].getValue({
              appType: _this4.datingAppType
            }),
            "tempId": tempId,
            "tempIdisHowManyCharacters": tempId ? tempId.length : null,
            "AcquiredNumber": dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Acquired-number")].getValue(),
            "Needs-reminder": dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Needs-reminder")].getValue(),
            "Messages": dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Messages")].getValue(),
            "English-only": function () {
              var values = dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Details-tags")].getValue();

              if (values.includes("is-tourist") || values.includes("is-immigrant-or-expat")) {
                return true;
              }

              return false;
            }()
          };
        });
        console.table(dataRecordsWhoNeedAutoReminderMap, ["Name", "System-no", "tempId", "tempIdisHowManyCharacters", "Needs-reminder", "Messages", "AcquiredNumber", "English-only"]);
        console.log("SEND REMINDER LIST");
        var reminderHttpList = dataRecordsWhoNeedAutoReminder.map(function (dataRecord) {
          var tempId = dataRecord.getRecordPersonSystemId(_this4.datingAppType, true);
          var completeId = dataRecord.getRecordPersonSystemId(_this4.datingAppType, false);

          if (!tempId || !completeId) {
            console.warn("Could not esthablish send reminders record; tempId is: ".concat(tempId, ", completeId is: ").concat(completeId));
            return null;
          } else {
            var name = dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Name")].getValue(); //todo: I should REALLY create a seperate helper util class for getting & setting special data classes e.g. Reminders-amount & How-many-ghosts

            var englishOnly = function () {
              var values = dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Details-tags")].getValue();

              if (values.includes("is-tourist") || values.includes("is-immigrant-or-expat")) {
                //todo: when a match is 'is-tourist' or 'is-immigrant' they are automatically seen as 'english'. Preferably I would like to have a 'language' dataField per profile so I can manually set it to English with Dutch being the default language
                return true;
              }

              return false;
            }();

            var reminderTextMessageList = function () {
              var valuesRemindersAmount = dataRecord.usedDataFields[dataRecord.getIndexOfDataFieldByTitle("Reminders-amount")].getValue();
              return valuesRemindersAmount.map(function (valueRemindersAmount) {
                return valueRemindersAmount['textContentReminder'];
              });
            }();

            return _this4.autoReminder.getReminderHttpMap(tempId, completeId, name, reminderTextMessageList, englishOnly);
          }
        });
        var reminderHttpListWithoutNulls = reminderHttpList.filter(function (reminder) {
          return !!reminder;
        }); // should filter out all the null values if any exist
        // Send remidners to max. 5 persons at a time

        var first5RemindersOnly = [];
        reminderHttpListWithoutNulls.forEach(function (reminderHttpWithoutNulls, index) {
          index <= 4 ? first5RemindersOnly.push(reminderHttpWithoutNulls) : null;
        });

        if (reminderHttpListWithoutNulls.length === 0) {
          _ConsoleColorLog.ConsoleColorLog.singleLog("No datarecords/persons need a reminder right now.", '', _LogColors.LogColors.GREEN);
        }

        debugger;
        console.log("Reminder list");
        reminderHttpList.forEach(function (reminderHttp, index) {
          console.log(index + " | TempId: " + (reminderHttp === null || reminderHttp === void 0 ? void 0 : reminderHttp.getTempId()) + " - CompleteId: " + (reminderHttp === null || reminderHttp === void 0 ? void 0 : reminderHttp.getCompleteId()) + " - MyId: " + (reminderHttp === null || reminderHttp === void 0 ? void 0 : reminderHttp.getMyId()) + " - " + (reminderHttp === null || reminderHttp === void 0 ? void 0 : reminderHttp.getMessage()));
        });
        (_this4$datingAppContr = _this4.datingAppController) === null || _this4$datingAppContr === void 0 ? void 0 : _this4$datingAppContr.getReminders(first5RemindersOnly);
      });
    }
  }, {
    key: "setDownloadNetworkLogs",
    value: function setDownloadNetworkLogs() {
      var _this5 = this;

      $('body').prepend("\n            <button class=\"downloadNetworkLogs\" id=\"downloadNetworkLogs\">Download logs</button>\n        ");
      $("body").on("click", '[id="downloadNetworkLogs"]', function () {
        var _this5$backgroundChan;

        _Overlay.Overlay.setLoadingOverlay('downloadNetworkLogs', true);

        (_this5$backgroundChan = _this5.backgroundChannelPort) === null || _this5$backgroundChan === void 0 ? void 0 : _this5$backgroundChan.postMessage({
          messageSender: 'CONTENT',
          action: _PortAction.PortAction.GET_NETWORK_LOGS,
          payload: "",
          datingAppType: _this5.datingAppType
        });

        if (!_this5.downloadNetworkLogsActiveNo) {
          _this5.downloadNetworkLogsActiveNo = setTimeout(function () {
            if (_this5.downloadNetworkLogsActiveNo === null) {
              // apparantly even though the property above is set to null, this callback still fires after a certain amount of time
              return;
            }

            _Overlay.Overlay.setLoadingOverlay('downloadNetworkLogs', false);

            alert("The call to get the network logs took had a timeout. Please check the console & console of the extension itself to find any errors.");
            _this5.downloadNetworkLogsActiveNo = null;
          }, 10000);
        }
      });
    }
  }, {
    key: "deleteAppState",
    value: function deleteAppState() {
      var _this$datingAppContro;

      if (this.keepAliveIntervalNumber != null) {
        clearInterval(this.keepAliveIntervalNumber);
        this.keepAliveIntervalNumber = null;
      }

      this.dataStorage = new _dataStorage.DataStorage();
      this.dataTable.emptyDataTable();
      this.datingAppType = _datingAppType.DatingAppType.UNKNOWN;

      try {
        var _this$backgroundChann;

        // todo: added code below in a try catch because IF backgroundscript was invalidated for some reason thus losing connection with my app (which is mostly in the content script)
        // AND if i were to close my app, thus running the code below, thus disconnecting again.. i would get a Uncaught Error: Extension context invalidated. error.
        // AND the loading spinner would yet again keep on loading forever 
        (_this$backgroundChann = this.backgroundChannelPort) === null || _this$backgroundChann === void 0 ? void 0 : _this$backgroundChann.disconnect();
      } catch (err) {
        console.error(err);
      }

      var hasDatingAppControllerWatchersDisconnected = (_this$datingAppContro = this.datingAppController) === null || _this$datingAppContro === void 0 ? void 0 : _this$datingAppContro.disconnectAllUIWatchers();

      if (hasDatingAppControllerWatchersDisconnected) {
        this.datingAppController = null;
      }

      this.importedFile = null;
    }
  }, {
    key: "removeButtonsFromUI",
    value: function removeButtonsFromUI() {
      $("body").off("click", '[id="downloadButton"]');
      $("body").off("click", '[id="closeButton"]');
      $("body").off("click", '[id="reminderButton"]');
      $("body").off("click", '[id="downloadNetworkLogs"]');
      $('body #downloadButton').remove();
      $('body #closeButton').remove();
      $('body #reminderButton').remove();
      $('body #downloadNetworkLogs').remove();
    }
  }, {
    key: "activateKeepAlive",
    value: function activateKeepAlive() {
      var _this6 = this;

      return setInterval(function () {
        var _this6$backgroundChan;

        //console.log("sending keep alive");
        (_this6$backgroundChan = _this6.backgroundChannelPort) === null || _this6$backgroundChan === void 0 ? void 0 : _this6$backgroundChan.postMessage({
          messageSender: 'CONTENT',
          action: _PortAction.PortAction.KEEP_ALIVE,
          payload: '',
          datingAppType: _this6.datingAppType
        });
      }, 4000);
    }
  }]);
  return Main;
}();

exports.Main = Main;
},{"@babel/runtime/helpers/classCallCheck":"kUj2","@babel/runtime/helpers/createClass":"dMjH","regenerator-runtime/runtime":"VuXv","../fileHelper":"gInK","tldts":"YYDv","./classes/controllers/TinderController":"QRmc","./classes/data/dataRecord":"RbWp","./classes/data/dataStorage":"zar6","./classes/data/dataTable":"vnj4","./classes/serrvices/AutoReminder":"mhAv","./classes/controllers/HappnController":"z81V","./classes/serrvices/Overlay":"Vug9","./classes/util/ConsoleColorLog/ConsoleColorLog":"XbQV","./classes/util/ConsoleColorLog/LogColors":"QvSI","../PortAction.enum":"HH1H","../datingAppType.enum":"LiO7"}],"QCba":[function(require,module,exports) {
"use strict";

var _main = require("./main");

var main = new _main.Main();
},{"./main":"ZCfc"}]},{},["QCba"], null)
//# sourceMappingURL=/index.js.map